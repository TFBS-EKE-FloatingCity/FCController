
FCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  00000b58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee8  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8a  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d2  00000000  00000000  00002782  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000410  00000000  00000000  000035f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003a01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	a1 c0       	rjmp	.+322    	; 0x148 <__vector_1>
   6:	00 00       	nop
   8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__vector_2>
   a:	00 00       	nop
   c:	4b c1       	rjmp	.+662    	; 0x2a4 <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2a c0       	rjmp	.+84     	; 0x10a <__vector_45>
  b6:	00 00       	nop
  b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__vector_46>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ab 30       	cpi	r26, 0x0B	; 11
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	27 d1       	rcall	.+590    	; 0x354 <main>
 106:	ec c4       	rjmp	.+2520   	; 0xae0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_45>:

#include <avr/interrupt.h>
#include "../general.h"

// stop Usonic measurement for it took too long
ISR(TIMER4_OVF_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	8f 93       	push	r24
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	TCCR4B &= ~(1 << CS40);		// stop timer
 11e:	e1 ea       	ldi	r30, 0xA1	; 161
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24
	TCNT4 = 0;					// reset timer value
 128:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 12c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	waiting = 0;
 130:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0b be       	out	0x3b, r0	; 59
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_1>:

// Usonic measurement (inside)
// gets called when the level on PD0 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT0_vect) {
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0b b6       	in	r0, 0x3b	; 59
 154:	0f 92       	push	r0
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(PIND & (1 << PD0)) {		// rising edge
 172:	48 9b       	sbis	0x09, 0	; 9
 174:	06 c0       	rjmp	.+12     	; 0x182 <__vector_1+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 176:	e1 ea       	ldi	r30, 0xA1	; 161
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 83       	st	Z, r24
 180:	25 c0       	rjmp	.+74     	; 0x1cc <__vector_1+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 182:	e1 ea       	ldi	r30, 0xA1	; 161
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 18c:	c4 ea       	ldi	r28, 0xA4	; 164
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	28 81       	ld	r18, Y
 192:	39 81       	ldd	r19, Y+1	; 0x01
 194:	a7 e5       	ldi	r26, 0x57	; 87
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	7e d4       	rcall	.+2300   	; 0xa96 <__umulhisi3>
 19a:	6a d3       	rcall	.+1748   	; 0x870 <__floatunsisf>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e8       	ldi	r20, 0x80	; 128
 1a2:	5d e3       	ldi	r21, 0x3D	; 61
 1a4:	f3 d3       	rcall	.+2022   	; 0x98c <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	4a ef       	ldi	r20, 0xFA	; 250
 1ac:	54 e4       	ldi	r21, 0x44	; 68
 1ae:	cc d2       	rcall	.+1432   	; 0x748 <__divsf3>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	5f e3       	ldi	r21, 0x3F	; 63
 1b8:	63 d2       	rcall	.+1222   	; 0x680 <__addsf3>
 1ba:	2e d3       	rcall	.+1628   	; 0x818 <__fixunssfsi>
		tData[0] = (dist >> 8);
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	70 83       	st	Z, r23
		tData[1] = dist;
 1c2:	61 83       	std	Z+1, r22	; 0x01
		TCNT4 = 0;
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	18 82       	st	Y, r1
		waiting = 0;
 1c8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_2>:

// Usonic measurement (outside)
// gets called when the level on PD1 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT1_vect) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	0b b6       	in	r0, 0x3b	; 59
 202:	0f 92       	push	r0
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if(PIND & (1 << PD1)) {		// rising edge
 220:	49 9b       	sbis	0x09, 1	; 9
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_2+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 224:	e1 ea       	ldi	r30, 0xA1	; 161
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	25 c0       	rjmp	.+74     	; 0x27a <__vector_2+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 230:	e1 ea       	ldi	r30, 0xA1	; 161
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 23a:	c4 ea       	ldi	r28, 0xA4	; 164
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	28 81       	ld	r18, Y
 240:	39 81       	ldd	r19, Y+1	; 0x01
 242:	a7 e5       	ldi	r26, 0x57	; 87
 244:	b1 e0       	ldi	r27, 0x01	; 1
 246:	27 d4       	rcall	.+2126   	; 0xa96 <__umulhisi3>
 248:	13 d3       	rcall	.+1574   	; 0x870 <__floatunsisf>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5d e3       	ldi	r21, 0x3D	; 61
 252:	9c d3       	rcall	.+1848   	; 0x98c <__mulsf3>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a ef       	ldi	r20, 0xFA	; 250
 25a:	54 e4       	ldi	r21, 0x44	; 68
 25c:	75 d2       	rcall	.+1258   	; 0x748 <__divsf3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	5f e3       	ldi	r21, 0x3F	; 63
 266:	0c d2       	rcall	.+1048   	; 0x680 <__addsf3>
 268:	d7 d2       	rcall	.+1454   	; 0x818 <__fixunssfsi>
		tData[2] = (dist >> 8);
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	72 83       	std	Z+2, r23	; 0x02
		tData[3] = dist;
 270:	63 83       	std	Z+3, r22	; 0x03
		TCNT4 = 0;	
 272:	19 82       	std	Y+1, r1	; 0x01
 274:	18 82       	st	Y, r1
		waiting = 0;
 276:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0b be       	out	0x3b, r0	; 59
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_3>:

// !SS falling edge 
// PIN PD2 must be connected to !SS pin
// stops the LED Timer because a transmission starts
ISR(INT2_vect) {
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	0f 92       	push	r0
 2b2:	8f 93       	push	r24
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	TCCR5B &= ~((1 << CS50) | (1 << CS51));		// stop LED Timer
 2b8:	e1 e2       	ldi	r30, 0x21	; 33
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	80 81       	ld	r24, Z
 2be:	8c 7f       	andi	r24, 0xFC	; 252
 2c0:	80 83       	st	Z, r24
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	8f 91       	pop	r24
 2c8:	0f 90       	pop	r0
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_46>:

// LEDs
// when ICR is reached the next 16Bit LED value is set
ISR(TIMER5_CAPT_vect) {
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
	leds <<= 1;
 2e6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2ea:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2f6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	if(leds < 3) { 
 2fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2fe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 302:	03 97       	sbiw	r24, 0x03	; 3
 304:	38 f4       	brcc	.+14     	; 0x314 <__vector_46+0x3e>
		leds = 3;
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 30e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
 312:	0d c0       	rjmp	.+26     	; 0x32e <__vector_46+0x58>
	} else if (leds == 0x8000) {
 314:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 318:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 31c:	81 15       	cp	r24, r1
 31e:	90 48       	sbci	r25, 0x80	; 128
 320:	31 f4       	brne	.+12     	; 0x32e <__vector_46+0x58>
		leds = 0x8001;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e8       	ldi	r25, 0x80	; 128
 326:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 32a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	} 
	PORTF = leds;
 32e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 332:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 336:	81 bb       	out	0x11, r24	; 17
	PORTK = (leds >> 8);		
 338:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 33c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 340:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
}
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <main>:


int main(void)
{
	// initialize global variables 
	waiting = 0;
 354:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	rData[0] = 0;
 358:	e8 e0       	ldi	r30, 0x08	; 8
 35a:	f2 e0       	ldi	r31, 0x02	; 2
 35c:	10 82       	st	Z, r1
	rData[1] = 0;
 35e:	11 82       	std	Z+1, r1	; 0x01
	leds = 0;
 360:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <leds+0x1>
 364:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <leds>
	
	for(uint8_t i = 0; i < 6; i++) {
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	38 f4       	brcc	.+14     	; 0x37c <main+0x28>
		tData[i] = 0;
 36e:	e8 2f       	mov	r30, r24
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	e0 50       	subi	r30, 0x00	; 0
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	10 82       	st	Z, r1
	waiting = 0;
	rData[0] = 0;
	rData[1] = 0;
	leds = 0;
	
	for(uint8_t i = 0; i < 6; i++) {
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	f7 cf       	rjmp	.-18     	; 0x36a <main+0x16>
		tData[i] = 0;
	}
	
	//INIT Watchdog
	//start Watchdog and set Watchdog LED (clear before entering while())
	DDRB |= (1 << WD_LED) | (1 << LED_WindMill);
 37c:	84 b1       	in	r24, 0x04	; 4
 37e:	80 69       	ori	r24, 0x90	; 144
 380:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( 1 << WD_LED);		// set LED on
 382:	85 b1       	in	r24, 0x05	; 5
 384:	80 68       	ori	r24, 0x80	; 128
 386:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
 388:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 38a:	99 e2       	ldi	r25, 0x29	; 41
 38c:	88 e1       	ldi	r24, 0x18	; 24
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	a8 95       	wdr
 394:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 398:	0f be       	out	0x3f, r0	; 63
 39a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
	wdt_enable(WDTO_8S);			// start WDT TOF=8s
	
	//INIT Pump timer 1
	//PWM-frequency: 2kHz
	//>0% ... >40% Dutycycle
	DDRB |= (1 << PUMP_PWM) | (1 << GENERATOR_PWM);	// PWM pins as output
 39e:	84 b1       	in	r24, 0x04	; 4
 3a0:	80 66       	ori	r24, 0x60	; 96
 3a2:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11);
 3a4:	e0 e8       	ldi	r30, 0x80	; 128
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	82 60       	ori	r24, 0x02	; 2
 3ac:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) |( 1 << WGM13);			// FastPWM mode 14
 3ae:	a1 e8       	ldi	r26, 0x81	; 129
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	8c 91       	ld	r24, X
 3b4:	88 61       	ori	r24, 0x18	; 24
 3b6:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1A1);						// set OC1A (PB5) as timer1 pwm output (generator)
 3b8:	80 81       	ld	r24, Z
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);						// set OC1B (PB6) as timer 1 pwm output (pump)
 3be:	80 81       	ld	r24, Z
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	80 83       	st	Z, r24
	ICR1 = PUMP_ICR -1;								// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 3c4:	2f e3       	ldi	r18, 0x3F	; 63
 3c6:	3f e1       	ldi	r19, 0x1F	; 31
 3c8:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 3cc:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
	OCR1A = 0;										// DutyCyle = 0%
 3d0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3d4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;										// DutyCycle = 0%
 3d8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 3dc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		
	
	//INIT windmill timer 3
	//PWM frequency: 25kHz
	//>0% ... >50% Dutycycle
	DDRE |= (1 << WM_PWM_OUT);					// PWM pin as output
 3e0:	8d b1       	in	r24, 0x0d	; 13
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	8d b9       	out	0x0d, r24	; 13
	TCCR3A |= (1 << WGM11);
 3e6:	c0 e9       	ldi	r28, 0x90	; 144
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	88 81       	ld	r24, Y
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	88 83       	st	Y, r24
	TCCR3B |= (1 << WGM12) | (1 << WGM13);		// FastPWM mode 14
 3f0:	41 e9       	ldi	r20, 0x91	; 145
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	fa 01       	movw	r30, r20
 3f6:	80 81       	ld	r24, Z
 3f8:	88 61       	ori	r24, 0x18	; 24
 3fa:	80 83       	st	Z, r24
	ICR3 = WM_ICR - 1;							// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 3fc:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 400:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	TCCR3A |= (1 << COM3A1);					// set OC3A (PE3) as timer 3 pwm output (windmill)
 404:	88 81       	ld	r24, Y
 406:	80 68       	ori	r24, 0x80	; 128
 408:	88 83       	st	Y, r24
	OCR3A = 0;									// DutyCycle = 0%
 40a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 40e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	// 30cm max. depth of water => 60cm way of sound => ca. 2ms duration
	// 16Bit timer with prescaler 1 (16MHz clock) => after ca. 4ms Overflow => cancel meassurement and write 0 to array
	// not Timer output required, only set prescaler to start timer and configure Overflow Interrupt to end measurement. 
	// start Timer: TCCR4B |= (1 << CS40);
	// stopp Timer: TCCR4B &= ~(1 << CS40);
	TIMSK4 |= (1 << TOIE4);					// set interrupt (measurement takes too long)
 412:	c2 e7       	ldi	r28, 0x72	; 114
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	88 81       	ld	r24, Y
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	88 83       	st	Y, r24
	TCNT4 = 0;								// set counter to 0 
 41c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 420:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	EICRA |= (1 << ISC00) | (1 << ISC10);					// configure INT0 on PD0 and INT1 on PD1 to any edge for Sensor 1 and 2
 424:	c9 e6       	ldi	r28, 0x69	; 105
 426:	d0 e0       	ldi	r29, 0x00	; 0
 428:	88 81       	ld	r24, Y
 42a:	85 60       	ori	r24, 0x05	; 5
 42c:	88 83       	st	Y, r24
	DDRJ |= (1 << US_TRIGGER_IN) | (1 << US_TRIGGER_OUT);	// configure PJ2 and PJ3 as Trigger output pins
 42e:	24 e0       	ldi	r18, 0x04	; 4
 430:	31 e0       	ldi	r19, 0x01	; 1
 432:	f9 01       	movw	r30, r18
 434:	80 81       	ld	r24, Z
 436:	83 60       	ori	r24, 0x03	; 3
 438:	80 83       	st	Z, r24
	// maxValue for 100% (e.g. 0.5s per LED)
	// PWM Frequency >200Hz
	// Both directions with outputs PF0 .. PF7 and PK0 .. PK7
	//      only plugged vice versa for other direction
	// two pins for MOSFETs to select the LED bank
	DDRF = 0xFF;
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	80 bb       	out	0x10, r24	; 16
	DDRK = 0xFF;
 43e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRH |= (1 << LED_GENERATOR) | (1 << LED_PUMP);		// Pins to select LED running light (per MOSFET)
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	f9 01       	movw	r30, r18
 448:	80 81       	ld	r24, Z
 44a:	83 60       	ori	r24, 0x03	; 3
 44c:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM52) |( 1 << WGM53);				// CTC mode 12
 44e:	21 e2       	ldi	r18, 0x21	; 33
 450:	31 e0       	ldi	r19, 0x01	; 1
 452:	f9 01       	movw	r30, r18
 454:	80 81       	ld	r24, Z
 456:	88 61       	ori	r24, 0x18	; 24
 458:	80 83       	st	Z, r24
	ICR5 = LED_SLOWEST_ICR - 1;							// default value -> must be calculated
 45a:	8f e4       	ldi	r24, 0x4F	; 79
 45c:	93 ec       	ldi	r25, 0xC3	; 195
 45e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 462:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
	TIMSK5 |= (1 << ICIE5);
 466:	23 e7       	ldi	r18, 0x73	; 115
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	80 81       	ld	r24, Z
 46e:	80 62       	ori	r24, 0x20	; 32
 470:	80 83       	st	Z, r24
	
	EICRA |= ( 1 << ISC21);							// enable INT2 on PD2 for falling edge (connect to !SS pin)
 472:	88 81       	ld	r24, Y
 474:	80 62       	ori	r24, 0x20	; 32
 476:	88 83       	st	Y, r24
	
	TCCR1B |= (1 << CS10);				// start Timer 1 (Pumps) Prescaler 1
 478:	8c 91       	ld	r24, X
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS10);				// start Timer 3 (Windmill) Prescaler 1
 47e:	fa 01       	movw	r30, r20
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24
	sei();
 486:	78 94       	sei
	
	
	DDR_SPI |= (1<<DD_MISO);
 488:	84 b1       	in	r24, 0x04	; 4
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	84 b9       	out	0x04, r24	; 4
	// Enable SPI
	SPCR |= (1<<SPE)|(1<<SPR0);
 48e:	8c b5       	in	r24, 0x2c	; 44
 490:	81 64       	ori	r24, 0x41	; 65
 492:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << WD_LED);			// clear init LED 
 494:	85 b1       	in	r24, 0x05	; 5
 496:	8f 77       	andi	r24, 0x7F	; 127
 498:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		PORTB |= (1 << LED_WindMill);
 49a:	85 b1       	in	r24, 0x05	; 5
 49c:	80 61       	ori	r24, 0x10	; 16
 49e:	85 b9       	out	0x05, r24	; 5
		wdt_reset();					// reset WDT => Counter = 0 
 4a0:	a8 95       	wdr
		//////////////////////////////////////////////////////////////////////////
		//                 calc pumps + LED Running Light
		//////////////////////////////////////////////////////////////////////////
		uint8_t absData = 0;
		if(rData[0] < 0) 
 4a2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 4a6:	88 23       	and	r24, r24
 4a8:	24 f4       	brge	.+8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			absData = rData[0] * (-1);
 4aa:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <rData>
 4ae:	c1 95       	neg	r28
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		else 
			absData = rData[0];
 4b2:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <rData>
			
		if(rData[0] == 0) {
 4b6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 4ba:	81 11       	cpse	r24, r1
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			OCR1A = 0;
 4be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4c2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			PORTH &= ~((1 << LED_PUMP) | (1 << LED_GENERATOR));	
 4c6:	e2 e0       	ldi	r30, 0x02	; 2
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	80 81       	ld	r24, Z
 4cc:	8c 7f       	andi	r24, 0xFC	; 252
 4ce:	80 83       	st	Z, r24
 4d0:	51 c0       	rjmp	.+162    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		} else {
			if(rData[0] > 0) {	// generator runs
 4d2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 4d6:	18 16       	cp	r1, r24
 4d8:	ec f4       	brge	.+58     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
 4da:	e2 e0       	ldi	r30, 0x02	; 2
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	80 81       	ld	r24, Z
 4e0:	8d 7f       	andi	r24, 0xFD	; 253
 4e2:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
 4e4:	80 81       	ld	r24, Z
 4e6:	81 60       	ori	r24, 0x01	; 1
 4e8:	80 83       	st	Z, r24
				OCR1B = 0;
 4ea:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 4ee:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				OCR1A = (uint16_t)((((uint32_t)(absData) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
 4f2:	2c 2f       	mov	r18, r28
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	a0 ea       	ldi	r26, 0xA0	; 160
 4f8:	bf e0       	ldi	r27, 0x0F	; 15
 4fa:	cd d2       	rcall	.+1434   	; 0xa96 <__umulhisi3>
 4fc:	24 e6       	ldi	r18, 0x64	; 100
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	a6 d2       	rcall	.+1356   	; 0xa52 <__udivmodsi4>
 506:	20 56       	subi	r18, 0x60	; 96
 508:	30 4f       	sbci	r19, 0xF0	; 240
 50a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 50e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 512:	1c c0       	rjmp	.+56     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			} else {
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
 514:	e2 e0       	ldi	r30, 0x02	; 2
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	80 81       	ld	r24, Z
 51a:	8d 7f       	andi	r24, 0xFD	; 253
 51c:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
 51e:	80 81       	ld	r24, Z
 520:	81 60       	ori	r24, 0x01	; 1
 522:	80 83       	st	Z, r24
				OCR1A = 0;
 524:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 528:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				OCR1B = (uint16_t)((((uint32_t)(absData) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
 52c:	2c 2f       	mov	r18, r28
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	a0 ea       	ldi	r26, 0xA0	; 160
 532:	bf e0       	ldi	r27, 0x0F	; 15
 534:	b0 d2       	rcall	.+1376   	; 0xa96 <__umulhisi3>
 536:	24 e6       	ldi	r18, 0x64	; 100
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	89 d2       	rcall	.+1298   	; 0xa52 <__udivmodsi4>
 540:	20 56       	subi	r18, 0x60	; 96
 542:	30 4f       	sbci	r19, 0xF0	; 240
 544:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 548:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
			}
			
			ICR5 = (uint16_t)((((uint32_t)(100-absData) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
 54c:	a4 e6       	ldi	r26, 0x64	; 100
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	ac 1b       	sub	r26, r28
 552:	b1 09       	sbc	r27, r1
 554:	28 e6       	ldi	r18, 0x68	; 104
 556:	38 e4       	ldi	r19, 0x48	; 72
 558:	4f ef       	ldi	r20, 0xFF	; 255
 55a:	5f ef       	ldi	r21, 0xFF	; 255
 55c:	b1 d2       	rcall	.+1378   	; 0xac0 <__mulshisi3>
 55e:	24 e6       	ldi	r18, 0x64	; 100
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	75 d2       	rcall	.+1258   	; 0xa52 <__udivmodsi4>
 568:	28 54       	subi	r18, 0x48	; 72
 56a:	34 4f       	sbci	r19, 0xF4	; 244
 56c:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 570:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//                       calc Windmill - PWM
		//////////////////////////////////////////////////////////////////////////
		if(rData[1] <= 0) {
 574:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rData+0x1>
 578:	18 16       	cp	r1, r24
 57a:	2c f0       	brlt	.+10     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
			OCR3A = 0;
 57c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 580:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 584:	13 c0       	rjmp	.+38     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
		} else {
			OCR3A =  (uint16_t)((((uint32_t)rData[1] * (uint32_t)(WM_ICR - WM_FASTEST_OCR))/100) + WM_FASTEST_OCR) - 1;
 586:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <rData+0x1>
 58a:	0a 2e       	mov	r0, r26
 58c:	00 0c       	add	r0, r0
 58e:	bb 0b       	sbc	r27, r27
 590:	20 ea       	ldi	r18, 0xA0	; 160
 592:	3f e0       	ldi	r19, 0x0F	; 15
 594:	8f d2       	rcall	.+1310   	; 0xab4 <__usmulhisi3>
 596:	24 e6       	ldi	r18, 0x64	; 100
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	40 e0       	ldi	r20, 0x00	; 0
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	59 d2       	rcall	.+1202   	; 0xa52 <__udivmodsi4>
 5a0:	21 56       	subi	r18, 0x61	; 97
 5a2:	30 4f       	sbci	r19, 0xF0	; 240
 5a4:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 5a8:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		// 3. in ISR if rising edge start Timer 4
		// 4. wait for falling edge on INT0
		// 5. in ISR if falling edge stop Timer 4
		// 6. calculate distance and set tData 0 and 1
		// 7. stop INT0 sensing and set TCNT4 = 0
		PORTJ |= (1 << US_TRIGGER_IN);
 5ac:	e5 e0       	ldi	r30, 0x05	; 5
 5ae:	f1 e0       	ldi	r31, 0x01	; 1
 5b0:	80 81       	ld	r24, Z
 5b2:	81 60       	ori	r24, 0x01	; 1
 5b4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b6:	8a e6       	ldi	r24, 0x6A	; 106
 5b8:	8a 95       	dec	r24
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_IN);
 5be:	80 81       	ld	r24, Z
 5c0:	8e 7f       	andi	r24, 0xFE	; 254
 5c2:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);			// activate INT0 interrupt 
 5c4:	8d b3       	in	r24, 0x1d	; 29
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 5d0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 5d4:	81 11       	cpse	r24, r1
 5d6:	fc cf       	rjmp	.-8      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
		};
		EIMSK &= ~(1 << INT0);			// deactivate INT0 interrupt
 5d8:	8d b3       	in	r24, 0x1d	; 29
 5da:	8e 7f       	andi	r24, 0xFE	; 254
 5dc:	8d bb       	out	0x1d, r24	; 29
		
		PORTJ |= (1 << US_TRIGGER_OUT);
 5de:	e5 e0       	ldi	r30, 0x05	; 5
 5e0:	f1 e0       	ldi	r31, 0x01	; 1
 5e2:	80 81       	ld	r24, Z
 5e4:	82 60       	ori	r24, 0x02	; 2
 5e6:	80 83       	st	Z, r24
 5e8:	8a e6       	ldi	r24, 0x6A	; 106
 5ea:	8a 95       	dec	r24
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_OUT);
 5f0:	80 81       	ld	r24, Z
 5f2:	8d 7f       	andi	r24, 0xFD	; 253
 5f4:	80 83       	st	Z, r24
		EIMSK |= (1 << INT1);			// activate INT1 interrupt 
 5f6:	8d b3       	in	r24, 0x1d	; 29
 5f8:	82 60       	ori	r24, 0x02	; 2
 5fa:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 602:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 606:	81 11       	cpse	r24, r1
 608:	fc cf       	rjmp	.-8      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
		};
		EIMSK &= ~(1 << INT1);			// deactivate INT1 interrupt 
 60a:	8d b3       	in	r24, 0x1d	; 29
 60c:	8d 7f       	andi	r24, 0xFD	; 253
 60e:	8d bb       	out	0x1d, r24	; 29
		
		
		
		TCCR5B |= (1 << CS50) | (1 << CS51);	// start LED Timer	
 610:	e1 e2       	ldi	r30, 0x21	; 33
 612:	f1 e0       	ldi	r31, 0x01	; 1
 614:	80 81       	ld	r24, Z
 616:	83 60       	ori	r24, 0x03	; 3
 618:	80 83       	st	Z, r24
		EIMSK |= (1 << INT2);					// enable !SS interupt when !SS is activated (falling edge)
 61a:	8d b3       	in	r24, 0x1d	; 29
 61c:	84 60       	ori	r24, 0x04	; 4
 61e:	8d bb       	out	0x1d, r24	; 29
		PORTB &= ~(1 << LED_WindMill);			// turn out WindMill flash LED
 620:	85 b1       	in	r24, 0x05	; 5
 622:	8f 7e       	andi	r24, 0xEF	; 239
 624:	85 b9       	out	0x05, r24	; 5
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	86 30       	cpi	r24, 0x06	; 6
 62a:	08 f0       	brcs	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 62c:	36 cf       	rjmp	.-404    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
					
			// Write 1st byte into register
			SPDR = tData[idx];
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	f9 01       	movw	r30, r18
 634:	e0 50       	subi	r30, 0x00	; 0
 636:	fe 4f       	sbci	r31, 0xFE	; 254
 638:	90 81       	ld	r25, Z
 63a:	9e bd       	out	0x2e, r25	; 46
					
			// Wait for transmission
			while(!(SPSR & (1<<SPIF)));
 63c:	0d b4       	in	r0, 0x2d	; 45
 63e:	07 fe       	sbrs	r0, 7
 640:	fd cf       	rjmp	.-6      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
					
			// Because only the first 2 bytes are real data => check if its the 1st or 2nd byte
			if (idx < 2) {
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	d0 f4       	brcc	.+52     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
				// Read register
				rData[idx] = SPDR;
 646:	9e b5       	in	r25, 0x2e	; 46
 648:	f9 01       	movw	r30, r18
 64a:	e8 5f       	subi	r30, 0xF8	; 248
 64c:	fd 4f       	sbci	r31, 0xFD	; 253
 64e:	90 83       	st	Z, r25
				if (rData[idx] < 0) // to send values back next time transmitting
 650:	90 81       	ld	r25, Z
 652:	99 23       	and	r25, r25
 654:	54 f4       	brge	.+20     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
					tData[idx + 4] = (uint8_t)(rData[idx] + 100);	// transform to uint8 -> see declaration
 656:	f9 01       	movw	r30, r18
 658:	e8 5f       	subi	r30, 0xF8	; 248
 65a:	fd 4f       	sbci	r31, 0xFD	; 253
 65c:	90 81       	ld	r25, Z
 65e:	9c 59       	subi	r25, 0x9C	; 156
 660:	f9 01       	movw	r30, r18
 662:	ec 5f       	subi	r30, 0xFC	; 252
 664:	fd 4f       	sbci	r31, 0xFD	; 253
 666:	90 83       	st	Z, r25
 668:	08 c0       	rjmp	.+16     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
				else
					tData[idx + 4] = (uint8_t)rData[idx];			// use positive value
 66a:	f9 01       	movw	r30, r18
 66c:	e8 5f       	subi	r30, 0xF8	; 248
 66e:	fd 4f       	sbci	r31, 0xFD	; 253
 670:	90 81       	ld	r25, Z
 672:	f9 01       	movw	r30, r18
 674:	ec 5f       	subi	r30, 0xFC	; 252
 676:	fd 4f       	sbci	r31, 0xFD	; 253
 678:	90 83       	st	Z, r25
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	d5 cf       	rjmp	.-86     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>

0000067e <__subsf3>:
 67e:	50 58       	subi	r21, 0x80	; 128

00000680 <__addsf3>:
 680:	bb 27       	eor	r27, r27
 682:	aa 27       	eor	r26, r26
 684:	0e d0       	rcall	.+28     	; 0x6a2 <__addsf3x>
 686:	48 c1       	rjmp	.+656    	; 0x918 <__fp_round>
 688:	39 d1       	rcall	.+626    	; 0x8fc <__fp_pscA>
 68a:	30 f0       	brcs	.+12     	; 0x698 <__addsf3+0x18>
 68c:	3e d1       	rcall	.+636    	; 0x90a <__fp_pscB>
 68e:	20 f0       	brcs	.+8      	; 0x698 <__addsf3+0x18>
 690:	31 f4       	brne	.+12     	; 0x69e <__addsf3+0x1e>
 692:	9f 3f       	cpi	r25, 0xFF	; 255
 694:	11 f4       	brne	.+4      	; 0x69a <__addsf3+0x1a>
 696:	1e f4       	brtc	.+6      	; 0x69e <__addsf3+0x1e>
 698:	2e c1       	rjmp	.+604    	; 0x8f6 <__fp_nan>
 69a:	0e f4       	brtc	.+2      	; 0x69e <__addsf3+0x1e>
 69c:	e0 95       	com	r30
 69e:	e7 fb       	bst	r30, 7
 6a0:	24 c1       	rjmp	.+584    	; 0x8ea <__fp_inf>

000006a2 <__addsf3x>:
 6a2:	e9 2f       	mov	r30, r25
 6a4:	4a d1       	rcall	.+660    	; 0x93a <__fp_split3>
 6a6:	80 f3       	brcs	.-32     	; 0x688 <__addsf3+0x8>
 6a8:	ba 17       	cp	r27, r26
 6aa:	62 07       	cpc	r22, r18
 6ac:	73 07       	cpc	r23, r19
 6ae:	84 07       	cpc	r24, r20
 6b0:	95 07       	cpc	r25, r21
 6b2:	18 f0       	brcs	.+6      	; 0x6ba <__addsf3x+0x18>
 6b4:	71 f4       	brne	.+28     	; 0x6d2 <__addsf3x+0x30>
 6b6:	9e f5       	brtc	.+102    	; 0x71e <__addsf3x+0x7c>
 6b8:	62 c1       	rjmp	.+708    	; 0x97e <__fp_zero>
 6ba:	0e f4       	brtc	.+2      	; 0x6be <__addsf3x+0x1c>
 6bc:	e0 95       	com	r30
 6be:	0b 2e       	mov	r0, r27
 6c0:	ba 2f       	mov	r27, r26
 6c2:	a0 2d       	mov	r26, r0
 6c4:	0b 01       	movw	r0, r22
 6c6:	b9 01       	movw	r22, r18
 6c8:	90 01       	movw	r18, r0
 6ca:	0c 01       	movw	r0, r24
 6cc:	ca 01       	movw	r24, r20
 6ce:	a0 01       	movw	r20, r0
 6d0:	11 24       	eor	r1, r1
 6d2:	ff 27       	eor	r31, r31
 6d4:	59 1b       	sub	r21, r25
 6d6:	99 f0       	breq	.+38     	; 0x6fe <__addsf3x+0x5c>
 6d8:	59 3f       	cpi	r21, 0xF9	; 249
 6da:	50 f4       	brcc	.+20     	; 0x6f0 <__addsf3x+0x4e>
 6dc:	50 3e       	cpi	r21, 0xE0	; 224
 6de:	68 f1       	brcs	.+90     	; 0x73a <__addsf3x+0x98>
 6e0:	1a 16       	cp	r1, r26
 6e2:	f0 40       	sbci	r31, 0x00	; 0
 6e4:	a2 2f       	mov	r26, r18
 6e6:	23 2f       	mov	r18, r19
 6e8:	34 2f       	mov	r19, r20
 6ea:	44 27       	eor	r20, r20
 6ec:	58 5f       	subi	r21, 0xF8	; 248
 6ee:	f3 cf       	rjmp	.-26     	; 0x6d6 <__addsf3x+0x34>
 6f0:	46 95       	lsr	r20
 6f2:	37 95       	ror	r19
 6f4:	27 95       	ror	r18
 6f6:	a7 95       	ror	r26
 6f8:	f0 40       	sbci	r31, 0x00	; 0
 6fa:	53 95       	inc	r21
 6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__addsf3x+0x4e>
 6fe:	7e f4       	brtc	.+30     	; 0x71e <__addsf3x+0x7c>
 700:	1f 16       	cp	r1, r31
 702:	ba 0b       	sbc	r27, r26
 704:	62 0b       	sbc	r22, r18
 706:	73 0b       	sbc	r23, r19
 708:	84 0b       	sbc	r24, r20
 70a:	ba f0       	brmi	.+46     	; 0x73a <__addsf3x+0x98>
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	a1 f0       	breq	.+40     	; 0x738 <__addsf3x+0x96>
 710:	ff 0f       	add	r31, r31
 712:	bb 1f       	adc	r27, r27
 714:	66 1f       	adc	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	c2 f7       	brpl	.-16     	; 0x70c <__addsf3x+0x6a>
 71c:	0e c0       	rjmp	.+28     	; 0x73a <__addsf3x+0x98>
 71e:	ba 0f       	add	r27, r26
 720:	62 1f       	adc	r22, r18
 722:	73 1f       	adc	r23, r19
 724:	84 1f       	adc	r24, r20
 726:	48 f4       	brcc	.+18     	; 0x73a <__addsf3x+0x98>
 728:	87 95       	ror	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f7 95       	ror	r31
 732:	9e 3f       	cpi	r25, 0xFE	; 254
 734:	08 f0       	brcs	.+2      	; 0x738 <__addsf3x+0x96>
 736:	b3 cf       	rjmp	.-154    	; 0x69e <__addsf3+0x1e>
 738:	93 95       	inc	r25
 73a:	88 0f       	add	r24, r24
 73c:	08 f0       	brcs	.+2      	; 0x740 <__addsf3x+0x9e>
 73e:	99 27       	eor	r25, r25
 740:	ee 0f       	add	r30, r30
 742:	97 95       	ror	r25
 744:	87 95       	ror	r24
 746:	08 95       	ret

00000748 <__divsf3>:
 748:	0c d0       	rcall	.+24     	; 0x762 <__divsf3x>
 74a:	e6 c0       	rjmp	.+460    	; 0x918 <__fp_round>
 74c:	de d0       	rcall	.+444    	; 0x90a <__fp_pscB>
 74e:	40 f0       	brcs	.+16     	; 0x760 <__divsf3+0x18>
 750:	d5 d0       	rcall	.+426    	; 0x8fc <__fp_pscA>
 752:	30 f0       	brcs	.+12     	; 0x760 <__divsf3+0x18>
 754:	21 f4       	brne	.+8      	; 0x75e <__divsf3+0x16>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	19 f0       	breq	.+6      	; 0x760 <__divsf3+0x18>
 75a:	c7 c0       	rjmp	.+398    	; 0x8ea <__fp_inf>
 75c:	51 11       	cpse	r21, r1
 75e:	10 c1       	rjmp	.+544    	; 0x980 <__fp_szero>
 760:	ca c0       	rjmp	.+404    	; 0x8f6 <__fp_nan>

00000762 <__divsf3x>:
 762:	eb d0       	rcall	.+470    	; 0x93a <__fp_split3>
 764:	98 f3       	brcs	.-26     	; 0x74c <__divsf3+0x4>

00000766 <__divsf3_pse>:
 766:	99 23       	and	r25, r25
 768:	c9 f3       	breq	.-14     	; 0x75c <__divsf3+0x14>
 76a:	55 23       	and	r21, r21
 76c:	b1 f3       	breq	.-20     	; 0x75a <__divsf3+0x12>
 76e:	95 1b       	sub	r25, r21
 770:	55 0b       	sbc	r21, r21
 772:	bb 27       	eor	r27, r27
 774:	aa 27       	eor	r26, r26
 776:	62 17       	cp	r22, r18
 778:	73 07       	cpc	r23, r19
 77a:	84 07       	cpc	r24, r20
 77c:	38 f0       	brcs	.+14     	; 0x78c <__divsf3_pse+0x26>
 77e:	9f 5f       	subi	r25, 0xFF	; 255
 780:	5f 4f       	sbci	r21, 0xFF	; 255
 782:	22 0f       	add	r18, r18
 784:	33 1f       	adc	r19, r19
 786:	44 1f       	adc	r20, r20
 788:	aa 1f       	adc	r26, r26
 78a:	a9 f3       	breq	.-22     	; 0x776 <__divsf3_pse+0x10>
 78c:	33 d0       	rcall	.+102    	; 0x7f4 <__divsf3_pse+0x8e>
 78e:	0e 2e       	mov	r0, r30
 790:	3a f0       	brmi	.+14     	; 0x7a0 <__divsf3_pse+0x3a>
 792:	e0 e8       	ldi	r30, 0x80	; 128
 794:	30 d0       	rcall	.+96     	; 0x7f6 <__divsf3_pse+0x90>
 796:	91 50       	subi	r25, 0x01	; 1
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	e6 95       	lsr	r30
 79c:	00 1c       	adc	r0, r0
 79e:	ca f7       	brpl	.-14     	; 0x792 <__divsf3_pse+0x2c>
 7a0:	29 d0       	rcall	.+82     	; 0x7f4 <__divsf3_pse+0x8e>
 7a2:	fe 2f       	mov	r31, r30
 7a4:	27 d0       	rcall	.+78     	; 0x7f4 <__divsf3_pse+0x8e>
 7a6:	66 0f       	add	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	bb 1f       	adc	r27, r27
 7ae:	26 17       	cp	r18, r22
 7b0:	37 07       	cpc	r19, r23
 7b2:	48 07       	cpc	r20, r24
 7b4:	ab 07       	cpc	r26, r27
 7b6:	b0 e8       	ldi	r27, 0x80	; 128
 7b8:	09 f0       	breq	.+2      	; 0x7bc <__divsf3_pse+0x56>
 7ba:	bb 0b       	sbc	r27, r27
 7bc:	80 2d       	mov	r24, r0
 7be:	bf 01       	movw	r22, r30
 7c0:	ff 27       	eor	r31, r31
 7c2:	93 58       	subi	r25, 0x83	; 131
 7c4:	5f 4f       	sbci	r21, 0xFF	; 255
 7c6:	2a f0       	brmi	.+10     	; 0x7d2 <__divsf3_pse+0x6c>
 7c8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ca:	51 05       	cpc	r21, r1
 7cc:	68 f0       	brcs	.+26     	; 0x7e8 <__divsf3_pse+0x82>
 7ce:	8d c0       	rjmp	.+282    	; 0x8ea <__fp_inf>
 7d0:	d7 c0       	rjmp	.+430    	; 0x980 <__fp_szero>
 7d2:	5f 3f       	cpi	r21, 0xFF	; 255
 7d4:	ec f3       	brlt	.-6      	; 0x7d0 <__divsf3_pse+0x6a>
 7d6:	98 3e       	cpi	r25, 0xE8	; 232
 7d8:	dc f3       	brlt	.-10     	; 0x7d0 <__divsf3_pse+0x6a>
 7da:	86 95       	lsr	r24
 7dc:	77 95       	ror	r23
 7de:	67 95       	ror	r22
 7e0:	b7 95       	ror	r27
 7e2:	f7 95       	ror	r31
 7e4:	9f 5f       	subi	r25, 0xFF	; 255
 7e6:	c9 f7       	brne	.-14     	; 0x7da <__divsf3_pse+0x74>
 7e8:	88 0f       	add	r24, r24
 7ea:	91 1d       	adc	r25, r1
 7ec:	96 95       	lsr	r25
 7ee:	87 95       	ror	r24
 7f0:	97 f9       	bld	r25, 7
 7f2:	08 95       	ret
 7f4:	e1 e0       	ldi	r30, 0x01	; 1
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	bb 1f       	adc	r27, r27
 7fe:	62 17       	cp	r22, r18
 800:	73 07       	cpc	r23, r19
 802:	84 07       	cpc	r24, r20
 804:	ba 07       	cpc	r27, r26
 806:	20 f0       	brcs	.+8      	; 0x810 <__divsf3_pse+0xaa>
 808:	62 1b       	sub	r22, r18
 80a:	73 0b       	sbc	r23, r19
 80c:	84 0b       	sbc	r24, r20
 80e:	ba 0b       	sbc	r27, r26
 810:	ee 1f       	adc	r30, r30
 812:	88 f7       	brcc	.-30     	; 0x7f6 <__divsf3_pse+0x90>
 814:	e0 95       	com	r30
 816:	08 95       	ret

00000818 <__fixunssfsi>:
 818:	98 d0       	rcall	.+304    	; 0x94a <__fp_splitA>
 81a:	88 f0       	brcs	.+34     	; 0x83e <__fixunssfsi+0x26>
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	90 f0       	brcs	.+36     	; 0x844 <__fixunssfsi+0x2c>
 820:	b9 2f       	mov	r27, r25
 822:	99 27       	eor	r25, r25
 824:	b7 51       	subi	r27, 0x17	; 23
 826:	a0 f0       	brcs	.+40     	; 0x850 <__fixunssfsi+0x38>
 828:	d1 f0       	breq	.+52     	; 0x85e <__fixunssfsi+0x46>
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	1a f0       	brmi	.+6      	; 0x83a <__fixunssfsi+0x22>
 834:	ba 95       	dec	r27
 836:	c9 f7       	brne	.-14     	; 0x82a <__fixunssfsi+0x12>
 838:	12 c0       	rjmp	.+36     	; 0x85e <__fixunssfsi+0x46>
 83a:	b1 30       	cpi	r27, 0x01	; 1
 83c:	81 f0       	breq	.+32     	; 0x85e <__fixunssfsi+0x46>
 83e:	9f d0       	rcall	.+318    	; 0x97e <__fp_zero>
 840:	b1 e0       	ldi	r27, 0x01	; 1
 842:	08 95       	ret
 844:	9c c0       	rjmp	.+312    	; 0x97e <__fp_zero>
 846:	67 2f       	mov	r22, r23
 848:	78 2f       	mov	r23, r24
 84a:	88 27       	eor	r24, r24
 84c:	b8 5f       	subi	r27, 0xF8	; 248
 84e:	39 f0       	breq	.+14     	; 0x85e <__fixunssfsi+0x46>
 850:	b9 3f       	cpi	r27, 0xF9	; 249
 852:	cc f3       	brlt	.-14     	; 0x846 <__fixunssfsi+0x2e>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b3 95       	inc	r27
 85c:	d9 f7       	brne	.-10     	; 0x854 <__fixunssfsi+0x3c>
 85e:	3e f4       	brtc	.+14     	; 0x86e <__fixunssfsi+0x56>
 860:	90 95       	com	r25
 862:	80 95       	com	r24
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__floatunsisf>:
 870:	e8 94       	clt
 872:	09 c0       	rjmp	.+18     	; 0x886 <__floatsisf+0x12>

00000874 <__floatsisf>:
 874:	97 fb       	bst	r25, 7
 876:	3e f4       	brtc	.+14     	; 0x886 <__floatsisf+0x12>
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	99 23       	and	r25, r25
 888:	a9 f0       	breq	.+42     	; 0x8b4 <__floatsisf+0x40>
 88a:	f9 2f       	mov	r31, r25
 88c:	96 e9       	ldi	r25, 0x96	; 150
 88e:	bb 27       	eor	r27, r27
 890:	93 95       	inc	r25
 892:	f6 95       	lsr	r31
 894:	87 95       	ror	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f1 11       	cpse	r31, r1
 89e:	f8 cf       	rjmp	.-16     	; 0x890 <__floatsisf+0x1c>
 8a0:	fa f4       	brpl	.+62     	; 0x8e0 <__floatsisf+0x6c>
 8a2:	bb 0f       	add	r27, r27
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__floatsisf+0x36>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	1b c0       	rjmp	.+54     	; 0x8e0 <__floatsisf+0x6c>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <__floatsisf+0x6c>
 8b4:	88 23       	and	r24, r24
 8b6:	11 f0       	breq	.+4      	; 0x8bc <__floatsisf+0x48>
 8b8:	96 e9       	ldi	r25, 0x96	; 150
 8ba:	11 c0       	rjmp	.+34     	; 0x8de <__floatsisf+0x6a>
 8bc:	77 23       	and	r23, r23
 8be:	21 f0       	breq	.+8      	; 0x8c8 <__floatsisf+0x54>
 8c0:	9e e8       	ldi	r25, 0x8E	; 142
 8c2:	87 2f       	mov	r24, r23
 8c4:	76 2f       	mov	r23, r22
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__floatsisf+0x5e>
 8c8:	66 23       	and	r22, r22
 8ca:	71 f0       	breq	.+28     	; 0x8e8 <__floatsisf+0x74>
 8cc:	96 e8       	ldi	r25, 0x86	; 134
 8ce:	86 2f       	mov	r24, r22
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	2a f0       	brmi	.+10     	; 0x8e0 <__floatsisf+0x6c>
 8d6:	9a 95       	dec	r25
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	da f7       	brpl	.-10     	; 0x8d6 <__floatsisf+0x62>
 8e0:	88 0f       	add	r24, r24
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <__fp_inf>:
 8ea:	97 f9       	bld	r25, 7
 8ec:	9f 67       	ori	r25, 0x7F	; 127
 8ee:	80 e8       	ldi	r24, 0x80	; 128
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	08 95       	ret

000008f6 <__fp_nan>:
 8f6:	9f ef       	ldi	r25, 0xFF	; 255
 8f8:	80 ec       	ldi	r24, 0xC0	; 192
 8fa:	08 95       	ret

000008fc <__fp_pscA>:
 8fc:	00 24       	eor	r0, r0
 8fe:	0a 94       	dec	r0
 900:	16 16       	cp	r1, r22
 902:	17 06       	cpc	r1, r23
 904:	18 06       	cpc	r1, r24
 906:	09 06       	cpc	r0, r25
 908:	08 95       	ret

0000090a <__fp_pscB>:
 90a:	00 24       	eor	r0, r0
 90c:	0a 94       	dec	r0
 90e:	12 16       	cp	r1, r18
 910:	13 06       	cpc	r1, r19
 912:	14 06       	cpc	r1, r20
 914:	05 06       	cpc	r0, r21
 916:	08 95       	ret

00000918 <__fp_round>:
 918:	09 2e       	mov	r0, r25
 91a:	03 94       	inc	r0
 91c:	00 0c       	add	r0, r0
 91e:	11 f4       	brne	.+4      	; 0x924 <__fp_round+0xc>
 920:	88 23       	and	r24, r24
 922:	52 f0       	brmi	.+20     	; 0x938 <__fp_round+0x20>
 924:	bb 0f       	add	r27, r27
 926:	40 f4       	brcc	.+16     	; 0x938 <__fp_round+0x20>
 928:	bf 2b       	or	r27, r31
 92a:	11 f4       	brne	.+4      	; 0x930 <__fp_round+0x18>
 92c:	60 ff       	sbrs	r22, 0
 92e:	04 c0       	rjmp	.+8      	; 0x938 <__fp_round+0x20>
 930:	6f 5f       	subi	r22, 0xFF	; 255
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	08 95       	ret

0000093a <__fp_split3>:
 93a:	57 fd       	sbrc	r21, 7
 93c:	90 58       	subi	r25, 0x80	; 128
 93e:	44 0f       	add	r20, r20
 940:	55 1f       	adc	r21, r21
 942:	59 f0       	breq	.+22     	; 0x95a <__fp_splitA+0x10>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	71 f0       	breq	.+28     	; 0x964 <__fp_splitA+0x1a>
 948:	47 95       	ror	r20

0000094a <__fp_splitA>:
 94a:	88 0f       	add	r24, r24
 94c:	97 fb       	bst	r25, 7
 94e:	99 1f       	adc	r25, r25
 950:	61 f0       	breq	.+24     	; 0x96a <__fp_splitA+0x20>
 952:	9f 3f       	cpi	r25, 0xFF	; 255
 954:	79 f0       	breq	.+30     	; 0x974 <__fp_splitA+0x2a>
 956:	87 95       	ror	r24
 958:	08 95       	ret
 95a:	12 16       	cp	r1, r18
 95c:	13 06       	cpc	r1, r19
 95e:	14 06       	cpc	r1, r20
 960:	55 1f       	adc	r21, r21
 962:	f2 cf       	rjmp	.-28     	; 0x948 <__fp_split3+0xe>
 964:	46 95       	lsr	r20
 966:	f1 df       	rcall	.-30     	; 0x94a <__fp_splitA>
 968:	08 c0       	rjmp	.+16     	; 0x97a <__fp_splitA+0x30>
 96a:	16 16       	cp	r1, r22
 96c:	17 06       	cpc	r1, r23
 96e:	18 06       	cpc	r1, r24
 970:	99 1f       	adc	r25, r25
 972:	f1 cf       	rjmp	.-30     	; 0x956 <__fp_splitA+0xc>
 974:	86 95       	lsr	r24
 976:	71 05       	cpc	r23, r1
 978:	61 05       	cpc	r22, r1
 97a:	08 94       	sec
 97c:	08 95       	ret

0000097e <__fp_zero>:
 97e:	e8 94       	clt

00000980 <__fp_szero>:
 980:	bb 27       	eor	r27, r27
 982:	66 27       	eor	r22, r22
 984:	77 27       	eor	r23, r23
 986:	cb 01       	movw	r24, r22
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret

0000098c <__mulsf3>:
 98c:	0b d0       	rcall	.+22     	; 0x9a4 <__mulsf3x>
 98e:	c4 cf       	rjmp	.-120    	; 0x918 <__fp_round>
 990:	b5 df       	rcall	.-150    	; 0x8fc <__fp_pscA>
 992:	28 f0       	brcs	.+10     	; 0x99e <__mulsf3+0x12>
 994:	ba df       	rcall	.-140    	; 0x90a <__fp_pscB>
 996:	18 f0       	brcs	.+6      	; 0x99e <__mulsf3+0x12>
 998:	95 23       	and	r25, r21
 99a:	09 f0       	breq	.+2      	; 0x99e <__mulsf3+0x12>
 99c:	a6 cf       	rjmp	.-180    	; 0x8ea <__fp_inf>
 99e:	ab cf       	rjmp	.-170    	; 0x8f6 <__fp_nan>
 9a0:	11 24       	eor	r1, r1
 9a2:	ee cf       	rjmp	.-36     	; 0x980 <__fp_szero>

000009a4 <__mulsf3x>:
 9a4:	ca df       	rcall	.-108    	; 0x93a <__fp_split3>
 9a6:	a0 f3       	brcs	.-24     	; 0x990 <__mulsf3+0x4>

000009a8 <__mulsf3_pse>:
 9a8:	95 9f       	mul	r25, r21
 9aa:	d1 f3       	breq	.-12     	; 0x9a0 <__mulsf3+0x14>
 9ac:	95 0f       	add	r25, r21
 9ae:	50 e0       	ldi	r21, 0x00	; 0
 9b0:	55 1f       	adc	r21, r21
 9b2:	62 9f       	mul	r22, r18
 9b4:	f0 01       	movw	r30, r0
 9b6:	72 9f       	mul	r23, r18
 9b8:	bb 27       	eor	r27, r27
 9ba:	f0 0d       	add	r31, r0
 9bc:	b1 1d       	adc	r27, r1
 9be:	63 9f       	mul	r22, r19
 9c0:	aa 27       	eor	r26, r26
 9c2:	f0 0d       	add	r31, r0
 9c4:	b1 1d       	adc	r27, r1
 9c6:	aa 1f       	adc	r26, r26
 9c8:	64 9f       	mul	r22, r20
 9ca:	66 27       	eor	r22, r22
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	66 1f       	adc	r22, r22
 9d2:	82 9f       	mul	r24, r18
 9d4:	22 27       	eor	r18, r18
 9d6:	b0 0d       	add	r27, r0
 9d8:	a1 1d       	adc	r26, r1
 9da:	62 1f       	adc	r22, r18
 9dc:	73 9f       	mul	r23, r19
 9de:	b0 0d       	add	r27, r0
 9e0:	a1 1d       	adc	r26, r1
 9e2:	62 1f       	adc	r22, r18
 9e4:	83 9f       	mul	r24, r19
 9e6:	a0 0d       	add	r26, r0
 9e8:	61 1d       	adc	r22, r1
 9ea:	22 1f       	adc	r18, r18
 9ec:	74 9f       	mul	r23, r20
 9ee:	33 27       	eor	r19, r19
 9f0:	a0 0d       	add	r26, r0
 9f2:	61 1d       	adc	r22, r1
 9f4:	23 1f       	adc	r18, r19
 9f6:	84 9f       	mul	r24, r20
 9f8:	60 0d       	add	r22, r0
 9fa:	21 1d       	adc	r18, r1
 9fc:	82 2f       	mov	r24, r18
 9fe:	76 2f       	mov	r23, r22
 a00:	6a 2f       	mov	r22, r26
 a02:	11 24       	eor	r1, r1
 a04:	9f 57       	subi	r25, 0x7F	; 127
 a06:	50 40       	sbci	r21, 0x00	; 0
 a08:	8a f0       	brmi	.+34     	; 0xa2c <__mulsf3_pse+0x84>
 a0a:	e1 f0       	breq	.+56     	; 0xa44 <__mulsf3_pse+0x9c>
 a0c:	88 23       	and	r24, r24
 a0e:	4a f0       	brmi	.+18     	; 0xa22 <__mulsf3_pse+0x7a>
 a10:	ee 0f       	add	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	bb 1f       	adc	r27, r27
 a16:	66 1f       	adc	r22, r22
 a18:	77 1f       	adc	r23, r23
 a1a:	88 1f       	adc	r24, r24
 a1c:	91 50       	subi	r25, 0x01	; 1
 a1e:	50 40       	sbci	r21, 0x00	; 0
 a20:	a9 f7       	brne	.-22     	; 0xa0c <__mulsf3_pse+0x64>
 a22:	9e 3f       	cpi	r25, 0xFE	; 254
 a24:	51 05       	cpc	r21, r1
 a26:	70 f0       	brcs	.+28     	; 0xa44 <__mulsf3_pse+0x9c>
 a28:	60 cf       	rjmp	.-320    	; 0x8ea <__fp_inf>
 a2a:	aa cf       	rjmp	.-172    	; 0x980 <__fp_szero>
 a2c:	5f 3f       	cpi	r21, 0xFF	; 255
 a2e:	ec f3       	brlt	.-6      	; 0xa2a <__mulsf3_pse+0x82>
 a30:	98 3e       	cpi	r25, 0xE8	; 232
 a32:	dc f3       	brlt	.-10     	; 0xa2a <__mulsf3_pse+0x82>
 a34:	86 95       	lsr	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f7 95       	ror	r31
 a3e:	e7 95       	ror	r30
 a40:	9f 5f       	subi	r25, 0xFF	; 255
 a42:	c1 f7       	brne	.-16     	; 0xa34 <__mulsf3_pse+0x8c>
 a44:	fe 2b       	or	r31, r30
 a46:	88 0f       	add	r24, r24
 a48:	91 1d       	adc	r25, r1
 a4a:	96 95       	lsr	r25
 a4c:	87 95       	ror	r24
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <__udivmodsi4>:
 a52:	a1 e2       	ldi	r26, 0x21	; 33
 a54:	1a 2e       	mov	r1, r26
 a56:	aa 1b       	sub	r26, r26
 a58:	bb 1b       	sub	r27, r27
 a5a:	fd 01       	movw	r30, r26
 a5c:	0d c0       	rjmp	.+26     	; 0xa78 <__udivmodsi4_ep>

00000a5e <__udivmodsi4_loop>:
 a5e:	aa 1f       	adc	r26, r26
 a60:	bb 1f       	adc	r27, r27
 a62:	ee 1f       	adc	r30, r30
 a64:	ff 1f       	adc	r31, r31
 a66:	a2 17       	cp	r26, r18
 a68:	b3 07       	cpc	r27, r19
 a6a:	e4 07       	cpc	r30, r20
 a6c:	f5 07       	cpc	r31, r21
 a6e:	20 f0       	brcs	.+8      	; 0xa78 <__udivmodsi4_ep>
 a70:	a2 1b       	sub	r26, r18
 a72:	b3 0b       	sbc	r27, r19
 a74:	e4 0b       	sbc	r30, r20
 a76:	f5 0b       	sbc	r31, r21

00000a78 <__udivmodsi4_ep>:
 a78:	66 1f       	adc	r22, r22
 a7a:	77 1f       	adc	r23, r23
 a7c:	88 1f       	adc	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	1a 94       	dec	r1
 a82:	69 f7       	brne	.-38     	; 0xa5e <__udivmodsi4_loop>
 a84:	60 95       	com	r22
 a86:	70 95       	com	r23
 a88:	80 95       	com	r24
 a8a:	90 95       	com	r25
 a8c:	9b 01       	movw	r18, r22
 a8e:	ac 01       	movw	r20, r24
 a90:	bd 01       	movw	r22, r26
 a92:	cf 01       	movw	r24, r30
 a94:	08 95       	ret

00000a96 <__umulhisi3>:
 a96:	a2 9f       	mul	r26, r18
 a98:	b0 01       	movw	r22, r0
 a9a:	b3 9f       	mul	r27, r19
 a9c:	c0 01       	movw	r24, r0
 a9e:	a3 9f       	mul	r26, r19
 aa0:	70 0d       	add	r23, r0
 aa2:	81 1d       	adc	r24, r1
 aa4:	11 24       	eor	r1, r1
 aa6:	91 1d       	adc	r25, r1
 aa8:	b2 9f       	mul	r27, r18
 aaa:	70 0d       	add	r23, r0
 aac:	81 1d       	adc	r24, r1
 aae:	11 24       	eor	r1, r1
 ab0:	91 1d       	adc	r25, r1
 ab2:	08 95       	ret

00000ab4 <__usmulhisi3>:
 ab4:	f0 df       	rcall	.-32     	; 0xa96 <__umulhisi3>

00000ab6 <__usmulhisi3_tail>:
 ab6:	b7 ff       	sbrs	r27, 7
 ab8:	08 95       	ret
 aba:	82 1b       	sub	r24, r18
 abc:	93 0b       	sbc	r25, r19
 abe:	08 95       	ret

00000ac0 <__mulshisi3>:
 ac0:	b7 ff       	sbrs	r27, 7
 ac2:	04 c0       	rjmp	.+8      	; 0xacc <__muluhisi3>

00000ac4 <__mulohisi3>:
 ac4:	03 d0       	rcall	.+6      	; 0xacc <__muluhisi3>
 ac6:	82 1b       	sub	r24, r18
 ac8:	93 0b       	sbc	r25, r19
 aca:	08 95       	ret

00000acc <__muluhisi3>:
 acc:	e4 df       	rcall	.-56     	; 0xa96 <__umulhisi3>
 ace:	a5 9f       	mul	r26, r21
 ad0:	90 0d       	add	r25, r0
 ad2:	b4 9f       	mul	r27, r20
 ad4:	90 0d       	add	r25, r0
 ad6:	a4 9f       	mul	r26, r20
 ad8:	80 0d       	add	r24, r0
 ada:	91 1d       	adc	r25, r1
 adc:	11 24       	eor	r1, r1
 ade:	08 95       	ret

00000ae0 <_exit>:
 ae0:	f8 94       	cli

00000ae2 <__stop_program>:
 ae2:	ff cf       	rjmp	.-2      	; 0xae2 <__stop_program>
