
FCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  00000a88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eaa  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8a  00000000  00000000  000019e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000668  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000636  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000384  00000000  00000000  00003446  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000037ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	d7 c0       	rjmp	.+430    	; 0x1b8 <__vector_2>
   a:	00 00       	nop
   c:	2c c1       	rjmp	.+600    	; 0x266 <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ef c0       	rjmp	.+478    	; 0x298 <__vector_46>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ab 30       	cpi	r26, 0x0B	; 11
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	08 d1       	rcall	.+528    	; 0x316 <main>
 106:	84 c4       	rjmp	.+2312   	; 0xa10 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_1>:
//}

// Usonic measurement (inside)
// gets called when the level on PD0 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT0_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	if(PIND & (1 << PD0)) {		// rising edge
 134:	48 9b       	sbis	0x09, 0	; 9
 136:	06 c0       	rjmp	.+12     	; 0x144 <__vector_1+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 138:	e1 ea       	ldi	r30, 0xA1	; 161
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	25 c0       	rjmp	.+74     	; 0x18e <__vector_1+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 144:	e1 ea       	ldi	r30, 0xA1	; 161
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 14e:	c4 ea       	ldi	r28, 0xA4	; 164
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	28 81       	ld	r18, Y
 154:	39 81       	ldd	r19, Y+1	; 0x01
 156:	a7 e5       	ldi	r26, 0x57	; 87
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	3b d4       	rcall	.+2166   	; 0x9d2 <__umulhisi3>
 15c:	27 d3       	rcall	.+1614   	; 0x7ac <__floatunsisf>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5d e3       	ldi	r21, 0x3D	; 61
 166:	b0 d3       	rcall	.+1888   	; 0x8c8 <__mulsf3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	4a ef       	ldi	r20, 0xFA	; 250
 16e:	54 e4       	ldi	r21, 0x44	; 68
 170:	89 d2       	rcall	.+1298   	; 0x684 <__divsf3>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	5f e3       	ldi	r21, 0x3F	; 63
 17a:	20 d2       	rcall	.+1088   	; 0x5bc <__addsf3>
 17c:	eb d2       	rcall	.+1494   	; 0x754 <__fixunssfsi>
		tData[0] = (dist >> 8);
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	f2 e0       	ldi	r31, 0x02	; 2
 182:	70 83       	st	Z, r23
		tData[1] = dist;
 184:	61 83       	std	Z+1, r22	; 0x01
		TCNT4 = 0;
 186:	19 82       	std	Y+1, r1	; 0x01
 188:	18 82       	st	Y, r1
		waiting = 0;
 18a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0b be       	out	0x3b, r0	; 59
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_2>:

// Usonic measurement (outside)
// gets called when the level on PD1 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT1_vect) {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	if(PIND & (1 << PD1)) {		// rising edge
 1e2:	49 9b       	sbis	0x09, 1	; 9
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <__vector_2+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 1e6:	e1 ea       	ldi	r30, 0xA1	; 161
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	80 83       	st	Z, r24
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__vector_2+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 1f2:	e1 ea       	ldi	r30, 0xA1	; 161
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 1fc:	c4 ea       	ldi	r28, 0xA4	; 164
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	28 81       	ld	r18, Y
 202:	39 81       	ldd	r19, Y+1	; 0x01
 204:	a7 e5       	ldi	r26, 0x57	; 87
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	e4 d3       	rcall	.+1992   	; 0x9d2 <__umulhisi3>
 20a:	d0 d2       	rcall	.+1440   	; 0x7ac <__floatunsisf>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e8       	ldi	r20, 0x80	; 128
 212:	5d e3       	ldi	r21, 0x3D	; 61
 214:	59 d3       	rcall	.+1714   	; 0x8c8 <__mulsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	4a ef       	ldi	r20, 0xFA	; 250
 21c:	54 e4       	ldi	r21, 0x44	; 68
 21e:	32 d2       	rcall	.+1124   	; 0x684 <__divsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	5f e3       	ldi	r21, 0x3F	; 63
 228:	c9 d1       	rcall	.+914    	; 0x5bc <__addsf3>
 22a:	94 d2       	rcall	.+1320   	; 0x754 <__fixunssfsi>
		tData[2] = (dist >> 8);
 22c:	e0 e0       	ldi	r30, 0x00	; 0
 22e:	f2 e0       	ldi	r31, 0x02	; 2
 230:	72 83       	std	Z+2, r23	; 0x02
		tData[3] = dist;
 232:	63 83       	std	Z+3, r22	; 0x03
		TCNT4 = 0;	
 234:	19 82       	std	Y+1, r1	; 0x01
 236:	18 82       	st	Y, r1
		waiting = 0;
 238:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0b be       	out	0x3b, r0	; 59
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_3>:

// !SS falling edge 
// PIN PD2 must be connected to !SS pin
// stops the LED Timer because a transmission starts
ISR(INT2_vect) {
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	0b b6       	in	r0, 0x3b	; 59
 272:	0f 92       	push	r0
 274:	8f 93       	push	r24
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	TCCR5B &= ~((1 << CS50) | (1 << CS51));		// stop LED Timer
 27a:	e1 e2       	ldi	r30, 0x21	; 33
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	80 81       	ld	r24, Z
 280:	8c 7f       	andi	r24, 0xFC	; 252
 282:	80 83       	st	Z, r24
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_46>:

// LEDs
// when ICR is reached the next 16Bit LED value is set
ISR(TIMER5_CAPT_vect) {
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
	leds <<= 1;
 2a8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2ac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2b8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	if(leds < 3) { 
 2bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2c0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2c4:	03 97       	sbiw	r24, 0x03	; 3
 2c6:	38 f4       	brcc	.+14     	; 0x2d6 <__vector_46+0x3e>
		leds = 3;
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2d0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
 2d4:	0d c0       	rjmp	.+26     	; 0x2f0 <__vector_46+0x58>
	} else if (leds == 0x8000) {
 2d6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2da:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2de:	81 15       	cp	r24, r1
 2e0:	90 48       	sbci	r25, 0x80	; 128
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <__vector_46+0x58>
		leds = 0x8001;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e8       	ldi	r25, 0x80	; 128
 2e8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2ec:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	} 
	PORTF = leds;
 2f0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2f4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2f8:	81 bb       	out	0x11, r24	; 17
	PORTK = (leds >> 8);		
 2fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2fe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 302:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
}
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <main>:


int main(void)
{
	// initialize global variables 
	waiting = 0;
 316:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	rData[0] = 0;
 31a:	e8 e0       	ldi	r30, 0x08	; 8
 31c:	f2 e0       	ldi	r31, 0x02	; 2
 31e:	10 82       	st	Z, r1
	rData[1] = 0;
 320:	11 82       	std	Z+1, r1	; 0x01
	leds = 0;
 322:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <leds+0x1>
 326:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <leds>
	
	for(uint8_t i = 0; i < 6; i++) {
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	86 30       	cpi	r24, 0x06	; 6
 32e:	38 f4       	brcc	.+14     	; 0x33e <main+0x28>
		tData[i] = 0;
 330:	e8 2f       	mov	r30, r24
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	fe 4f       	sbci	r31, 0xFE	; 254
 338:	10 82       	st	Z, r1
	waiting = 0;
	rData[0] = 0;
	rData[1] = 0;
	leds = 0;
	
	for(uint8_t i = 0; i < 6; i++) {
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	f7 cf       	rjmp	.-18     	; 0x32c <main+0x16>
		tData[i] = 0;
	}
	
	//INIT Watchdog
	//start Watchdog and set Watchdog LED (clear before entering while())
	DDRB |= (1 << WD_LED) | (1 << LED_WindMill);
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	80 69       	ori	r24, 0x90	; 144
 342:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( 1 << WD_LED);		// set LED on
 344:	85 b1       	in	r24, 0x05	; 5
 346:	80 68       	ori	r24, 0x80	; 128
 348:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
 34a:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 34c:	99 e2       	ldi	r25, 0x29	; 41
 34e:	88 e1       	ldi	r24, 0x18	; 24
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	a8 95       	wdr
 356:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
	
	//------------------------------------------------------------------------------------------------//
	//INIT Pump timer 1
	//PWM-frequency: 2kHz
	//>0% ... >40% Dutycycle
    DDRB |= (1 << PUMP_PWM) | (1 << GENERATOR_PWM);	// PWM pins as output
 360:	84 b1       	in	r24, 0x04	; 4
 362:	80 66       	ori	r24, 0x60	; 96
 364:	84 b9       	out	0x04, r24	; 4
		
	
	//INIT windmill timer 3
	//PWM frequency: 25kHz
	//>0% ... >50% Dutycycle
	DDRE |= (1 << WM_PWM_OUT);					// PWM pin as output
 366:	8d b1       	in	r24, 0x0d	; 13
 368:	88 60       	ori	r24, 0x08	; 8
 36a:	8d b9       	out	0x0d, r24	; 13
	TCCR3A |= (1 << WGM11);
 36c:	a0 e9       	ldi	r26, 0x90	; 144
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	8c 91       	ld	r24, X
 372:	82 60       	ori	r24, 0x02	; 2
 374:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM12) | (1 << WGM13);		// FastPWM mode 14
 376:	e1 e9       	ldi	r30, 0x91	; 145
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	88 61       	ori	r24, 0x18	; 24
 37e:	80 83       	st	Z, r24
	ICR3 = WM_ICR - 1;							// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 380:	8f e3       	ldi	r24, 0x3F	; 63
 382:	9f e1       	ldi	r25, 0x1F	; 31
 384:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 388:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	TCCR3A |= (1 << COM3A1);					// set OC3A (PE3) as timer 3 pwm output (windmill)
 38c:	8c 91       	ld	r24, X
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	8c 93       	st	X, r24
	OCR3A = 0;									// DutyCycle = 0%
 392:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 396:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	// 30cm max. depth of water => 60cm way of sound => ca. 2ms duration
	// 16Bit timer with prescaler 1 (16MHz clock) => after ca. 4ms Overflow => cancel meassurement and write 0 to array
	// not Timer output required, only set prescaler to start timer and configure Overflow Interrupt to end measurement. 
	// start Timer: TCCR4B |= (1 << CS40);
	// stopp Timer: TCCR4B &= ~(1 << CS40);
	TIMSK4 |= (1 << TOIE4);					// set interrupt (measurement takes too long)
 39a:	a2 e7       	ldi	r26, 0x72	; 114
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	8c 91       	ld	r24, X
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	8c 93       	st	X, r24
	TCNT4 = 0;								// set counter to 0 
 3a4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 3a8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	EICRA |= (1 << ISC00) | (1 << ISC10);					// configure INT0 on PD0 and INT1 on PD1 to any edge for Sensor 1 and 2
 3ac:	a9 e6       	ldi	r26, 0x69	; 105
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	8c 91       	ld	r24, X
 3b2:	85 60       	ori	r24, 0x05	; 5
 3b4:	8c 93       	st	X, r24
	DDRJ |= (1 << US_TRIGGER_IN) | (1 << US_TRIGGER_OUT);	// configure PJ0 and PJ1 as Trigger output pins
 3b6:	c4 e0       	ldi	r28, 0x04	; 4
 3b8:	d1 e0       	ldi	r29, 0x01	; 1
 3ba:	88 81       	ld	r24, Y
 3bc:	83 60       	ori	r24, 0x03	; 3
 3be:	88 83       	st	Y, r24
	// maxValue for 100% (e.g. 0.5s per LED)
	// PWM Frequency >200Hz
	// Both directions with outputs PF0 .. PF7 and PK0 .. PK7
	//      only plugged vice versa for other direction
	// two pins for MOSFETs to select the LED bank
	DDRF = 0xFF;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	80 bb       	out	0x10, r24	; 16
	DDRK = 0xFF;
 3c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRH |= (1 << LED_GENERATOR) | (1 << LED_PUMP);		// Pins to select LED running light (per MOSFET)
 3c8:	c1 e0       	ldi	r28, 0x01	; 1
 3ca:	d1 e0       	ldi	r29, 0x01	; 1
 3cc:	88 81       	ld	r24, Y
 3ce:	83 60       	ori	r24, 0x03	; 3
 3d0:	88 83       	st	Y, r24
	TCCR5B |= (1 << WGM52) |( 1 << WGM53);				// CTC mode 12
 3d2:	c1 e2       	ldi	r28, 0x21	; 33
 3d4:	d1 e0       	ldi	r29, 0x01	; 1
 3d6:	88 81       	ld	r24, Y
 3d8:	88 61       	ori	r24, 0x18	; 24
 3da:	88 83       	st	Y, r24
	ICR5 = LED_SLOWEST_ICR - 1;							// default value -> must be calculated
 3dc:	8f e4       	ldi	r24, 0x4F	; 79
 3de:	93 ec       	ldi	r25, 0xC3	; 195
 3e0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 3e4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
	TIMSK5 |= (1 << ICIE5);
 3e8:	c3 e7       	ldi	r28, 0x73	; 115
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
 3ec:	88 81       	ld	r24, Y
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	88 83       	st	Y, r24
	
	EICRA |= ( 1 << ISC21);				// enable INT2 on PD2 for falling edge (connect to !SS pin)
 3f2:	8c 91       	ld	r24, X
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	8c 93       	st	X, r24
	
	TCCR1B |= (1 << CS10);				// start Timer 1 (Pumps) Prescaler 1
 3f8:	a1 e8       	ldi	r26, 0x81	; 129
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	8c 91       	ld	r24, X
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS10);				// start Timer 3 (Windmill) Prescaler 1
 402:	80 81       	ld	r24, Z
 404:	81 60       	ori	r24, 0x01	; 1
 406:	80 83       	st	Z, r24
	sei();								// enable interrupts global
 408:	78 94       	sei
	
	
	DDR_SPI |= (1<<DD_MISO);			// set MISO Pin to output
 40a:	84 b1       	in	r24, 0x04	; 4
 40c:	88 60       	ori	r24, 0x08	; 8
 40e:	84 b9       	out	0x04, r24	; 4
	
	SPCR |= (1<<SPE)|(1<<SPR0);			// Enable SPI
 410:	8c b5       	in	r24, 0x2c	; 44
 412:	81 64       	ori	r24, 0x41	; 65
 414:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << WD_LED);			// clear init LED 
 416:	85 b1       	in	r24, 0x05	; 5
 418:	8f 77       	andi	r24, 0x7F	; 127
 41a:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		PORTB |= (1 << LED_WindMill);
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	85 b9       	out	0x05, r24	; 5
		wdt_reset();					// reset WDT => Counter = 0 
 422:	a8 95       	wdr
		//////////////////////////////////////////////////////////////////////////
		//                 calc pumps + LED Running Light
		//////////////////////////////////////////////////////////////////////////
			
		if(rData[0] == 0) {
 424:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 428:	81 11       	cpse	r24, r1
 42a:	0a c0       	rjmp	.+20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			OCR1A = 0;
 42c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 430:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			PORTH &= ~((1 << LED_PUMP) | (1 << LED_GENERATOR));	
 434:	e2 e0       	ldi	r30, 0x02	; 2
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	80 81       	ld	r24, Z
 43a:	8c 7f       	andi	r24, 0xFC	; 252
 43c:	80 83       	st	Z, r24
 43e:	4a c0       	rjmp	.+148    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		} else {
			if(rData[0] > 100) {	// generator runs
 440:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 444:	85 36       	cpi	r24, 0x65	; 101
 446:	28 f1       	brcs	.+74     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				PORTH |= (1 << LED_PUMP);		// enable pump leds mosfet
 448:	e2 e0       	ldi	r30, 0x02	; 2
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	80 81       	ld	r24, Z
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	80 83       	st	Z, r24
				PORTH &= ~(1 << LED_GENERATOR);	// disable generator leds mosfet
 452:	80 81       	ld	r24, Z
 454:	8e 7f       	andi	r24, 0xFE	; 254
 456:	80 83       	st	Z, r24
				//OCR1B = 0;
				//OCR1A = (uint16_t)((((uint32_t)(rData[0] - 100) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
				ICR5 = (uint16_t)((((uint32_t)(100-(rData[0] - 100)) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
 458:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 45c:	a8 ec       	ldi	r26, 0xC8	; 200
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	a8 1b       	sub	r26, r24
 462:	b1 09       	sbc	r27, r1
 464:	28 e6       	ldi	r18, 0x68	; 104
 466:	38 e4       	ldi	r19, 0x48	; 72
 468:	4f ef       	ldi	r20, 0xFF	; 255
 46a:	5f ef       	ldi	r21, 0xFF	; 255
 46c:	cb d2       	rcall	.+1430   	; 0xa04 <__mulshisi3>
 46e:	24 e6       	ldi	r18, 0x64	; 100
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	8b d2       	rcall	.+1302   	; 0x98e <__udivmodsi4>
 478:	28 54       	subi	r18, 0x48	; 72
 47a:	34 4f       	sbci	r19, 0xF4	; 244
 47c:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 480:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
				PORTB |= (1 << PB5); //run generator
 484:	85 b1       	in	r24, 0x05	; 5
 486:	80 62       	ori	r24, 0x20	; 32
 488:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB6); //stop pump
 48a:	85 b1       	in	r24, 0x05	; 5
 48c:	8f 7b       	andi	r24, 0xBF	; 191
 48e:	85 b9       	out	0x05, r24	; 5
 490:	21 c0       	rjmp	.+66     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			} else {
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
 492:	e2 e0       	ldi	r30, 0x02	; 2
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	80 81       	ld	r24, Z
 498:	8d 7f       	andi	r24, 0xFD	; 253
 49a:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
 49c:	80 81       	ld	r24, Z
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	80 83       	st	Z, r24
				//OCR1A = 0;
				//OCR1B = (uint16_t)((((uint32_t)(100 - rData[0]) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
				ICR5 = (uint16_t)((((uint32_t)(rData[0]) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
 4a2:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <rData>
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	28 e6       	ldi	r18, 0x68	; 104
 4aa:	38 e4       	ldi	r19, 0x48	; 72
 4ac:	4f ef       	ldi	r20, 0xFF	; 255
 4ae:	5f ef       	ldi	r21, 0xFF	; 255
 4b0:	9f d2       	rcall	.+1342   	; 0x9f0 <__muluhisi3>
 4b2:	24 e6       	ldi	r18, 0x64	; 100
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	69 d2       	rcall	.+1234   	; 0x98e <__udivmodsi4>
 4bc:	28 54       	subi	r18, 0x48	; 72
 4be:	34 4f       	sbci	r19, 0xF4	; 244
 4c0:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 4c4:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
				PORTB &= ~(1 << PB5); //stop generator
 4c8:	85 b1       	in	r24, 0x05	; 5
 4ca:	8f 7d       	andi	r24, 0xDF	; 223
 4cc:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PB6); //run pump
 4ce:	85 b1       	in	r24, 0x05	; 5
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	85 b9       	out	0x05, r24	; 5
		}
		
		//////////////////////////////////////////////////////////////////////////
		//                       calc Windmill - PWM
		//////////////////////////////////////////////////////////////////////////
		if(rData[1] <= 0) {
 4d4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rData+0x1>
 4d8:	81 11       	cpse	r24, r1
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			OCR3A = 0;
 4dc:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 4e0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 4e4:	11 c0       	rjmp	.+34     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
		} else {
			OCR3A =  (uint16_t)((((uint32_t)rData[1] * (uint32_t)(WM_ICR - WM_FASTEST_OCR))/100) + WM_FASTEST_OCR) - 1;
 4e6:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <rData+0x1>
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	a0 ea       	ldi	r26, 0xA0	; 160
 4ee:	bf e0       	ldi	r27, 0x0F	; 15
 4f0:	70 d2       	rcall	.+1248   	; 0x9d2 <__umulhisi3>
 4f2:	24 e6       	ldi	r18, 0x64	; 100
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	49 d2       	rcall	.+1170   	; 0x98e <__udivmodsi4>
 4fc:	21 56       	subi	r18, 0x61	; 97
 4fe:	30 4f       	sbci	r19, 0xF0	; 240
 500:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 504:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		// 3. in ISR if rising edge start Timer 4
		// 4. wait for falling edge on INT0
		// 5. in ISR if falling edge stop Timer 4
		// 6. calculate distance and set tData 0 and 1
		// 7. stop INT0 sensing and set TCNT4 = 0
		PORTJ |= (1 << US_TRIGGER_IN);
 508:	e5 e0       	ldi	r30, 0x05	; 5
 50a:	f1 e0       	ldi	r31, 0x01	; 1
 50c:	80 81       	ld	r24, Z
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 512:	8a e6       	ldi	r24, 0x6A	; 106
 514:	8a 95       	dec	r24
 516:	f1 f7       	brne	.-4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 518:	00 c0       	rjmp	.+0      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_IN);
 51a:	80 81       	ld	r24, Z
 51c:	8e 7f       	andi	r24, 0xFE	; 254
 51e:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);			// activate INT0 interrupt 
 520:	8d b3       	in	r24, 0x1d	; 29
 522:	81 60       	ori	r24, 0x01	; 1
 524:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 52c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 530:	81 11       	cpse	r24, r1
 532:	fc cf       	rjmp	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		};
		EIMSK &= ~(1 << INT0);			// deactivate INT0 interrupt
 534:	8d b3       	in	r24, 0x1d	; 29
 536:	8e 7f       	andi	r24, 0xFE	; 254
 538:	8d bb       	out	0x1d, r24	; 29
		
		PORTJ |= (1 << US_TRIGGER_OUT);
 53a:	e5 e0       	ldi	r30, 0x05	; 5
 53c:	f1 e0       	ldi	r31, 0x01	; 1
 53e:	80 81       	ld	r24, Z
 540:	82 60       	ori	r24, 0x02	; 2
 542:	80 83       	st	Z, r24
 544:	8a e6       	ldi	r24, 0x6A	; 106
 546:	8a 95       	dec	r24
 548:	f1 f7       	brne	.-4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_OUT);
 54c:	80 81       	ld	r24, Z
 54e:	8d 7f       	andi	r24, 0xFD	; 253
 550:	80 83       	st	Z, r24
		EIMSK |= (1 << INT1);			// activate INT1 interrupt 
 552:	8d b3       	in	r24, 0x1d	; 29
 554:	82 60       	ori	r24, 0x02	; 2
 556:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 55e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 562:	81 11       	cpse	r24, r1
 564:	fc cf       	rjmp	.-8      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		};
		EIMSK &= ~(1 << INT1);			// deactivate INT1 interrupt 
 566:	8d b3       	in	r24, 0x1d	; 29
 568:	8d 7f       	andi	r24, 0xFD	; 253
 56a:	8d bb       	out	0x1d, r24	; 29
		
		
		TCCR5B |= (1 << CS50) | (1 << CS51);	// start LED Timer	
 56c:	e1 e2       	ldi	r30, 0x21	; 33
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	80 81       	ld	r24, Z
 572:	83 60       	ori	r24, 0x03	; 3
 574:	80 83       	st	Z, r24
		EIMSK |= (1 << INT2);					// enable !SS interupt when !SS is activated (falling edge)
 576:	8d b3       	in	r24, 0x1d	; 29
 578:	84 60       	ori	r24, 0x04	; 4
 57a:	8d bb       	out	0x1d, r24	; 29
		PORTB &= ~(1 << LED_WindMill);			// turn out WindMill flash LED
 57c:	85 b1       	in	r24, 0x05	; 5
 57e:	8f 7e       	andi	r24, 0xEF	; 239
 580:	85 b9       	out	0x05, r24	; 5
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	86 30       	cpi	r24, 0x06	; 6
 586:	08 f0       	brcs	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 588:	49 cf       	rjmp	.-366    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					
			// Write 1st byte into register
			SPDR = tData[idx];
 58a:	28 2f       	mov	r18, r24
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	f9 01       	movw	r30, r18
 590:	e0 50       	subi	r30, 0x00	; 0
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	90 81       	ld	r25, Z
 596:	9e bd       	out	0x2e, r25	; 46
					
			// Wait for transmission
			while(!(SPSR & (1<<SPIF)));
 598:	0d b4       	in	r0, 0x2d	; 45
 59a:	07 fe       	sbrs	r0, 7
 59c:	fd cf       	rjmp	.-6      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
					
			// Because only the first 2 bytes are real data => check if its the 1st or 2nd byte
			if (idx < 2) {
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	50 f4       	brcc	.+20     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
				
				rData[idx] = SPDR;				// SPI Read register
 5a2:	9e b5       	in	r25, 0x2e	; 46
 5a4:	f9 01       	movw	r30, r18
 5a6:	e8 5f       	subi	r30, 0xF8	; 248
 5a8:	fd 4f       	sbci	r31, 0xFD	; 253
 5aa:	90 83       	st	Z, r25
				tData[idx + 4] = rData[idx];	// to send values back next time transmitting
 5ac:	90 81       	ld	r25, Z
 5ae:	f9 01       	movw	r30, r18
 5b0:	ec 5f       	subi	r30, 0xFC	; 252
 5b2:	fd 4f       	sbci	r31, 0xFD	; 253
 5b4:	90 83       	st	Z, r25
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 5b6:	8f 5f       	subi	r24, 0xFF	; 255
 5b8:	e5 cf       	rjmp	.-54     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>

000005ba <__subsf3>:
 5ba:	50 58       	subi	r21, 0x80	; 128

000005bc <__addsf3>:
 5bc:	bb 27       	eor	r27, r27
 5be:	aa 27       	eor	r26, r26
 5c0:	0e d0       	rcall	.+28     	; 0x5de <__addsf3x>
 5c2:	48 c1       	rjmp	.+656    	; 0x854 <__fp_round>
 5c4:	39 d1       	rcall	.+626    	; 0x838 <__fp_pscA>
 5c6:	30 f0       	brcs	.+12     	; 0x5d4 <__addsf3+0x18>
 5c8:	3e d1       	rcall	.+636    	; 0x846 <__fp_pscB>
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__addsf3+0x18>
 5cc:	31 f4       	brne	.+12     	; 0x5da <__addsf3+0x1e>
 5ce:	9f 3f       	cpi	r25, 0xFF	; 255
 5d0:	11 f4       	brne	.+4      	; 0x5d6 <__addsf3+0x1a>
 5d2:	1e f4       	brtc	.+6      	; 0x5da <__addsf3+0x1e>
 5d4:	2e c1       	rjmp	.+604    	; 0x832 <__fp_nan>
 5d6:	0e f4       	brtc	.+2      	; 0x5da <__addsf3+0x1e>
 5d8:	e0 95       	com	r30
 5da:	e7 fb       	bst	r30, 7
 5dc:	24 c1       	rjmp	.+584    	; 0x826 <__fp_inf>

000005de <__addsf3x>:
 5de:	e9 2f       	mov	r30, r25
 5e0:	4a d1       	rcall	.+660    	; 0x876 <__fp_split3>
 5e2:	80 f3       	brcs	.-32     	; 0x5c4 <__addsf3+0x8>
 5e4:	ba 17       	cp	r27, r26
 5e6:	62 07       	cpc	r22, r18
 5e8:	73 07       	cpc	r23, r19
 5ea:	84 07       	cpc	r24, r20
 5ec:	95 07       	cpc	r25, r21
 5ee:	18 f0       	brcs	.+6      	; 0x5f6 <__addsf3x+0x18>
 5f0:	71 f4       	brne	.+28     	; 0x60e <__addsf3x+0x30>
 5f2:	9e f5       	brtc	.+102    	; 0x65a <__addsf3x+0x7c>
 5f4:	62 c1       	rjmp	.+708    	; 0x8ba <__fp_zero>
 5f6:	0e f4       	brtc	.+2      	; 0x5fa <__addsf3x+0x1c>
 5f8:	e0 95       	com	r30
 5fa:	0b 2e       	mov	r0, r27
 5fc:	ba 2f       	mov	r27, r26
 5fe:	a0 2d       	mov	r26, r0
 600:	0b 01       	movw	r0, r22
 602:	b9 01       	movw	r22, r18
 604:	90 01       	movw	r18, r0
 606:	0c 01       	movw	r0, r24
 608:	ca 01       	movw	r24, r20
 60a:	a0 01       	movw	r20, r0
 60c:	11 24       	eor	r1, r1
 60e:	ff 27       	eor	r31, r31
 610:	59 1b       	sub	r21, r25
 612:	99 f0       	breq	.+38     	; 0x63a <__addsf3x+0x5c>
 614:	59 3f       	cpi	r21, 0xF9	; 249
 616:	50 f4       	brcc	.+20     	; 0x62c <__addsf3x+0x4e>
 618:	50 3e       	cpi	r21, 0xE0	; 224
 61a:	68 f1       	brcs	.+90     	; 0x676 <__addsf3x+0x98>
 61c:	1a 16       	cp	r1, r26
 61e:	f0 40       	sbci	r31, 0x00	; 0
 620:	a2 2f       	mov	r26, r18
 622:	23 2f       	mov	r18, r19
 624:	34 2f       	mov	r19, r20
 626:	44 27       	eor	r20, r20
 628:	58 5f       	subi	r21, 0xF8	; 248
 62a:	f3 cf       	rjmp	.-26     	; 0x612 <__addsf3x+0x34>
 62c:	46 95       	lsr	r20
 62e:	37 95       	ror	r19
 630:	27 95       	ror	r18
 632:	a7 95       	ror	r26
 634:	f0 40       	sbci	r31, 0x00	; 0
 636:	53 95       	inc	r21
 638:	c9 f7       	brne	.-14     	; 0x62c <__addsf3x+0x4e>
 63a:	7e f4       	brtc	.+30     	; 0x65a <__addsf3x+0x7c>
 63c:	1f 16       	cp	r1, r31
 63e:	ba 0b       	sbc	r27, r26
 640:	62 0b       	sbc	r22, r18
 642:	73 0b       	sbc	r23, r19
 644:	84 0b       	sbc	r24, r20
 646:	ba f0       	brmi	.+46     	; 0x676 <__addsf3x+0x98>
 648:	91 50       	subi	r25, 0x01	; 1
 64a:	a1 f0       	breq	.+40     	; 0x674 <__addsf3x+0x96>
 64c:	ff 0f       	add	r31, r31
 64e:	bb 1f       	adc	r27, r27
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	c2 f7       	brpl	.-16     	; 0x648 <__addsf3x+0x6a>
 658:	0e c0       	rjmp	.+28     	; 0x676 <__addsf3x+0x98>
 65a:	ba 0f       	add	r27, r26
 65c:	62 1f       	adc	r22, r18
 65e:	73 1f       	adc	r23, r19
 660:	84 1f       	adc	r24, r20
 662:	48 f4       	brcc	.+18     	; 0x676 <__addsf3x+0x98>
 664:	87 95       	ror	r24
 666:	77 95       	ror	r23
 668:	67 95       	ror	r22
 66a:	b7 95       	ror	r27
 66c:	f7 95       	ror	r31
 66e:	9e 3f       	cpi	r25, 0xFE	; 254
 670:	08 f0       	brcs	.+2      	; 0x674 <__addsf3x+0x96>
 672:	b3 cf       	rjmp	.-154    	; 0x5da <__addsf3+0x1e>
 674:	93 95       	inc	r25
 676:	88 0f       	add	r24, r24
 678:	08 f0       	brcs	.+2      	; 0x67c <__addsf3x+0x9e>
 67a:	99 27       	eor	r25, r25
 67c:	ee 0f       	add	r30, r30
 67e:	97 95       	ror	r25
 680:	87 95       	ror	r24
 682:	08 95       	ret

00000684 <__divsf3>:
 684:	0c d0       	rcall	.+24     	; 0x69e <__divsf3x>
 686:	e6 c0       	rjmp	.+460    	; 0x854 <__fp_round>
 688:	de d0       	rcall	.+444    	; 0x846 <__fp_pscB>
 68a:	40 f0       	brcs	.+16     	; 0x69c <__divsf3+0x18>
 68c:	d5 d0       	rcall	.+426    	; 0x838 <__fp_pscA>
 68e:	30 f0       	brcs	.+12     	; 0x69c <__divsf3+0x18>
 690:	21 f4       	brne	.+8      	; 0x69a <__divsf3+0x16>
 692:	5f 3f       	cpi	r21, 0xFF	; 255
 694:	19 f0       	breq	.+6      	; 0x69c <__divsf3+0x18>
 696:	c7 c0       	rjmp	.+398    	; 0x826 <__fp_inf>
 698:	51 11       	cpse	r21, r1
 69a:	10 c1       	rjmp	.+544    	; 0x8bc <__fp_szero>
 69c:	ca c0       	rjmp	.+404    	; 0x832 <__fp_nan>

0000069e <__divsf3x>:
 69e:	eb d0       	rcall	.+470    	; 0x876 <__fp_split3>
 6a0:	98 f3       	brcs	.-26     	; 0x688 <__divsf3+0x4>

000006a2 <__divsf3_pse>:
 6a2:	99 23       	and	r25, r25
 6a4:	c9 f3       	breq	.-14     	; 0x698 <__divsf3+0x14>
 6a6:	55 23       	and	r21, r21
 6a8:	b1 f3       	breq	.-20     	; 0x696 <__divsf3+0x12>
 6aa:	95 1b       	sub	r25, r21
 6ac:	55 0b       	sbc	r21, r21
 6ae:	bb 27       	eor	r27, r27
 6b0:	aa 27       	eor	r26, r26
 6b2:	62 17       	cp	r22, r18
 6b4:	73 07       	cpc	r23, r19
 6b6:	84 07       	cpc	r24, r20
 6b8:	38 f0       	brcs	.+14     	; 0x6c8 <__divsf3_pse+0x26>
 6ba:	9f 5f       	subi	r25, 0xFF	; 255
 6bc:	5f 4f       	sbci	r21, 0xFF	; 255
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	44 1f       	adc	r20, r20
 6c4:	aa 1f       	adc	r26, r26
 6c6:	a9 f3       	breq	.-22     	; 0x6b2 <__divsf3_pse+0x10>
 6c8:	33 d0       	rcall	.+102    	; 0x730 <__divsf3_pse+0x8e>
 6ca:	0e 2e       	mov	r0, r30
 6cc:	3a f0       	brmi	.+14     	; 0x6dc <__divsf3_pse+0x3a>
 6ce:	e0 e8       	ldi	r30, 0x80	; 128
 6d0:	30 d0       	rcall	.+96     	; 0x732 <__divsf3_pse+0x90>
 6d2:	91 50       	subi	r25, 0x01	; 1
 6d4:	50 40       	sbci	r21, 0x00	; 0
 6d6:	e6 95       	lsr	r30
 6d8:	00 1c       	adc	r0, r0
 6da:	ca f7       	brpl	.-14     	; 0x6ce <__divsf3_pse+0x2c>
 6dc:	29 d0       	rcall	.+82     	; 0x730 <__divsf3_pse+0x8e>
 6de:	fe 2f       	mov	r31, r30
 6e0:	27 d0       	rcall	.+78     	; 0x730 <__divsf3_pse+0x8e>
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	bb 1f       	adc	r27, r27
 6ea:	26 17       	cp	r18, r22
 6ec:	37 07       	cpc	r19, r23
 6ee:	48 07       	cpc	r20, r24
 6f0:	ab 07       	cpc	r26, r27
 6f2:	b0 e8       	ldi	r27, 0x80	; 128
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <__divsf3_pse+0x56>
 6f6:	bb 0b       	sbc	r27, r27
 6f8:	80 2d       	mov	r24, r0
 6fa:	bf 01       	movw	r22, r30
 6fc:	ff 27       	eor	r31, r31
 6fe:	93 58       	subi	r25, 0x83	; 131
 700:	5f 4f       	sbci	r21, 0xFF	; 255
 702:	2a f0       	brmi	.+10     	; 0x70e <__divsf3_pse+0x6c>
 704:	9e 3f       	cpi	r25, 0xFE	; 254
 706:	51 05       	cpc	r21, r1
 708:	68 f0       	brcs	.+26     	; 0x724 <__divsf3_pse+0x82>
 70a:	8d c0       	rjmp	.+282    	; 0x826 <__fp_inf>
 70c:	d7 c0       	rjmp	.+430    	; 0x8bc <__fp_szero>
 70e:	5f 3f       	cpi	r21, 0xFF	; 255
 710:	ec f3       	brlt	.-6      	; 0x70c <__divsf3_pse+0x6a>
 712:	98 3e       	cpi	r25, 0xE8	; 232
 714:	dc f3       	brlt	.-10     	; 0x70c <__divsf3_pse+0x6a>
 716:	86 95       	lsr	r24
 718:	77 95       	ror	r23
 71a:	67 95       	ror	r22
 71c:	b7 95       	ror	r27
 71e:	f7 95       	ror	r31
 720:	9f 5f       	subi	r25, 0xFF	; 255
 722:	c9 f7       	brne	.-14     	; 0x716 <__divsf3_pse+0x74>
 724:	88 0f       	add	r24, r24
 726:	91 1d       	adc	r25, r1
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret
 730:	e1 e0       	ldi	r30, 0x01	; 1
 732:	66 0f       	add	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	bb 1f       	adc	r27, r27
 73a:	62 17       	cp	r22, r18
 73c:	73 07       	cpc	r23, r19
 73e:	84 07       	cpc	r24, r20
 740:	ba 07       	cpc	r27, r26
 742:	20 f0       	brcs	.+8      	; 0x74c <__divsf3_pse+0xaa>
 744:	62 1b       	sub	r22, r18
 746:	73 0b       	sbc	r23, r19
 748:	84 0b       	sbc	r24, r20
 74a:	ba 0b       	sbc	r27, r26
 74c:	ee 1f       	adc	r30, r30
 74e:	88 f7       	brcc	.-30     	; 0x732 <__divsf3_pse+0x90>
 750:	e0 95       	com	r30
 752:	08 95       	ret

00000754 <__fixunssfsi>:
 754:	98 d0       	rcall	.+304    	; 0x886 <__fp_splitA>
 756:	88 f0       	brcs	.+34     	; 0x77a <__fixunssfsi+0x26>
 758:	9f 57       	subi	r25, 0x7F	; 127
 75a:	90 f0       	brcs	.+36     	; 0x780 <__fixunssfsi+0x2c>
 75c:	b9 2f       	mov	r27, r25
 75e:	99 27       	eor	r25, r25
 760:	b7 51       	subi	r27, 0x17	; 23
 762:	a0 f0       	brcs	.+40     	; 0x78c <__fixunssfsi+0x38>
 764:	d1 f0       	breq	.+52     	; 0x79a <__fixunssfsi+0x46>
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	1a f0       	brmi	.+6      	; 0x776 <__fixunssfsi+0x22>
 770:	ba 95       	dec	r27
 772:	c9 f7       	brne	.-14     	; 0x766 <__fixunssfsi+0x12>
 774:	12 c0       	rjmp	.+36     	; 0x79a <__fixunssfsi+0x46>
 776:	b1 30       	cpi	r27, 0x01	; 1
 778:	81 f0       	breq	.+32     	; 0x79a <__fixunssfsi+0x46>
 77a:	9f d0       	rcall	.+318    	; 0x8ba <__fp_zero>
 77c:	b1 e0       	ldi	r27, 0x01	; 1
 77e:	08 95       	ret
 780:	9c c0       	rjmp	.+312    	; 0x8ba <__fp_zero>
 782:	67 2f       	mov	r22, r23
 784:	78 2f       	mov	r23, r24
 786:	88 27       	eor	r24, r24
 788:	b8 5f       	subi	r27, 0xF8	; 248
 78a:	39 f0       	breq	.+14     	; 0x79a <__fixunssfsi+0x46>
 78c:	b9 3f       	cpi	r27, 0xF9	; 249
 78e:	cc f3       	brlt	.-14     	; 0x782 <__fixunssfsi+0x2e>
 790:	86 95       	lsr	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	b3 95       	inc	r27
 798:	d9 f7       	brne	.-10     	; 0x790 <__fixunssfsi+0x3c>
 79a:	3e f4       	brtc	.+14     	; 0x7aa <__fixunssfsi+0x56>
 79c:	90 95       	com	r25
 79e:	80 95       	com	r24
 7a0:	70 95       	com	r23
 7a2:	61 95       	neg	r22
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <__floatunsisf>:
 7ac:	e8 94       	clt
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <__floatsisf+0x12>

000007b0 <__floatsisf>:
 7b0:	97 fb       	bst	r25, 7
 7b2:	3e f4       	brtc	.+14     	; 0x7c2 <__floatsisf+0x12>
 7b4:	90 95       	com	r25
 7b6:	80 95       	com	r24
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	99 23       	and	r25, r25
 7c4:	a9 f0       	breq	.+42     	; 0x7f0 <__floatsisf+0x40>
 7c6:	f9 2f       	mov	r31, r25
 7c8:	96 e9       	ldi	r25, 0x96	; 150
 7ca:	bb 27       	eor	r27, r27
 7cc:	93 95       	inc	r25
 7ce:	f6 95       	lsr	r31
 7d0:	87 95       	ror	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f1 11       	cpse	r31, r1
 7da:	f8 cf       	rjmp	.-16     	; 0x7cc <__floatsisf+0x1c>
 7dc:	fa f4       	brpl	.+62     	; 0x81c <__floatsisf+0x6c>
 7de:	bb 0f       	add	r27, r27
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <__floatsisf+0x36>
 7e2:	60 ff       	sbrs	r22, 0
 7e4:	1b c0       	rjmp	.+54     	; 0x81c <__floatsisf+0x6c>
 7e6:	6f 5f       	subi	r22, 0xFF	; 255
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	16 c0       	rjmp	.+44     	; 0x81c <__floatsisf+0x6c>
 7f0:	88 23       	and	r24, r24
 7f2:	11 f0       	breq	.+4      	; 0x7f8 <__floatsisf+0x48>
 7f4:	96 e9       	ldi	r25, 0x96	; 150
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <__floatsisf+0x6a>
 7f8:	77 23       	and	r23, r23
 7fa:	21 f0       	breq	.+8      	; 0x804 <__floatsisf+0x54>
 7fc:	9e e8       	ldi	r25, 0x8E	; 142
 7fe:	87 2f       	mov	r24, r23
 800:	76 2f       	mov	r23, r22
 802:	05 c0       	rjmp	.+10     	; 0x80e <__floatsisf+0x5e>
 804:	66 23       	and	r22, r22
 806:	71 f0       	breq	.+28     	; 0x824 <__floatsisf+0x74>
 808:	96 e8       	ldi	r25, 0x86	; 134
 80a:	86 2f       	mov	r24, r22
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	2a f0       	brmi	.+10     	; 0x81c <__floatsisf+0x6c>
 812:	9a 95       	dec	r25
 814:	66 0f       	add	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	da f7       	brpl	.-10     	; 0x812 <__floatsisf+0x62>
 81c:	88 0f       	add	r24, r24
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret

00000826 <__fp_inf>:
 826:	97 f9       	bld	r25, 7
 828:	9f 67       	ori	r25, 0x7F	; 127
 82a:	80 e8       	ldi	r24, 0x80	; 128
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	08 95       	ret

00000832 <__fp_nan>:
 832:	9f ef       	ldi	r25, 0xFF	; 255
 834:	80 ec       	ldi	r24, 0xC0	; 192
 836:	08 95       	ret

00000838 <__fp_pscA>:
 838:	00 24       	eor	r0, r0
 83a:	0a 94       	dec	r0
 83c:	16 16       	cp	r1, r22
 83e:	17 06       	cpc	r1, r23
 840:	18 06       	cpc	r1, r24
 842:	09 06       	cpc	r0, r25
 844:	08 95       	ret

00000846 <__fp_pscB>:
 846:	00 24       	eor	r0, r0
 848:	0a 94       	dec	r0
 84a:	12 16       	cp	r1, r18
 84c:	13 06       	cpc	r1, r19
 84e:	14 06       	cpc	r1, r20
 850:	05 06       	cpc	r0, r21
 852:	08 95       	ret

00000854 <__fp_round>:
 854:	09 2e       	mov	r0, r25
 856:	03 94       	inc	r0
 858:	00 0c       	add	r0, r0
 85a:	11 f4       	brne	.+4      	; 0x860 <__fp_round+0xc>
 85c:	88 23       	and	r24, r24
 85e:	52 f0       	brmi	.+20     	; 0x874 <__fp_round+0x20>
 860:	bb 0f       	add	r27, r27
 862:	40 f4       	brcc	.+16     	; 0x874 <__fp_round+0x20>
 864:	bf 2b       	or	r27, r31
 866:	11 f4       	brne	.+4      	; 0x86c <__fp_round+0x18>
 868:	60 ff       	sbrs	r22, 0
 86a:	04 c0       	rjmp	.+8      	; 0x874 <__fp_round+0x20>
 86c:	6f 5f       	subi	r22, 0xFF	; 255
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	08 95       	ret

00000876 <__fp_split3>:
 876:	57 fd       	sbrc	r21, 7
 878:	90 58       	subi	r25, 0x80	; 128
 87a:	44 0f       	add	r20, r20
 87c:	55 1f       	adc	r21, r21
 87e:	59 f0       	breq	.+22     	; 0x896 <__fp_splitA+0x10>
 880:	5f 3f       	cpi	r21, 0xFF	; 255
 882:	71 f0       	breq	.+28     	; 0x8a0 <__fp_splitA+0x1a>
 884:	47 95       	ror	r20

00000886 <__fp_splitA>:
 886:	88 0f       	add	r24, r24
 888:	97 fb       	bst	r25, 7
 88a:	99 1f       	adc	r25, r25
 88c:	61 f0       	breq	.+24     	; 0x8a6 <__fp_splitA+0x20>
 88e:	9f 3f       	cpi	r25, 0xFF	; 255
 890:	79 f0       	breq	.+30     	; 0x8b0 <__fp_splitA+0x2a>
 892:	87 95       	ror	r24
 894:	08 95       	ret
 896:	12 16       	cp	r1, r18
 898:	13 06       	cpc	r1, r19
 89a:	14 06       	cpc	r1, r20
 89c:	55 1f       	adc	r21, r21
 89e:	f2 cf       	rjmp	.-28     	; 0x884 <__fp_split3+0xe>
 8a0:	46 95       	lsr	r20
 8a2:	f1 df       	rcall	.-30     	; 0x886 <__fp_splitA>
 8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <__fp_splitA+0x30>
 8a6:	16 16       	cp	r1, r22
 8a8:	17 06       	cpc	r1, r23
 8aa:	18 06       	cpc	r1, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	f1 cf       	rjmp	.-30     	; 0x892 <__fp_splitA+0xc>
 8b0:	86 95       	lsr	r24
 8b2:	71 05       	cpc	r23, r1
 8b4:	61 05       	cpc	r22, r1
 8b6:	08 94       	sec
 8b8:	08 95       	ret

000008ba <__fp_zero>:
 8ba:	e8 94       	clt

000008bc <__fp_szero>:
 8bc:	bb 27       	eor	r27, r27
 8be:	66 27       	eor	r22, r22
 8c0:	77 27       	eor	r23, r23
 8c2:	cb 01       	movw	r24, r22
 8c4:	97 f9       	bld	r25, 7
 8c6:	08 95       	ret

000008c8 <__mulsf3>:
 8c8:	0b d0       	rcall	.+22     	; 0x8e0 <__mulsf3x>
 8ca:	c4 cf       	rjmp	.-120    	; 0x854 <__fp_round>
 8cc:	b5 df       	rcall	.-150    	; 0x838 <__fp_pscA>
 8ce:	28 f0       	brcs	.+10     	; 0x8da <__mulsf3+0x12>
 8d0:	ba df       	rcall	.-140    	; 0x846 <__fp_pscB>
 8d2:	18 f0       	brcs	.+6      	; 0x8da <__mulsf3+0x12>
 8d4:	95 23       	and	r25, r21
 8d6:	09 f0       	breq	.+2      	; 0x8da <__mulsf3+0x12>
 8d8:	a6 cf       	rjmp	.-180    	; 0x826 <__fp_inf>
 8da:	ab cf       	rjmp	.-170    	; 0x832 <__fp_nan>
 8dc:	11 24       	eor	r1, r1
 8de:	ee cf       	rjmp	.-36     	; 0x8bc <__fp_szero>

000008e0 <__mulsf3x>:
 8e0:	ca df       	rcall	.-108    	; 0x876 <__fp_split3>
 8e2:	a0 f3       	brcs	.-24     	; 0x8cc <__mulsf3+0x4>

000008e4 <__mulsf3_pse>:
 8e4:	95 9f       	mul	r25, r21
 8e6:	d1 f3       	breq	.-12     	; 0x8dc <__mulsf3+0x14>
 8e8:	95 0f       	add	r25, r21
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	55 1f       	adc	r21, r21
 8ee:	62 9f       	mul	r22, r18
 8f0:	f0 01       	movw	r30, r0
 8f2:	72 9f       	mul	r23, r18
 8f4:	bb 27       	eor	r27, r27
 8f6:	f0 0d       	add	r31, r0
 8f8:	b1 1d       	adc	r27, r1
 8fa:	63 9f       	mul	r22, r19
 8fc:	aa 27       	eor	r26, r26
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	aa 1f       	adc	r26, r26
 904:	64 9f       	mul	r22, r20
 906:	66 27       	eor	r22, r22
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	66 1f       	adc	r22, r22
 90e:	82 9f       	mul	r24, r18
 910:	22 27       	eor	r18, r18
 912:	b0 0d       	add	r27, r0
 914:	a1 1d       	adc	r26, r1
 916:	62 1f       	adc	r22, r18
 918:	73 9f       	mul	r23, r19
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	83 9f       	mul	r24, r19
 922:	a0 0d       	add	r26, r0
 924:	61 1d       	adc	r22, r1
 926:	22 1f       	adc	r18, r18
 928:	74 9f       	mul	r23, r20
 92a:	33 27       	eor	r19, r19
 92c:	a0 0d       	add	r26, r0
 92e:	61 1d       	adc	r22, r1
 930:	23 1f       	adc	r18, r19
 932:	84 9f       	mul	r24, r20
 934:	60 0d       	add	r22, r0
 936:	21 1d       	adc	r18, r1
 938:	82 2f       	mov	r24, r18
 93a:	76 2f       	mov	r23, r22
 93c:	6a 2f       	mov	r22, r26
 93e:	11 24       	eor	r1, r1
 940:	9f 57       	subi	r25, 0x7F	; 127
 942:	50 40       	sbci	r21, 0x00	; 0
 944:	8a f0       	brmi	.+34     	; 0x968 <__mulsf3_pse+0x84>
 946:	e1 f0       	breq	.+56     	; 0x980 <__mulsf3_pse+0x9c>
 948:	88 23       	and	r24, r24
 94a:	4a f0       	brmi	.+18     	; 0x95e <__mulsf3_pse+0x7a>
 94c:	ee 0f       	add	r30, r30
 94e:	ff 1f       	adc	r31, r31
 950:	bb 1f       	adc	r27, r27
 952:	66 1f       	adc	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	91 50       	subi	r25, 0x01	; 1
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	a9 f7       	brne	.-22     	; 0x948 <__mulsf3_pse+0x64>
 95e:	9e 3f       	cpi	r25, 0xFE	; 254
 960:	51 05       	cpc	r21, r1
 962:	70 f0       	brcs	.+28     	; 0x980 <__mulsf3_pse+0x9c>
 964:	60 cf       	rjmp	.-320    	; 0x826 <__fp_inf>
 966:	aa cf       	rjmp	.-172    	; 0x8bc <__fp_szero>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	ec f3       	brlt	.-6      	; 0x966 <__mulsf3_pse+0x82>
 96c:	98 3e       	cpi	r25, 0xE8	; 232
 96e:	dc f3       	brlt	.-10     	; 0x966 <__mulsf3_pse+0x82>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	f7 95       	ror	r31
 97a:	e7 95       	ror	r30
 97c:	9f 5f       	subi	r25, 0xFF	; 255
 97e:	c1 f7       	brne	.-16     	; 0x970 <__mulsf3_pse+0x8c>
 980:	fe 2b       	or	r31, r30
 982:	88 0f       	add	r24, r24
 984:	91 1d       	adc	r25, r1
 986:	96 95       	lsr	r25
 988:	87 95       	ror	r24
 98a:	97 f9       	bld	r25, 7
 98c:	08 95       	ret

0000098e <__udivmodsi4>:
 98e:	a1 e2       	ldi	r26, 0x21	; 33
 990:	1a 2e       	mov	r1, r26
 992:	aa 1b       	sub	r26, r26
 994:	bb 1b       	sub	r27, r27
 996:	fd 01       	movw	r30, r26
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <__udivmodsi4_ep>

0000099a <__udivmodsi4_loop>:
 99a:	aa 1f       	adc	r26, r26
 99c:	bb 1f       	adc	r27, r27
 99e:	ee 1f       	adc	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	a2 17       	cp	r26, r18
 9a4:	b3 07       	cpc	r27, r19
 9a6:	e4 07       	cpc	r30, r20
 9a8:	f5 07       	cpc	r31, r21
 9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__udivmodsi4_ep>
 9ac:	a2 1b       	sub	r26, r18
 9ae:	b3 0b       	sbc	r27, r19
 9b0:	e4 0b       	sbc	r30, r20
 9b2:	f5 0b       	sbc	r31, r21

000009b4 <__udivmodsi4_ep>:
 9b4:	66 1f       	adc	r22, r22
 9b6:	77 1f       	adc	r23, r23
 9b8:	88 1f       	adc	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	1a 94       	dec	r1
 9be:	69 f7       	brne	.-38     	; 0x99a <__udivmodsi4_loop>
 9c0:	60 95       	com	r22
 9c2:	70 95       	com	r23
 9c4:	80 95       	com	r24
 9c6:	90 95       	com	r25
 9c8:	9b 01       	movw	r18, r22
 9ca:	ac 01       	movw	r20, r24
 9cc:	bd 01       	movw	r22, r26
 9ce:	cf 01       	movw	r24, r30
 9d0:	08 95       	ret

000009d2 <__umulhisi3>:
 9d2:	a2 9f       	mul	r26, r18
 9d4:	b0 01       	movw	r22, r0
 9d6:	b3 9f       	mul	r27, r19
 9d8:	c0 01       	movw	r24, r0
 9da:	a3 9f       	mul	r26, r19
 9dc:	70 0d       	add	r23, r0
 9de:	81 1d       	adc	r24, r1
 9e0:	11 24       	eor	r1, r1
 9e2:	91 1d       	adc	r25, r1
 9e4:	b2 9f       	mul	r27, r18
 9e6:	70 0d       	add	r23, r0
 9e8:	81 1d       	adc	r24, r1
 9ea:	11 24       	eor	r1, r1
 9ec:	91 1d       	adc	r25, r1
 9ee:	08 95       	ret

000009f0 <__muluhisi3>:
 9f0:	f0 df       	rcall	.-32     	; 0x9d2 <__umulhisi3>
 9f2:	a5 9f       	mul	r26, r21
 9f4:	90 0d       	add	r25, r0
 9f6:	b4 9f       	mul	r27, r20
 9f8:	90 0d       	add	r25, r0
 9fa:	a4 9f       	mul	r26, r20
 9fc:	80 0d       	add	r24, r0
 9fe:	91 1d       	adc	r25, r1
 a00:	11 24       	eor	r1, r1
 a02:	08 95       	ret

00000a04 <__mulshisi3>:
 a04:	b7 ff       	sbrs	r27, 7
 a06:	f4 cf       	rjmp	.-24     	; 0x9f0 <__muluhisi3>

00000a08 <__mulohisi3>:
 a08:	f3 df       	rcall	.-26     	; 0x9f0 <__muluhisi3>
 a0a:	82 1b       	sub	r24, r18
 a0c:	93 0b       	sbc	r25, r19
 a0e:	08 95       	ret

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>
