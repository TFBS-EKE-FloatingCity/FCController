
FCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a72  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  00000ae6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecd  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7f  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069b  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f1  00000000  00000000  00003525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003916  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	a1 c0       	rjmp	.+322    	; 0x148 <__vector_1>
   6:	00 00       	nop
   8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__vector_2>
   a:	00 00       	nop
   c:	4b c1       	rjmp	.+662    	; 0x2a4 <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2a c0       	rjmp	.+84     	; 0x10a <__vector_45>
  b6:	00 00       	nop
  b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__vector_46>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ab 30       	cpi	r26, 0x0B	; 11
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	27 d1       	rcall	.+590    	; 0x354 <main>
 106:	b3 c4       	rjmp	.+2406   	; 0xa6e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_45>:

#include<avr/interrupt.h>
#include "../general.h"

// stop Usonic measurement for it took too long
ISR(TIMER4_OVF_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	8f 93       	push	r24
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	TCCR4B &= ~(1 << CS40);		// stop timer
 11e:	e1 ea       	ldi	r30, 0xA1	; 161
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24
	TCNT4 = 0;					// reset timer value
 128:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 12c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	waiting = 0;
 130:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0b be       	out	0x3b, r0	; 59
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_1>:

// Usonic measurement (inside)
// gets called when the level on PD0 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT0_vect) {
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0b b6       	in	r0, 0x3b	; 59
 154:	0f 92       	push	r0
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(PIND & (1 << PD0)) {		// rising edge
 172:	48 9b       	sbis	0x09, 0	; 9
 174:	06 c0       	rjmp	.+12     	; 0x182 <__vector_1+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 176:	e1 ea       	ldi	r30, 0xA1	; 161
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 83       	st	Z, r24
 180:	25 c0       	rjmp	.+74     	; 0x1cc <__vector_1+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 182:	e1 ea       	ldi	r30, 0xA1	; 161
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 18c:	c4 ea       	ldi	r28, 0xA4	; 164
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	28 81       	ld	r18, Y
 192:	39 81       	ldd	r19, Y+1	; 0x01
 194:	a7 e5       	ldi	r26, 0x57	; 87
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	45 d4       	rcall	.+2186   	; 0xa24 <__umulhisi3>
 19a:	31 d3       	rcall	.+1634   	; 0x7fe <__floatunsisf>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e8       	ldi	r20, 0x80	; 128
 1a2:	5d e3       	ldi	r21, 0x3D	; 61
 1a4:	ba d3       	rcall	.+1908   	; 0x91a <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	4a ef       	ldi	r20, 0xFA	; 250
 1ac:	54 e4       	ldi	r21, 0x44	; 68
 1ae:	93 d2       	rcall	.+1318   	; 0x6d6 <__divsf3>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	5f e3       	ldi	r21, 0x3F	; 63
 1b8:	2a d2       	rcall	.+1108   	; 0x60e <__addsf3>
 1ba:	f5 d2       	rcall	.+1514   	; 0x7a6 <__fixunssfsi>
		tData[0] = (dist >> 8);
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	70 83       	st	Z, r23
		tData[1] = dist;
 1c2:	61 83       	std	Z+1, r22	; 0x01
		TCNT4 = 0;
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	18 82       	st	Y, r1
		waiting = 0;
 1c8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_2>:

// Usonic measurement (outside)
// gets called when the level on PD1 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT1_vect) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	0b b6       	in	r0, 0x3b	; 59
 202:	0f 92       	push	r0
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if(PIND & (1 << PD1)) {		// rising edge
 220:	49 9b       	sbis	0x09, 1	; 9
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_2+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 224:	e1 ea       	ldi	r30, 0xA1	; 161
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	23 c0       	rjmp	.+70     	; 0x276 <__vector_2+0x80>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 230:	e1 ea       	ldi	r30, 0xA1	; 161
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 23a:	c4 ea       	ldi	r28, 0xA4	; 164
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	28 81       	ld	r18, Y
 240:	39 81       	ldd	r19, Y+1	; 0x01
 242:	a7 e5       	ldi	r26, 0x57	; 87
 244:	b1 e0       	ldi	r27, 0x01	; 1
 246:	ee d3       	rcall	.+2012   	; 0xa24 <__umulhisi3>
 248:	da d2       	rcall	.+1460   	; 0x7fe <__floatunsisf>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5d e3       	ldi	r21, 0x3D	; 61
 252:	63 d3       	rcall	.+1734   	; 0x91a <__mulsf3>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a ef       	ldi	r20, 0xFA	; 250
 25a:	54 e4       	ldi	r21, 0x44	; 68
 25c:	3c d2       	rcall	.+1144   	; 0x6d6 <__divsf3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	5f e3       	ldi	r21, 0x3F	; 63
 266:	d3 d1       	rcall	.+934    	; 0x60e <__addsf3>
 268:	9e d2       	rcall	.+1340   	; 0x7a6 <__fixunssfsi>
		tData[2] = (dist >> 8);
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	72 83       	std	Z+2, r23	; 0x02
		tData[3] = dist;
 270:	63 83       	std	Z+3, r22	; 0x03
		TCNT4 = 0;
 272:	19 82       	std	Y+1, r1	; 0x01
 274:	18 82       	st	Y, r1
	}
	waiting = 0;
 276:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0b be       	out	0x3b, r0	; 59
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_3>:

// !SS falling edge 
// PIN PD2 must be connected to !SS pin
// stops the LED Timer because a transmission starts
ISR(INT2_vect) {
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	0f 92       	push	r0
 2b2:	8f 93       	push	r24
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	TCCR5B &= ~((1 << CS50) | (1 << CS51));		// stop LED Timer
 2b8:	e1 e2       	ldi	r30, 0x21	; 33
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	80 81       	ld	r24, Z
 2be:	8c 7f       	andi	r24, 0xFC	; 252
 2c0:	80 83       	st	Z, r24
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	8f 91       	pop	r24
 2c8:	0f 90       	pop	r0
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_46>:

// LEDs
// when ICR is reached the next 16Bit LED value is set
ISR(TIMER5_CAPT_vect) {
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
	leds <<= 1;
 2e6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2ea:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2f6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	if(leds < 3) { 
 2fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2fe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 302:	03 97       	sbiw	r24, 0x03	; 3
 304:	38 f4       	brcc	.+14     	; 0x314 <__vector_46+0x3e>
		leds = 3;
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 30e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
 312:	0d c0       	rjmp	.+26     	; 0x32e <__vector_46+0x58>
	} else if (leds == 0x8000) {
 314:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 318:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 31c:	81 15       	cp	r24, r1
 31e:	90 48       	sbci	r25, 0x80	; 128
 320:	31 f4       	brne	.+12     	; 0x32e <__vector_46+0x58>
		leds = 0x8001;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e8       	ldi	r25, 0x80	; 128
 326:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 32a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	} 
	PORTF = leds;
 32e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 332:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 336:	81 bb       	out	0x11, r24	; 17
	PORTK = (leds >> 8);		
 338:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 33c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 340:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
}
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <main>:

int main(void)
{
	//INIT Watchdog
	//start Watchdog and set Watchdog LED (clear before entering while())
	DDRB |= (1 << WD_LED) | (1 << LED_WindMill);
 354:	84 b1       	in	r24, 0x04	; 4
 356:	80 69       	ori	r24, 0x90	; 144
 358:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( 1 << WD_LED);		// set LED on
 35a:	85 b1       	in	r24, 0x05	; 5
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
 360:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 362:	99 e2       	ldi	r25, 0x29	; 41
 364:	88 e1       	ldi	r24, 0x18	; 24
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	a8 95       	wdr
 36c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 370:	0f be       	out	0x3f, r0	; 63
 372:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
	wdt_enable(WDTO_8S);			// start WDT TOF=8s
	
	//INIT Pump timer 1
	//PWM-frequency: 2kHz
	//>0% ... >40% Dutycycle
	DDRB |= (1 << PUMP_PWM) | (1 << GENERATOR_PWM);	// PWM pins as output
 376:	84 b1       	in	r24, 0x04	; 4
 378:	80 66       	ori	r24, 0x60	; 96
 37a:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11);
 37c:	e0 e8       	ldi	r30, 0x80	; 128
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	82 60       	ori	r24, 0x02	; 2
 384:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) |( 1 << WGM13);			// FastPWM mode 14
 386:	a1 e8       	ldi	r26, 0x81	; 129
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	8c 91       	ld	r24, X
 38c:	88 61       	ori	r24, 0x18	; 24
 38e:	8c 93       	st	X, r24
	ICR1 = PUMP_ICR -1;								// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 390:	2f e3       	ldi	r18, 0x3F	; 63
 392:	3f e1       	ldi	r19, 0x1F	; 31
 394:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 398:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
	OCR1A = 0;										// DutyCyle = 0%
 39c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3a0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;										// DutyCycle = 0%
 3a4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 3a8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		
	
	//INIT windmill timer 3
	//PWM frequency: 25kHz
	//>0% ... >50% Dutycycle
	DDRE |= (1 << WM_PWM_OUT);					// PWM pin as output
 3ac:	8d b1       	in	r24, 0x0d	; 13
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	8d b9       	out	0x0d, r24	; 13
	TCCR3A |= (1 << WGM11);
 3b2:	e0 e9       	ldi	r30, 0x90	; 144
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM12) | (1 << WGM13);		// FastPWM mode 14
 3bc:	41 e9       	ldi	r20, 0x91	; 145
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	fa 01       	movw	r30, r20
 3c2:	80 81       	ld	r24, Z
 3c4:	88 61       	ori	r24, 0x18	; 24
 3c6:	80 83       	st	Z, r24
	ICR3 = WM_ICR - 1;							// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 3c8:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 3cc:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	OCR3A = 0;									// DutyCycle = 0%
 3d0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 3d4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	// 30cm max. depth of water => 60cm way of sound => ca. 2ms duration
	// 16Bit timer with prescaler 1 (16MHz clock) => after ca. 4ms Overflow => cancel meassurement and write 0 to array
	// not Timer output required, only set prescaler to start timer and configure Overflow Interrupt to end measurement. 
	// start Timer: TCCR4B |= (1 << CS40);
	// stopp Timer: TCCR4B &= ~(1 << CS40);
	TIMSK4 |= (1 << TOIE4);					// set interrupt (measurement takes too long)
 3d8:	c2 e7       	ldi	r28, 0x72	; 114
 3da:	d0 e0       	ldi	r29, 0x00	; 0
 3dc:	88 81       	ld	r24, Y
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	88 83       	st	Y, r24
	TCNT4 = 0;								// set counter to 0 
 3e2:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 3e6:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	EICRA |= (1 << ISC00) | (1 << ISC10);					// configure INT0 on PD0 and INT1 on PD1 to any edge for Sensor 1 and 2
 3ea:	c9 e6       	ldi	r28, 0x69	; 105
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	88 81       	ld	r24, Y
 3f0:	85 60       	ori	r24, 0x05	; 5
 3f2:	88 83       	st	Y, r24
	DDRJ |= (1 << US_TRIGGER_IN) | (1 << US_TRIGGER_OUT);	// configure PJ2 and PJ3 as Trigger output pins
 3f4:	24 e0       	ldi	r18, 0x04	; 4
 3f6:	31 e0       	ldi	r19, 0x01	; 1
 3f8:	f9 01       	movw	r30, r18
 3fa:	80 81       	ld	r24, Z
 3fc:	83 60       	ori	r24, 0x03	; 3
 3fe:	80 83       	st	Z, r24
	// maxValue for 100% (e.g. 0.5s per LED)
	// PWM Frequency >200Hz
	// Both directions with outputs PF0 .. PF7 and PK0 .. PK7
	//      only plugged vice versa for other direction
	// two pins for MOSFETs to select the LED bank
	DDRF = 0xFF;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	80 bb       	out	0x10, r24	; 16
	DDRK = 0xFF;
 404:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRH |= (1 << LED_GENERATOR) | (1 << LED_PUMP);		// Pins to select LED running light (per MOSFET)
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	31 e0       	ldi	r19, 0x01	; 1
 40c:	f9 01       	movw	r30, r18
 40e:	80 81       	ld	r24, Z
 410:	83 60       	ori	r24, 0x03	; 3
 412:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM52) |( 1 << WGM53);				// CTC mode 12
 414:	21 e2       	ldi	r18, 0x21	; 33
 416:	31 e0       	ldi	r19, 0x01	; 1
 418:	f9 01       	movw	r30, r18
 41a:	80 81       	ld	r24, Z
 41c:	88 61       	ori	r24, 0x18	; 24
 41e:	80 83       	st	Z, r24
	ICR5 = LED_SLOWEST_OCR - 1;							// default value -> must be calculated
 420:	8f e4       	ldi	r24, 0x4F	; 79
 422:	93 ec       	ldi	r25, 0xC3	; 195
 424:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 428:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
	TIMSK5 |= (1 << ICIE5);
 42c:	23 e7       	ldi	r18, 0x73	; 115
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	80 81       	ld	r24, Z
 434:	80 62       	ori	r24, 0x20	; 32
 436:	80 83       	st	Z, r24

	
	EICRA |= ( 1 << ISC21);							// enable INT2 on PD2 for falling edge (connect to !SS pin)
 438:	88 81       	ld	r24, Y
 43a:	80 62       	ori	r24, 0x20	; 32
 43c:	88 83       	st	Y, r24
	
	TCCR1B |= (1 << CS10);				// start Timer 1 (Pumps) 
 43e:	8c 91       	ld	r24, X
 440:	81 60       	ori	r24, 0x01	; 1
 442:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS10);				// start Timer 3 (Windmill) 
 444:	fa 01       	movw	r30, r20
 446:	80 81       	ld	r24, Z
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	80 83       	st	Z, r24
	sei();
 44c:	78 94       	sei
	
	
	
	
	DDR_SPI |= (1<<DD_MISO);
 44e:	84 b1       	in	r24, 0x04	; 4
 450:	88 60       	ori	r24, 0x08	; 8
 452:	84 b9       	out	0x04, r24	; 4
	// Enable SPI
	SPCR |= (1<<SPE)|(1<<SPR0);
 454:	8c b5       	in	r24, 0x2c	; 44
 456:	81 64       	ori	r24, 0x41	; 65
 458:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << WD_LED);			// clear init LED 
 45a:	85 b1       	in	r24, 0x05	; 5
 45c:	8f 77       	andi	r24, 0x7F	; 127
 45e:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		PORTB |= (1 << LED_WindMill);
 460:	85 b1       	in	r24, 0x05	; 5
 462:	80 61       	ori	r24, 0x10	; 16
 464:	85 b9       	out	0x05, r24	; 5
		wdt_reset();					// reset WDT => Counter = 0 
 466:	a8 95       	wdr
		//////////////////////////////////////////////////////////////////////////
		//                 calc pumps + LED Running Light
		//////////////////////////////////////////////////////////////////////////
		uint8_t absData = 0;
		if(rData[0] < 0) absData = rData[0] * (-1);
 468:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 46c:	88 23       	and	r24, r24
 46e:	24 f4       	brge	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 470:	c0 90 08 02 	lds	r12, 0x0208	; 0x800208 <rData>
 474:	c1 94       	neg	r12
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			else absData = rData[0];
 478:	c0 90 08 02 	lds	r12, 0x0208	; 0x800208 <rData>
		if(rData[0] == 0) {
 47c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 480:	81 11       	cpse	r24, r1
 482:	08 c0       	rjmp	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			OCR1A = 0;
 484:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 488:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			PORTB &= ~((1 << PUMP_PWM) | (1 << GENERATOR_PWM));	
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	8f 79       	andi	r24, 0x9F	; 159
 490:	85 b9       	out	0x05, r24	; 5
 492:	37 c0       	rjmp	.+110    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		} else {
			if(rData[0] > 0) {	// generator runs
 494:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 498:	18 16       	cp	r1, r24
 49a:	3c f4       	brge	.+14     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
				PORTB &= ~(1 << PUMP_PWM);		// disable pump leds mosfet
 49c:	85 b1       	in	r24, 0x05	; 5
 49e:	8f 7b       	andi	r24, 0xBF	; 191
 4a0:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << GENERATOR_PWM);	// enable generator leds mosfet
 4a2:	85 b1       	in	r24, 0x05	; 5
 4a4:	80 62       	ori	r24, 0x20	; 32
 4a6:	85 b9       	out	0x05, r24	; 5
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
			} else {
				PORTB &= ~(1 << GENERATOR_PWM);		// disable pump leds mosfet
 4aa:	85 b1       	in	r24, 0x05	; 5
 4ac:	8f 7d       	andi	r24, 0xDF	; 223
 4ae:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PUMP_PWM);			// enable generator leds mosfet
 4b0:	85 b1       	in	r24, 0x05	; 5
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	85 b9       	out	0x05, r24	; 5
			}
			OCR1A = (uint16_t)((((uint32_t)absData * (uint32_t)(PUMP_ICR - PUMP_SLOWEST_OCR))/100) + PUMP_SLOWEST_OCR);
 4b6:	d1 2c       	mov	r13, r1
 4b8:	e1 2c       	mov	r14, r1
 4ba:	f1 2c       	mov	r15, r1
 4bc:	a0 ea       	ldi	r26, 0xA0	; 160
 4be:	bf e0       	ldi	r27, 0x0F	; 15
 4c0:	a7 01       	movw	r20, r14
 4c2:	96 01       	movw	r18, r12
 4c4:	c4 d2       	rcall	.+1416   	; 0xa4e <__muluhisi3>
 4c6:	0f 2e       	mov	r0, r31
 4c8:	f4 e6       	ldi	r31, 0x64	; 100
 4ca:	8f 2e       	mov	r8, r31
 4cc:	91 2c       	mov	r9, r1
 4ce:	a1 2c       	mov	r10, r1
 4d0:	b1 2c       	mov	r11, r1
 4d2:	f0 2d       	mov	r31, r0
 4d4:	a5 01       	movw	r20, r10
 4d6:	94 01       	movw	r18, r8
 4d8:	83 d2       	rcall	.+1286   	; 0x9e0 <__udivmodsi4>
 4da:	20 56       	subi	r18, 0x60	; 96
 4dc:	30 4f       	sbci	r19, 0xF0	; 240
 4de:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4e2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			ICR5 = (uint16_t)((((uint32_t)absData * (uint32_t)(LED_FASTEST_OCR - LED_SLOWEST_OCR))/100) + LED_SLOWEST_OCR);
 4e6:	a8 e3       	ldi	r26, 0x38	; 56
 4e8:	b0 e5       	ldi	r27, 0x50	; 80
 4ea:	a7 01       	movw	r20, r14
 4ec:	96 01       	movw	r18, r12
 4ee:	bb d2       	rcall	.+1398   	; 0xa66 <__mulohisi3>
 4f0:	a5 01       	movw	r20, r10
 4f2:	94 01       	movw	r18, r8
 4f4:	75 d2       	rcall	.+1258   	; 0x9e0 <__udivmodsi4>
 4f6:	20 5b       	subi	r18, 0xB0	; 176
 4f8:	3c 43       	sbci	r19, 0x3C	; 60
 4fa:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 4fe:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//                       calc Windmill - PWM
		//////////////////////////////////////////////////////////////////////////
		if(rData[1] <= 0) {
 502:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rData+0x1>
 506:	18 16       	cp	r1, r24
 508:	2c f0       	brlt	.+10     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			OCR3A = 0;
 50a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 50e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 512:	13 c0       	rjmp	.+38     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		} else {
			OCR3A =  (uint16_t)((((uint32_t)rData[1] * (uint32_t)(WM_ICR - WM_SLOWEST_OCR))/100) + WM_SLOWEST_OCR);
 514:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <rData+0x1>
 518:	0a 2e       	mov	r0, r26
 51a:	00 0c       	add	r0, r0
 51c:	bb 0b       	sbc	r27, r27
 51e:	20 ea       	ldi	r18, 0xA0	; 160
 520:	3f e0       	ldi	r19, 0x0F	; 15
 522:	8f d2       	rcall	.+1310   	; 0xa42 <__usmulhisi3>
 524:	24 e6       	ldi	r18, 0x64	; 100
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	59 d2       	rcall	.+1202   	; 0x9e0 <__udivmodsi4>
 52e:	20 56       	subi	r18, 0x60	; 96
 530:	30 4f       	sbci	r19, 0xF0	; 240
 532:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 536:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		// 3. in ISR if rising edge start Timer 4
		// 4. wait for falling edge on INT0
		// 5. in ISR if falling edge stop Timer 4
		// 6. calculate distance and set tData 0 and 1
		// 7. stop INT0 sensing and set TCNT4 = 0
		PORTJ |= (1 << US_TRIGGER_IN);
 53a:	e5 e0       	ldi	r30, 0x05	; 5
 53c:	f1 e0       	ldi	r31, 0x01	; 1
 53e:	80 81       	ld	r24, Z
 540:	81 60       	ori	r24, 0x01	; 1
 542:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 544:	8a e6       	ldi	r24, 0x6A	; 106
 546:	8a 95       	dec	r24
 548:	f1 f7       	brne	.-4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_IN);
 54c:	80 81       	ld	r24, Z
 54e:	8e 7f       	andi	r24, 0xFE	; 254
 550:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);			// activate INT0 interrupt 
 552:	8d b3       	in	r24, 0x1d	; 29
 554:	81 60       	ori	r24, 0x01	; 1
 556:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 55e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 562:	81 11       	cpse	r24, r1
 564:	fc cf       	rjmp	.-8      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		};
		EIMSK &= ~(1 << INT0);			// deactivate INT0 interrupt
 566:	8d b3       	in	r24, 0x1d	; 29
 568:	8e 7f       	andi	r24, 0xFE	; 254
 56a:	8d bb       	out	0x1d, r24	; 29
		
		PORTJ |= (1 << US_TRIGGER_OUT);
 56c:	e5 e0       	ldi	r30, 0x05	; 5
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	80 81       	ld	r24, Z
 572:	82 60       	ori	r24, 0x02	; 2
 574:	80 83       	st	Z, r24
 576:	8a e6       	ldi	r24, 0x6A	; 106
 578:	8a 95       	dec	r24
 57a:	f1 f7       	brne	.-4      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_OUT);
 57e:	80 81       	ld	r24, Z
 580:	8d 7f       	andi	r24, 0xFD	; 253
 582:	80 83       	st	Z, r24
		EIMSK |= (1 << INT1);			// activate INT1 interrupt 
 584:	8d b3       	in	r24, 0x1d	; 29
 586:	82 60       	ori	r24, 0x02	; 2
 588:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 590:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 594:	81 11       	cpse	r24, r1
 596:	fc cf       	rjmp	.-8      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
		};
		EIMSK &= ~(1 << INT1);			// deactivate INT1 interrupt 
 598:	8d b3       	in	r24, 0x1d	; 29
 59a:	8d 7f       	andi	r24, 0xFD	; 253
 59c:	8d bb       	out	0x1d, r24	; 29
		
		
		
		TCCR5B |= (1 << CS50) | (1 << CS51);	// start LED Timer	
 59e:	e1 e2       	ldi	r30, 0x21	; 33
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	80 81       	ld	r24, Z
 5a4:	83 60       	ori	r24, 0x03	; 3
 5a6:	80 83       	st	Z, r24
		EIMSK |= (1 << INT2);					// enable !SS interupt when !SS is activated (falling edge)
 5a8:	8d b3       	in	r24, 0x1d	; 29
 5aa:	84 60       	ori	r24, 0x04	; 4
 5ac:	8d bb       	out	0x1d, r24	; 29
		PORTB &= ~(1 << LED_WindMill);			// turn out WindMill flash LED
 5ae:	85 b1       	in	r24, 0x05	; 5
 5b0:	8f 7e       	andi	r24, 0xEF	; 239
 5b2:	85 b9       	out	0x05, r24	; 5
		/************************************************************************/
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	86 30       	cpi	r24, 0x06	; 6
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5ba:	52 cf       	rjmp	.-348    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
					
			// Write 1st byte into register
			SPDR = tData[idx];
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	e0 50       	subi	r30, 0x00	; 0
 5c4:	fe 4f       	sbci	r31, 0xFE	; 254
 5c6:	90 81       	ld	r25, Z
 5c8:	9e bd       	out	0x2e, r25	; 46
					
			// Wait for transmission
			while(!(SPSR & (1<<SPIF)));
 5ca:	0d b4       	in	r0, 0x2d	; 45
 5cc:	07 fe       	sbrs	r0, 7
 5ce:	fd cf       	rjmp	.-6      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
					
			// Because only the first 2 bytes are real data => check if its the 1st or 2nd byte
			if (idx < 2) {
 5d0:	82 30       	cpi	r24, 0x02	; 2
 5d2:	d0 f4       	brcc	.+52     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
				// Read register
				rData[idx] = SPDR;
 5d4:	9e b5       	in	r25, 0x2e	; 46
 5d6:	f9 01       	movw	r30, r18
 5d8:	e8 5f       	subi	r30, 0xF8	; 248
 5da:	fd 4f       	sbci	r31, 0xFD	; 253
 5dc:	90 83       	st	Z, r25
				if (rData[idx] < 0) // to send values back next time transmitting
 5de:	90 81       	ld	r25, Z
 5e0:	99 23       	and	r25, r25
 5e2:	54 f4       	brge	.+20     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
					tData[idx + 4] = (uint8_t)(rData[idx] + 100);	// transform to uint8 -> see declaration
 5e4:	f9 01       	movw	r30, r18
 5e6:	e8 5f       	subi	r30, 0xF8	; 248
 5e8:	fd 4f       	sbci	r31, 0xFD	; 253
 5ea:	90 81       	ld	r25, Z
 5ec:	9c 59       	subi	r25, 0x9C	; 156
 5ee:	f9 01       	movw	r30, r18
 5f0:	ec 5f       	subi	r30, 0xFC	; 252
 5f2:	fd 4f       	sbci	r31, 0xFD	; 253
 5f4:	90 83       	st	Z, r25
 5f6:	08 c0       	rjmp	.+16     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
				else
					tData[idx + 4] = (uint8_t)rData[idx];			// use positive value
 5f8:	f9 01       	movw	r30, r18
 5fa:	e8 5f       	subi	r30, 0xF8	; 248
 5fc:	fd 4f       	sbci	r31, 0xFD	; 253
 5fe:	90 81       	ld	r25, Z
 600:	f9 01       	movw	r30, r18
 602:	ec 5f       	subi	r30, 0xFC	; 252
 604:	fd 4f       	sbci	r31, 0xFD	; 253
 606:	90 83       	st	Z, r25
		/************************************************************************/
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	d5 cf       	rjmp	.-86     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>

0000060c <__subsf3>:
 60c:	50 58       	subi	r21, 0x80	; 128

0000060e <__addsf3>:
 60e:	bb 27       	eor	r27, r27
 610:	aa 27       	eor	r26, r26
 612:	0e d0       	rcall	.+28     	; 0x630 <__addsf3x>
 614:	48 c1       	rjmp	.+656    	; 0x8a6 <__fp_round>
 616:	39 d1       	rcall	.+626    	; 0x88a <__fp_pscA>
 618:	30 f0       	brcs	.+12     	; 0x626 <__addsf3+0x18>
 61a:	3e d1       	rcall	.+636    	; 0x898 <__fp_pscB>
 61c:	20 f0       	brcs	.+8      	; 0x626 <__addsf3+0x18>
 61e:	31 f4       	brne	.+12     	; 0x62c <__addsf3+0x1e>
 620:	9f 3f       	cpi	r25, 0xFF	; 255
 622:	11 f4       	brne	.+4      	; 0x628 <__addsf3+0x1a>
 624:	1e f4       	brtc	.+6      	; 0x62c <__addsf3+0x1e>
 626:	2e c1       	rjmp	.+604    	; 0x884 <__fp_nan>
 628:	0e f4       	brtc	.+2      	; 0x62c <__addsf3+0x1e>
 62a:	e0 95       	com	r30
 62c:	e7 fb       	bst	r30, 7
 62e:	24 c1       	rjmp	.+584    	; 0x878 <__fp_inf>

00000630 <__addsf3x>:
 630:	e9 2f       	mov	r30, r25
 632:	4a d1       	rcall	.+660    	; 0x8c8 <__fp_split3>
 634:	80 f3       	brcs	.-32     	; 0x616 <__addsf3+0x8>
 636:	ba 17       	cp	r27, r26
 638:	62 07       	cpc	r22, r18
 63a:	73 07       	cpc	r23, r19
 63c:	84 07       	cpc	r24, r20
 63e:	95 07       	cpc	r25, r21
 640:	18 f0       	brcs	.+6      	; 0x648 <__addsf3x+0x18>
 642:	71 f4       	brne	.+28     	; 0x660 <__addsf3x+0x30>
 644:	9e f5       	brtc	.+102    	; 0x6ac <__addsf3x+0x7c>
 646:	62 c1       	rjmp	.+708    	; 0x90c <__fp_zero>
 648:	0e f4       	brtc	.+2      	; 0x64c <__addsf3x+0x1c>
 64a:	e0 95       	com	r30
 64c:	0b 2e       	mov	r0, r27
 64e:	ba 2f       	mov	r27, r26
 650:	a0 2d       	mov	r26, r0
 652:	0b 01       	movw	r0, r22
 654:	b9 01       	movw	r22, r18
 656:	90 01       	movw	r18, r0
 658:	0c 01       	movw	r0, r24
 65a:	ca 01       	movw	r24, r20
 65c:	a0 01       	movw	r20, r0
 65e:	11 24       	eor	r1, r1
 660:	ff 27       	eor	r31, r31
 662:	59 1b       	sub	r21, r25
 664:	99 f0       	breq	.+38     	; 0x68c <__addsf3x+0x5c>
 666:	59 3f       	cpi	r21, 0xF9	; 249
 668:	50 f4       	brcc	.+20     	; 0x67e <__addsf3x+0x4e>
 66a:	50 3e       	cpi	r21, 0xE0	; 224
 66c:	68 f1       	brcs	.+90     	; 0x6c8 <__addsf3x+0x98>
 66e:	1a 16       	cp	r1, r26
 670:	f0 40       	sbci	r31, 0x00	; 0
 672:	a2 2f       	mov	r26, r18
 674:	23 2f       	mov	r18, r19
 676:	34 2f       	mov	r19, r20
 678:	44 27       	eor	r20, r20
 67a:	58 5f       	subi	r21, 0xF8	; 248
 67c:	f3 cf       	rjmp	.-26     	; 0x664 <__addsf3x+0x34>
 67e:	46 95       	lsr	r20
 680:	37 95       	ror	r19
 682:	27 95       	ror	r18
 684:	a7 95       	ror	r26
 686:	f0 40       	sbci	r31, 0x00	; 0
 688:	53 95       	inc	r21
 68a:	c9 f7       	brne	.-14     	; 0x67e <__addsf3x+0x4e>
 68c:	7e f4       	brtc	.+30     	; 0x6ac <__addsf3x+0x7c>
 68e:	1f 16       	cp	r1, r31
 690:	ba 0b       	sbc	r27, r26
 692:	62 0b       	sbc	r22, r18
 694:	73 0b       	sbc	r23, r19
 696:	84 0b       	sbc	r24, r20
 698:	ba f0       	brmi	.+46     	; 0x6c8 <__addsf3x+0x98>
 69a:	91 50       	subi	r25, 0x01	; 1
 69c:	a1 f0       	breq	.+40     	; 0x6c6 <__addsf3x+0x96>
 69e:	ff 0f       	add	r31, r31
 6a0:	bb 1f       	adc	r27, r27
 6a2:	66 1f       	adc	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	88 1f       	adc	r24, r24
 6a8:	c2 f7       	brpl	.-16     	; 0x69a <__addsf3x+0x6a>
 6aa:	0e c0       	rjmp	.+28     	; 0x6c8 <__addsf3x+0x98>
 6ac:	ba 0f       	add	r27, r26
 6ae:	62 1f       	adc	r22, r18
 6b0:	73 1f       	adc	r23, r19
 6b2:	84 1f       	adc	r24, r20
 6b4:	48 f4       	brcc	.+18     	; 0x6c8 <__addsf3x+0x98>
 6b6:	87 95       	ror	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b7 95       	ror	r27
 6be:	f7 95       	ror	r31
 6c0:	9e 3f       	cpi	r25, 0xFE	; 254
 6c2:	08 f0       	brcs	.+2      	; 0x6c6 <__addsf3x+0x96>
 6c4:	b3 cf       	rjmp	.-154    	; 0x62c <__addsf3+0x1e>
 6c6:	93 95       	inc	r25
 6c8:	88 0f       	add	r24, r24
 6ca:	08 f0       	brcs	.+2      	; 0x6ce <__addsf3x+0x9e>
 6cc:	99 27       	eor	r25, r25
 6ce:	ee 0f       	add	r30, r30
 6d0:	97 95       	ror	r25
 6d2:	87 95       	ror	r24
 6d4:	08 95       	ret

000006d6 <__divsf3>:
 6d6:	0c d0       	rcall	.+24     	; 0x6f0 <__divsf3x>
 6d8:	e6 c0       	rjmp	.+460    	; 0x8a6 <__fp_round>
 6da:	de d0       	rcall	.+444    	; 0x898 <__fp_pscB>
 6dc:	40 f0       	brcs	.+16     	; 0x6ee <__divsf3+0x18>
 6de:	d5 d0       	rcall	.+426    	; 0x88a <__fp_pscA>
 6e0:	30 f0       	brcs	.+12     	; 0x6ee <__divsf3+0x18>
 6e2:	21 f4       	brne	.+8      	; 0x6ec <__divsf3+0x16>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	19 f0       	breq	.+6      	; 0x6ee <__divsf3+0x18>
 6e8:	c7 c0       	rjmp	.+398    	; 0x878 <__fp_inf>
 6ea:	51 11       	cpse	r21, r1
 6ec:	10 c1       	rjmp	.+544    	; 0x90e <__fp_szero>
 6ee:	ca c0       	rjmp	.+404    	; 0x884 <__fp_nan>

000006f0 <__divsf3x>:
 6f0:	eb d0       	rcall	.+470    	; 0x8c8 <__fp_split3>
 6f2:	98 f3       	brcs	.-26     	; 0x6da <__divsf3+0x4>

000006f4 <__divsf3_pse>:
 6f4:	99 23       	and	r25, r25
 6f6:	c9 f3       	breq	.-14     	; 0x6ea <__divsf3+0x14>
 6f8:	55 23       	and	r21, r21
 6fa:	b1 f3       	breq	.-20     	; 0x6e8 <__divsf3+0x12>
 6fc:	95 1b       	sub	r25, r21
 6fe:	55 0b       	sbc	r21, r21
 700:	bb 27       	eor	r27, r27
 702:	aa 27       	eor	r26, r26
 704:	62 17       	cp	r22, r18
 706:	73 07       	cpc	r23, r19
 708:	84 07       	cpc	r24, r20
 70a:	38 f0       	brcs	.+14     	; 0x71a <__divsf3_pse+0x26>
 70c:	9f 5f       	subi	r25, 0xFF	; 255
 70e:	5f 4f       	sbci	r21, 0xFF	; 255
 710:	22 0f       	add	r18, r18
 712:	33 1f       	adc	r19, r19
 714:	44 1f       	adc	r20, r20
 716:	aa 1f       	adc	r26, r26
 718:	a9 f3       	breq	.-22     	; 0x704 <__divsf3_pse+0x10>
 71a:	33 d0       	rcall	.+102    	; 0x782 <__divsf3_pse+0x8e>
 71c:	0e 2e       	mov	r0, r30
 71e:	3a f0       	brmi	.+14     	; 0x72e <__divsf3_pse+0x3a>
 720:	e0 e8       	ldi	r30, 0x80	; 128
 722:	30 d0       	rcall	.+96     	; 0x784 <__divsf3_pse+0x90>
 724:	91 50       	subi	r25, 0x01	; 1
 726:	50 40       	sbci	r21, 0x00	; 0
 728:	e6 95       	lsr	r30
 72a:	00 1c       	adc	r0, r0
 72c:	ca f7       	brpl	.-14     	; 0x720 <__divsf3_pse+0x2c>
 72e:	29 d0       	rcall	.+82     	; 0x782 <__divsf3_pse+0x8e>
 730:	fe 2f       	mov	r31, r30
 732:	27 d0       	rcall	.+78     	; 0x782 <__divsf3_pse+0x8e>
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	bb 1f       	adc	r27, r27
 73c:	26 17       	cp	r18, r22
 73e:	37 07       	cpc	r19, r23
 740:	48 07       	cpc	r20, r24
 742:	ab 07       	cpc	r26, r27
 744:	b0 e8       	ldi	r27, 0x80	; 128
 746:	09 f0       	breq	.+2      	; 0x74a <__divsf3_pse+0x56>
 748:	bb 0b       	sbc	r27, r27
 74a:	80 2d       	mov	r24, r0
 74c:	bf 01       	movw	r22, r30
 74e:	ff 27       	eor	r31, r31
 750:	93 58       	subi	r25, 0x83	; 131
 752:	5f 4f       	sbci	r21, 0xFF	; 255
 754:	2a f0       	brmi	.+10     	; 0x760 <__divsf3_pse+0x6c>
 756:	9e 3f       	cpi	r25, 0xFE	; 254
 758:	51 05       	cpc	r21, r1
 75a:	68 f0       	brcs	.+26     	; 0x776 <__divsf3_pse+0x82>
 75c:	8d c0       	rjmp	.+282    	; 0x878 <__fp_inf>
 75e:	d7 c0       	rjmp	.+430    	; 0x90e <__fp_szero>
 760:	5f 3f       	cpi	r21, 0xFF	; 255
 762:	ec f3       	brlt	.-6      	; 0x75e <__divsf3_pse+0x6a>
 764:	98 3e       	cpi	r25, 0xE8	; 232
 766:	dc f3       	brlt	.-10     	; 0x75e <__divsf3_pse+0x6a>
 768:	86 95       	lsr	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f7 95       	ror	r31
 772:	9f 5f       	subi	r25, 0xFF	; 255
 774:	c9 f7       	brne	.-14     	; 0x768 <__divsf3_pse+0x74>
 776:	88 0f       	add	r24, r24
 778:	91 1d       	adc	r25, r1
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret
 782:	e1 e0       	ldi	r30, 0x01	; 1
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	bb 1f       	adc	r27, r27
 78c:	62 17       	cp	r22, r18
 78e:	73 07       	cpc	r23, r19
 790:	84 07       	cpc	r24, r20
 792:	ba 07       	cpc	r27, r26
 794:	20 f0       	brcs	.+8      	; 0x79e <__divsf3_pse+0xaa>
 796:	62 1b       	sub	r22, r18
 798:	73 0b       	sbc	r23, r19
 79a:	84 0b       	sbc	r24, r20
 79c:	ba 0b       	sbc	r27, r26
 79e:	ee 1f       	adc	r30, r30
 7a0:	88 f7       	brcc	.-30     	; 0x784 <__divsf3_pse+0x90>
 7a2:	e0 95       	com	r30
 7a4:	08 95       	ret

000007a6 <__fixunssfsi>:
 7a6:	98 d0       	rcall	.+304    	; 0x8d8 <__fp_splitA>
 7a8:	88 f0       	brcs	.+34     	; 0x7cc <__fixunssfsi+0x26>
 7aa:	9f 57       	subi	r25, 0x7F	; 127
 7ac:	90 f0       	brcs	.+36     	; 0x7d2 <__fixunssfsi+0x2c>
 7ae:	b9 2f       	mov	r27, r25
 7b0:	99 27       	eor	r25, r25
 7b2:	b7 51       	subi	r27, 0x17	; 23
 7b4:	a0 f0       	brcs	.+40     	; 0x7de <__fixunssfsi+0x38>
 7b6:	d1 f0       	breq	.+52     	; 0x7ec <__fixunssfsi+0x46>
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	1a f0       	brmi	.+6      	; 0x7c8 <__fixunssfsi+0x22>
 7c2:	ba 95       	dec	r27
 7c4:	c9 f7       	brne	.-14     	; 0x7b8 <__fixunssfsi+0x12>
 7c6:	12 c0       	rjmp	.+36     	; 0x7ec <__fixunssfsi+0x46>
 7c8:	b1 30       	cpi	r27, 0x01	; 1
 7ca:	81 f0       	breq	.+32     	; 0x7ec <__fixunssfsi+0x46>
 7cc:	9f d0       	rcall	.+318    	; 0x90c <__fp_zero>
 7ce:	b1 e0       	ldi	r27, 0x01	; 1
 7d0:	08 95       	ret
 7d2:	9c c0       	rjmp	.+312    	; 0x90c <__fp_zero>
 7d4:	67 2f       	mov	r22, r23
 7d6:	78 2f       	mov	r23, r24
 7d8:	88 27       	eor	r24, r24
 7da:	b8 5f       	subi	r27, 0xF8	; 248
 7dc:	39 f0       	breq	.+14     	; 0x7ec <__fixunssfsi+0x46>
 7de:	b9 3f       	cpi	r27, 0xF9	; 249
 7e0:	cc f3       	brlt	.-14     	; 0x7d4 <__fixunssfsi+0x2e>
 7e2:	86 95       	lsr	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b3 95       	inc	r27
 7ea:	d9 f7       	brne	.-10     	; 0x7e2 <__fixunssfsi+0x3c>
 7ec:	3e f4       	brtc	.+14     	; 0x7fc <__fixunssfsi+0x56>
 7ee:	90 95       	com	r25
 7f0:	80 95       	com	r24
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	08 95       	ret

000007fe <__floatunsisf>:
 7fe:	e8 94       	clt
 800:	09 c0       	rjmp	.+18     	; 0x814 <__floatsisf+0x12>

00000802 <__floatsisf>:
 802:	97 fb       	bst	r25, 7
 804:	3e f4       	brtc	.+14     	; 0x814 <__floatsisf+0x12>
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	99 23       	and	r25, r25
 816:	a9 f0       	breq	.+42     	; 0x842 <__floatsisf+0x40>
 818:	f9 2f       	mov	r31, r25
 81a:	96 e9       	ldi	r25, 0x96	; 150
 81c:	bb 27       	eor	r27, r27
 81e:	93 95       	inc	r25
 820:	f6 95       	lsr	r31
 822:	87 95       	ror	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b7 95       	ror	r27
 82a:	f1 11       	cpse	r31, r1
 82c:	f8 cf       	rjmp	.-16     	; 0x81e <__floatsisf+0x1c>
 82e:	fa f4       	brpl	.+62     	; 0x86e <__floatsisf+0x6c>
 830:	bb 0f       	add	r27, r27
 832:	11 f4       	brne	.+4      	; 0x838 <__floatsisf+0x36>
 834:	60 ff       	sbrs	r22, 0
 836:	1b c0       	rjmp	.+54     	; 0x86e <__floatsisf+0x6c>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	16 c0       	rjmp	.+44     	; 0x86e <__floatsisf+0x6c>
 842:	88 23       	and	r24, r24
 844:	11 f0       	breq	.+4      	; 0x84a <__floatsisf+0x48>
 846:	96 e9       	ldi	r25, 0x96	; 150
 848:	11 c0       	rjmp	.+34     	; 0x86c <__floatsisf+0x6a>
 84a:	77 23       	and	r23, r23
 84c:	21 f0       	breq	.+8      	; 0x856 <__floatsisf+0x54>
 84e:	9e e8       	ldi	r25, 0x8E	; 142
 850:	87 2f       	mov	r24, r23
 852:	76 2f       	mov	r23, r22
 854:	05 c0       	rjmp	.+10     	; 0x860 <__floatsisf+0x5e>
 856:	66 23       	and	r22, r22
 858:	71 f0       	breq	.+28     	; 0x876 <__floatsisf+0x74>
 85a:	96 e8       	ldi	r25, 0x86	; 134
 85c:	86 2f       	mov	r24, r22
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	2a f0       	brmi	.+10     	; 0x86e <__floatsisf+0x6c>
 864:	9a 95       	dec	r25
 866:	66 0f       	add	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	da f7       	brpl	.-10     	; 0x864 <__floatsisf+0x62>
 86e:	88 0f       	add	r24, r24
 870:	96 95       	lsr	r25
 872:	87 95       	ror	r24
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret

00000878 <__fp_inf>:
 878:	97 f9       	bld	r25, 7
 87a:	9f 67       	ori	r25, 0x7F	; 127
 87c:	80 e8       	ldi	r24, 0x80	; 128
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	08 95       	ret

00000884 <__fp_nan>:
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	80 ec       	ldi	r24, 0xC0	; 192
 888:	08 95       	ret

0000088a <__fp_pscA>:
 88a:	00 24       	eor	r0, r0
 88c:	0a 94       	dec	r0
 88e:	16 16       	cp	r1, r22
 890:	17 06       	cpc	r1, r23
 892:	18 06       	cpc	r1, r24
 894:	09 06       	cpc	r0, r25
 896:	08 95       	ret

00000898 <__fp_pscB>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	14 06       	cpc	r1, r20
 8a2:	05 06       	cpc	r0, r21
 8a4:	08 95       	ret

000008a6 <__fp_round>:
 8a6:	09 2e       	mov	r0, r25
 8a8:	03 94       	inc	r0
 8aa:	00 0c       	add	r0, r0
 8ac:	11 f4       	brne	.+4      	; 0x8b2 <__fp_round+0xc>
 8ae:	88 23       	and	r24, r24
 8b0:	52 f0       	brmi	.+20     	; 0x8c6 <__fp_round+0x20>
 8b2:	bb 0f       	add	r27, r27
 8b4:	40 f4       	brcc	.+16     	; 0x8c6 <__fp_round+0x20>
 8b6:	bf 2b       	or	r27, r31
 8b8:	11 f4       	brne	.+4      	; 0x8be <__fp_round+0x18>
 8ba:	60 ff       	sbrs	r22, 0
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__fp_round+0x20>
 8be:	6f 5f       	subi	r22, 0xFF	; 255
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__fp_split3>:
 8c8:	57 fd       	sbrc	r21, 7
 8ca:	90 58       	subi	r25, 0x80	; 128
 8cc:	44 0f       	add	r20, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <__fp_splitA+0x10>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <__fp_splitA+0x1a>
 8d6:	47 95       	ror	r20

000008d8 <__fp_splitA>:
 8d8:	88 0f       	add	r24, r24
 8da:	97 fb       	bst	r25, 7
 8dc:	99 1f       	adc	r25, r25
 8de:	61 f0       	breq	.+24     	; 0x8f8 <__fp_splitA+0x20>
 8e0:	9f 3f       	cpi	r25, 0xFF	; 255
 8e2:	79 f0       	breq	.+30     	; 0x902 <__fp_splitA+0x2a>
 8e4:	87 95       	ror	r24
 8e6:	08 95       	ret
 8e8:	12 16       	cp	r1, r18
 8ea:	13 06       	cpc	r1, r19
 8ec:	14 06       	cpc	r1, r20
 8ee:	55 1f       	adc	r21, r21
 8f0:	f2 cf       	rjmp	.-28     	; 0x8d6 <__fp_split3+0xe>
 8f2:	46 95       	lsr	r20
 8f4:	f1 df       	rcall	.-30     	; 0x8d8 <__fp_splitA>
 8f6:	08 c0       	rjmp	.+16     	; 0x908 <__fp_splitA+0x30>
 8f8:	16 16       	cp	r1, r22
 8fa:	17 06       	cpc	r1, r23
 8fc:	18 06       	cpc	r1, r24
 8fe:	99 1f       	adc	r25, r25
 900:	f1 cf       	rjmp	.-30     	; 0x8e4 <__fp_splitA+0xc>
 902:	86 95       	lsr	r24
 904:	71 05       	cpc	r23, r1
 906:	61 05       	cpc	r22, r1
 908:	08 94       	sec
 90a:	08 95       	ret

0000090c <__fp_zero>:
 90c:	e8 94       	clt

0000090e <__fp_szero>:
 90e:	bb 27       	eor	r27, r27
 910:	66 27       	eor	r22, r22
 912:	77 27       	eor	r23, r23
 914:	cb 01       	movw	r24, r22
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret

0000091a <__mulsf3>:
 91a:	0b d0       	rcall	.+22     	; 0x932 <__mulsf3x>
 91c:	c4 cf       	rjmp	.-120    	; 0x8a6 <__fp_round>
 91e:	b5 df       	rcall	.-150    	; 0x88a <__fp_pscA>
 920:	28 f0       	brcs	.+10     	; 0x92c <__mulsf3+0x12>
 922:	ba df       	rcall	.-140    	; 0x898 <__fp_pscB>
 924:	18 f0       	brcs	.+6      	; 0x92c <__mulsf3+0x12>
 926:	95 23       	and	r25, r21
 928:	09 f0       	breq	.+2      	; 0x92c <__mulsf3+0x12>
 92a:	a6 cf       	rjmp	.-180    	; 0x878 <__fp_inf>
 92c:	ab cf       	rjmp	.-170    	; 0x884 <__fp_nan>
 92e:	11 24       	eor	r1, r1
 930:	ee cf       	rjmp	.-36     	; 0x90e <__fp_szero>

00000932 <__mulsf3x>:
 932:	ca df       	rcall	.-108    	; 0x8c8 <__fp_split3>
 934:	a0 f3       	brcs	.-24     	; 0x91e <__mulsf3+0x4>

00000936 <__mulsf3_pse>:
 936:	95 9f       	mul	r25, r21
 938:	d1 f3       	breq	.-12     	; 0x92e <__mulsf3+0x14>
 93a:	95 0f       	add	r25, r21
 93c:	50 e0       	ldi	r21, 0x00	; 0
 93e:	55 1f       	adc	r21, r21
 940:	62 9f       	mul	r22, r18
 942:	f0 01       	movw	r30, r0
 944:	72 9f       	mul	r23, r18
 946:	bb 27       	eor	r27, r27
 948:	f0 0d       	add	r31, r0
 94a:	b1 1d       	adc	r27, r1
 94c:	63 9f       	mul	r22, r19
 94e:	aa 27       	eor	r26, r26
 950:	f0 0d       	add	r31, r0
 952:	b1 1d       	adc	r27, r1
 954:	aa 1f       	adc	r26, r26
 956:	64 9f       	mul	r22, r20
 958:	66 27       	eor	r22, r22
 95a:	b0 0d       	add	r27, r0
 95c:	a1 1d       	adc	r26, r1
 95e:	66 1f       	adc	r22, r22
 960:	82 9f       	mul	r24, r18
 962:	22 27       	eor	r18, r18
 964:	b0 0d       	add	r27, r0
 966:	a1 1d       	adc	r26, r1
 968:	62 1f       	adc	r22, r18
 96a:	73 9f       	mul	r23, r19
 96c:	b0 0d       	add	r27, r0
 96e:	a1 1d       	adc	r26, r1
 970:	62 1f       	adc	r22, r18
 972:	83 9f       	mul	r24, r19
 974:	a0 0d       	add	r26, r0
 976:	61 1d       	adc	r22, r1
 978:	22 1f       	adc	r18, r18
 97a:	74 9f       	mul	r23, r20
 97c:	33 27       	eor	r19, r19
 97e:	a0 0d       	add	r26, r0
 980:	61 1d       	adc	r22, r1
 982:	23 1f       	adc	r18, r19
 984:	84 9f       	mul	r24, r20
 986:	60 0d       	add	r22, r0
 988:	21 1d       	adc	r18, r1
 98a:	82 2f       	mov	r24, r18
 98c:	76 2f       	mov	r23, r22
 98e:	6a 2f       	mov	r22, r26
 990:	11 24       	eor	r1, r1
 992:	9f 57       	subi	r25, 0x7F	; 127
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	8a f0       	brmi	.+34     	; 0x9ba <__mulsf3_pse+0x84>
 998:	e1 f0       	breq	.+56     	; 0x9d2 <__mulsf3_pse+0x9c>
 99a:	88 23       	and	r24, r24
 99c:	4a f0       	brmi	.+18     	; 0x9b0 <__mulsf3_pse+0x7a>
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	bb 1f       	adc	r27, r27
 9a4:	66 1f       	adc	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	91 50       	subi	r25, 0x01	; 1
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	a9 f7       	brne	.-22     	; 0x99a <__mulsf3_pse+0x64>
 9b0:	9e 3f       	cpi	r25, 0xFE	; 254
 9b2:	51 05       	cpc	r21, r1
 9b4:	70 f0       	brcs	.+28     	; 0x9d2 <__mulsf3_pse+0x9c>
 9b6:	60 cf       	rjmp	.-320    	; 0x878 <__fp_inf>
 9b8:	aa cf       	rjmp	.-172    	; 0x90e <__fp_szero>
 9ba:	5f 3f       	cpi	r21, 0xFF	; 255
 9bc:	ec f3       	brlt	.-6      	; 0x9b8 <__mulsf3_pse+0x82>
 9be:	98 3e       	cpi	r25, 0xE8	; 232
 9c0:	dc f3       	brlt	.-10     	; 0x9b8 <__mulsf3_pse+0x82>
 9c2:	86 95       	lsr	r24
 9c4:	77 95       	ror	r23
 9c6:	67 95       	ror	r22
 9c8:	b7 95       	ror	r27
 9ca:	f7 95       	ror	r31
 9cc:	e7 95       	ror	r30
 9ce:	9f 5f       	subi	r25, 0xFF	; 255
 9d0:	c1 f7       	brne	.-16     	; 0x9c2 <__mulsf3_pse+0x8c>
 9d2:	fe 2b       	or	r31, r30
 9d4:	88 0f       	add	r24, r24
 9d6:	91 1d       	adc	r25, r1
 9d8:	96 95       	lsr	r25
 9da:	87 95       	ror	r24
 9dc:	97 f9       	bld	r25, 7
 9de:	08 95       	ret

000009e0 <__udivmodsi4>:
 9e0:	a1 e2       	ldi	r26, 0x21	; 33
 9e2:	1a 2e       	mov	r1, r26
 9e4:	aa 1b       	sub	r26, r26
 9e6:	bb 1b       	sub	r27, r27
 9e8:	fd 01       	movw	r30, r26
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__udivmodsi4_ep>

000009ec <__udivmodsi4_loop>:
 9ec:	aa 1f       	adc	r26, r26
 9ee:	bb 1f       	adc	r27, r27
 9f0:	ee 1f       	adc	r30, r30
 9f2:	ff 1f       	adc	r31, r31
 9f4:	a2 17       	cp	r26, r18
 9f6:	b3 07       	cpc	r27, r19
 9f8:	e4 07       	cpc	r30, r20
 9fa:	f5 07       	cpc	r31, r21
 9fc:	20 f0       	brcs	.+8      	; 0xa06 <__udivmodsi4_ep>
 9fe:	a2 1b       	sub	r26, r18
 a00:	b3 0b       	sbc	r27, r19
 a02:	e4 0b       	sbc	r30, r20
 a04:	f5 0b       	sbc	r31, r21

00000a06 <__udivmodsi4_ep>:
 a06:	66 1f       	adc	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	1a 94       	dec	r1
 a10:	69 f7       	brne	.-38     	; 0x9ec <__udivmodsi4_loop>
 a12:	60 95       	com	r22
 a14:	70 95       	com	r23
 a16:	80 95       	com	r24
 a18:	90 95       	com	r25
 a1a:	9b 01       	movw	r18, r22
 a1c:	ac 01       	movw	r20, r24
 a1e:	bd 01       	movw	r22, r26
 a20:	cf 01       	movw	r24, r30
 a22:	08 95       	ret

00000a24 <__umulhisi3>:
 a24:	a2 9f       	mul	r26, r18
 a26:	b0 01       	movw	r22, r0
 a28:	b3 9f       	mul	r27, r19
 a2a:	c0 01       	movw	r24, r0
 a2c:	a3 9f       	mul	r26, r19
 a2e:	70 0d       	add	r23, r0
 a30:	81 1d       	adc	r24, r1
 a32:	11 24       	eor	r1, r1
 a34:	91 1d       	adc	r25, r1
 a36:	b2 9f       	mul	r27, r18
 a38:	70 0d       	add	r23, r0
 a3a:	81 1d       	adc	r24, r1
 a3c:	11 24       	eor	r1, r1
 a3e:	91 1d       	adc	r25, r1
 a40:	08 95       	ret

00000a42 <__usmulhisi3>:
 a42:	f0 df       	rcall	.-32     	; 0xa24 <__umulhisi3>

00000a44 <__usmulhisi3_tail>:
 a44:	b7 ff       	sbrs	r27, 7
 a46:	08 95       	ret
 a48:	82 1b       	sub	r24, r18
 a4a:	93 0b       	sbc	r25, r19
 a4c:	08 95       	ret

00000a4e <__muluhisi3>:
 a4e:	ea df       	rcall	.-44     	; 0xa24 <__umulhisi3>
 a50:	a5 9f       	mul	r26, r21
 a52:	90 0d       	add	r25, r0
 a54:	b4 9f       	mul	r27, r20
 a56:	90 0d       	add	r25, r0
 a58:	a4 9f       	mul	r26, r20
 a5a:	80 0d       	add	r24, r0
 a5c:	91 1d       	adc	r25, r1
 a5e:	11 24       	eor	r1, r1
 a60:	08 95       	ret

00000a62 <__mulshisi3>:
 a62:	b7 ff       	sbrs	r27, 7
 a64:	f4 cf       	rjmp	.-24     	; 0xa4e <__muluhisi3>

00000a66 <__mulohisi3>:
 a66:	f3 df       	rcall	.-26     	; 0xa4e <__muluhisi3>
 a68:	82 1b       	sub	r24, r18
 a6a:	93 0b       	sbc	r25, r19
 a6c:	08 95       	ret

00000a6e <_exit>:
 a6e:	f8 94       	cli

00000a70 <__stop_program>:
 a70:	ff cf       	rjmp	.-2      	; 0xa70 <__stop_program>
