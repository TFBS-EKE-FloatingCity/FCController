
FCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  00000b64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebf  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8a  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ba  00000000  00000000  00002765  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062d  00000000  00000000  00002f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  000035b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000398f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	a1 c0       	rjmp	.+322    	; 0x148 <__vector_1>
   6:	00 00       	nop
   8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__vector_2>
   a:	00 00       	nop
   c:	4b c1       	rjmp	.+662    	; 0x2a4 <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2a c0       	rjmp	.+84     	; 0x10a <__vector_45>
  b6:	00 00       	nop
  b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__vector_46>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ab 30       	cpi	r26, 0x0B	; 11
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	27 d1       	rcall	.+590    	; 0x354 <main>
 106:	f2 c4       	rjmp	.+2532   	; 0xaec <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_45>:

#include <avr/interrupt.h>
#include "../general.h"

// stop Usonic measurement for it took too long
ISR(TIMER4_OVF_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	8f 93       	push	r24
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	TCCR4B &= ~(1 << CS40);		// stop timer
 11e:	e1 ea       	ldi	r30, 0xA1	; 161
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24
	TCNT4 = 0;					// reset timer value
 128:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 12c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	waiting = 0;
 130:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0b be       	out	0x3b, r0	; 59
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_1>:

// Usonic measurement (inside)
// gets called when the level on PD0 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT0_vect) {
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0b b6       	in	r0, 0x3b	; 59
 154:	0f 92       	push	r0
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(PIND & (1 << PD0)) {		// rising edge
 172:	48 9b       	sbis	0x09, 0	; 9
 174:	06 c0       	rjmp	.+12     	; 0x182 <__vector_1+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 176:	e1 ea       	ldi	r30, 0xA1	; 161
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 83       	st	Z, r24
 180:	25 c0       	rjmp	.+74     	; 0x1cc <__vector_1+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 182:	e1 ea       	ldi	r30, 0xA1	; 161
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 18c:	c4 ea       	ldi	r28, 0xA4	; 164
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	28 81       	ld	r18, Y
 192:	39 81       	ldd	r19, Y+1	; 0x01
 194:	a7 e5       	ldi	r26, 0x57	; 87
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	84 d4       	rcall	.+2312   	; 0xaa2 <__umulhisi3>
 19a:	70 d3       	rcall	.+1760   	; 0x87c <__floatunsisf>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e8       	ldi	r20, 0x80	; 128
 1a2:	5d e3       	ldi	r21, 0x3D	; 61
 1a4:	f9 d3       	rcall	.+2034   	; 0x998 <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	4a ef       	ldi	r20, 0xFA	; 250
 1ac:	54 e4       	ldi	r21, 0x44	; 68
 1ae:	d2 d2       	rcall	.+1444   	; 0x754 <__divsf3>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	5f e3       	ldi	r21, 0x3F	; 63
 1b8:	69 d2       	rcall	.+1234   	; 0x68c <__addsf3>
 1ba:	34 d3       	rcall	.+1640   	; 0x824 <__fixunssfsi>
		tData[0] = (dist >> 8);
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	70 83       	st	Z, r23
		tData[1] = dist;
 1c2:	61 83       	std	Z+1, r22	; 0x01
		TCNT4 = 0;
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	18 82       	st	Y, r1
		waiting = 0;
 1c8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_2>:

// Usonic measurement (outside)
// gets called when the level on PD1 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT1_vect) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	0b b6       	in	r0, 0x3b	; 59
 202:	0f 92       	push	r0
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if(PIND & (1 << PD1)) {		// rising edge
 220:	49 9b       	sbis	0x09, 1	; 9
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_2+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 224:	e1 ea       	ldi	r30, 0xA1	; 161
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	25 c0       	rjmp	.+74     	; 0x27a <__vector_2+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 230:	e1 ea       	ldi	r30, 0xA1	; 161
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 23a:	c4 ea       	ldi	r28, 0xA4	; 164
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	28 81       	ld	r18, Y
 240:	39 81       	ldd	r19, Y+1	; 0x01
 242:	a7 e5       	ldi	r26, 0x57	; 87
 244:	b1 e0       	ldi	r27, 0x01	; 1
 246:	2d d4       	rcall	.+2138   	; 0xaa2 <__umulhisi3>
 248:	19 d3       	rcall	.+1586   	; 0x87c <__floatunsisf>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5d e3       	ldi	r21, 0x3D	; 61
 252:	a2 d3       	rcall	.+1860   	; 0x998 <__mulsf3>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a ef       	ldi	r20, 0xFA	; 250
 25a:	54 e4       	ldi	r21, 0x44	; 68
 25c:	7b d2       	rcall	.+1270   	; 0x754 <__divsf3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	5f e3       	ldi	r21, 0x3F	; 63
 266:	12 d2       	rcall	.+1060   	; 0x68c <__addsf3>
 268:	dd d2       	rcall	.+1466   	; 0x824 <__fixunssfsi>
		tData[2] = (dist >> 8);
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	72 83       	std	Z+2, r23	; 0x02
		tData[3] = dist;
 270:	63 83       	std	Z+3, r22	; 0x03
		TCNT4 = 0;	
 272:	19 82       	std	Y+1, r1	; 0x01
 274:	18 82       	st	Y, r1
		waiting = 0;
 276:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0b be       	out	0x3b, r0	; 59
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_3>:

// !SS falling edge 
// PIN PD2 must be connected to !SS pin
// stops the LED Timer because a transmission starts
ISR(INT2_vect) {
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	0f 92       	push	r0
 2b2:	8f 93       	push	r24
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	TCCR5B &= ~((1 << CS50) | (1 << CS51));		// stop LED Timer
 2b8:	e1 e2       	ldi	r30, 0x21	; 33
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	80 81       	ld	r24, Z
 2be:	8c 7f       	andi	r24, 0xFC	; 252
 2c0:	80 83       	st	Z, r24
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	8f 91       	pop	r24
 2c8:	0f 90       	pop	r0
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_46>:

// LEDs
// when ICR is reached the next 16Bit LED value is set
ISR(TIMER5_CAPT_vect) {
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
	leds <<= 1;
 2e6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2ea:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2f6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	if(leds < 3) { 
 2fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2fe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 302:	03 97       	sbiw	r24, 0x03	; 3
 304:	38 f4       	brcc	.+14     	; 0x314 <__vector_46+0x3e>
		leds = 3;
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 30e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
 312:	0d c0       	rjmp	.+26     	; 0x32e <__vector_46+0x58>
	} else if (leds == 0x8000) {
 314:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 318:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 31c:	81 15       	cp	r24, r1
 31e:	90 48       	sbci	r25, 0x80	; 128
 320:	31 f4       	brne	.+12     	; 0x32e <__vector_46+0x58>
		leds = 0x8001;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e8       	ldi	r25, 0x80	; 128
 326:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 32a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	} 
	PORTF = leds;
 32e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 332:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 336:	81 bb       	out	0x11, r24	; 17
	PORTK = (leds >> 8);		
 338:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 33c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 340:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
}
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <main>:


int main(void)
{
	// initialize global variables 
	waiting = 0;
 354:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	rData[0] = 0;
 358:	e8 e0       	ldi	r30, 0x08	; 8
 35a:	f2 e0       	ldi	r31, 0x02	; 2
 35c:	10 82       	st	Z, r1
	rData[1] = 0;
 35e:	11 82       	std	Z+1, r1	; 0x01
	leds = 0;
 360:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <leds+0x1>
 364:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <leds>
	
	for(uint8_t i = 0; i < 6; i++) {
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	38 f4       	brcc	.+14     	; 0x37c <main+0x28>
		tData[i] = 0;
 36e:	e8 2f       	mov	r30, r24
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	e0 50       	subi	r30, 0x00	; 0
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	10 82       	st	Z, r1
	waiting = 0;
	rData[0] = 0;
	rData[1] = 0;
	leds = 0;
	
	for(uint8_t i = 0; i < 6; i++) {
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	f7 cf       	rjmp	.-18     	; 0x36a <main+0x16>
		tData[i] = 0;
	}
	
	//INIT Watchdog
	//start Watchdog and set Watchdog LED (clear before entering while())
	DDRB |= (1 << WD_LED) | (1 << LED_WindMill);
 37c:	84 b1       	in	r24, 0x04	; 4
 37e:	80 69       	ori	r24, 0x90	; 144
 380:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( 1 << WD_LED);		// set LED on
 382:	85 b1       	in	r24, 0x05	; 5
 384:	80 68       	ori	r24, 0x80	; 128
 386:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
 388:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 38a:	99 e2       	ldi	r25, 0x29	; 41
 38c:	88 e1       	ldi	r24, 0x18	; 24
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	a8 95       	wdr
 394:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 398:	0f be       	out	0x3f, r0	; 63
 39a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
	wdt_enable(WDTO_8S);			// start WDT TOF=8s
	
	//INIT Pump timer 1
	//PWM-frequency: 2kHz
	//>0% ... >40% Dutycycle
	DDRB |= (1 << PUMP_PWM) | (1 << GENERATOR_PWM);	// PWM pins as output
 39e:	84 b1       	in	r24, 0x04	; 4
 3a0:	80 66       	ori	r24, 0x60	; 96
 3a2:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11);
 3a4:	e0 e8       	ldi	r30, 0x80	; 128
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	82 60       	ori	r24, 0x02	; 2
 3ac:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) |( 1 << WGM13);			// FastPWM mode 14
 3ae:	a1 e8       	ldi	r26, 0x81	; 129
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	8c 91       	ld	r24, X
 3b4:	88 61       	ori	r24, 0x18	; 24
 3b6:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1A1);						// set OC1A (PB5) as timer1 pwm output (generator)
 3b8:	80 81       	ld	r24, Z
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);						// set OC1B (PB6) as timer 1 pwm output (pump)
 3be:	80 81       	ld	r24, Z
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	80 83       	st	Z, r24
	ICR1 = PUMP_ICR -1;								// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 3c4:	2f e3       	ldi	r18, 0x3F	; 63
 3c6:	3f e1       	ldi	r19, 0x1F	; 31
 3c8:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 3cc:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
	OCR1A = 0;										// DutyCyle = 0%
 3d0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3d4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;										// DutyCycle = 0%
 3d8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 3dc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		
	
	//INIT windmill timer 3
	//PWM frequency: 25kHz
	//>0% ... >50% Dutycycle
	DDRE |= (1 << WM_PWM_OUT);					// PWM pin as output
 3e0:	8d b1       	in	r24, 0x0d	; 13
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	8d b9       	out	0x0d, r24	; 13
	TCCR3A |= (1 << WGM11);
 3e6:	c0 e9       	ldi	r28, 0x90	; 144
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	88 81       	ld	r24, Y
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	88 83       	st	Y, r24
	TCCR3B |= (1 << WGM12) | (1 << WGM13);		// FastPWM mode 14
 3f0:	41 e9       	ldi	r20, 0x91	; 145
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	fa 01       	movw	r30, r20
 3f6:	80 81       	ld	r24, Z
 3f8:	88 61       	ori	r24, 0x18	; 24
 3fa:	80 83       	st	Z, r24
	ICR3 = WM_ICR - 1;							// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 3fc:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 400:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	TCCR3A |= (1 << COM3A1);					// set OC3A (PE3) as timer 3 pwm output (windmill)
 404:	88 81       	ld	r24, Y
 406:	80 68       	ori	r24, 0x80	; 128
 408:	88 83       	st	Y, r24
	OCR3A = 0;									// DutyCycle = 0%
 40a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 40e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	// 30cm max. depth of water => 60cm way of sound => ca. 2ms duration
	// 16Bit timer with prescaler 1 (16MHz clock) => after ca. 4ms Overflow => cancel meassurement and write 0 to array
	// not Timer output required, only set prescaler to start timer and configure Overflow Interrupt to end measurement. 
	// start Timer: TCCR4B |= (1 << CS40);
	// stopp Timer: TCCR4B &= ~(1 << CS40);
	TIMSK4 |= (1 << TOIE4);					// set interrupt (measurement takes too long)
 412:	c2 e7       	ldi	r28, 0x72	; 114
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	88 81       	ld	r24, Y
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	88 83       	st	Y, r24
	TCNT4 = 0;								// set counter to 0 
 41c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 420:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	EICRA |= (1 << ISC00) | (1 << ISC10);					// configure INT0 on PD0 and INT1 on PD1 to any edge for Sensor 1 and 2
 424:	c9 e6       	ldi	r28, 0x69	; 105
 426:	d0 e0       	ldi	r29, 0x00	; 0
 428:	88 81       	ld	r24, Y
 42a:	85 60       	ori	r24, 0x05	; 5
 42c:	88 83       	st	Y, r24
	DDRJ |= (1 << US_TRIGGER_IN) | (1 << US_TRIGGER_OUT);	// configure PJ2 and PJ3 as Trigger output pins
 42e:	24 e0       	ldi	r18, 0x04	; 4
 430:	31 e0       	ldi	r19, 0x01	; 1
 432:	f9 01       	movw	r30, r18
 434:	80 81       	ld	r24, Z
 436:	83 60       	ori	r24, 0x03	; 3
 438:	80 83       	st	Z, r24
	// maxValue for 100% (e.g. 0.5s per LED)
	// PWM Frequency >200Hz
	// Both directions with outputs PF0 .. PF7 and PK0 .. PK7
	//      only plugged vice versa for other direction
	// two pins for MOSFETs to select the LED bank
	DDRF = 0xFF;
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	80 bb       	out	0x10, r24	; 16
	DDRK = 0xFF;
 43e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRH |= (1 << LED_GENERATOR) | (1 << LED_PUMP);		// Pins to select LED running light (per MOSFET)
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	f9 01       	movw	r30, r18
 448:	80 81       	ld	r24, Z
 44a:	83 60       	ori	r24, 0x03	; 3
 44c:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM52) |( 1 << WGM53);				// CTC mode 12
 44e:	21 e2       	ldi	r18, 0x21	; 33
 450:	31 e0       	ldi	r19, 0x01	; 1
 452:	f9 01       	movw	r30, r18
 454:	80 81       	ld	r24, Z
 456:	88 61       	ori	r24, 0x18	; 24
 458:	80 83       	st	Z, r24
	ICR5 = LED_SLOWEST_ICR - 1;							// default value -> must be calculated
 45a:	8f e4       	ldi	r24, 0x4F	; 79
 45c:	93 ec       	ldi	r25, 0xC3	; 195
 45e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 462:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
	TIMSK5 |= (1 << ICIE5);
 466:	23 e7       	ldi	r18, 0x73	; 115
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	80 81       	ld	r24, Z
 46e:	80 62       	ori	r24, 0x20	; 32
 470:	80 83       	st	Z, r24
	
	EICRA |= ( 1 << ISC21);							// enable INT2 on PD2 for falling edge (connect to !SS pin)
 472:	88 81       	ld	r24, Y
 474:	80 62       	ori	r24, 0x20	; 32
 476:	88 83       	st	Y, r24
	
	TCCR1B |= (1 << CS10);				// start Timer 1 (Pumps) Prescaler 1
 478:	8c 91       	ld	r24, X
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS10);				// start Timer 3 (Windmill) Prescaler 1
 47e:	fa 01       	movw	r30, r20
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24
	sei();
 486:	78 94       	sei
	
	
	DDR_SPI |= (1<<DD_MISO);
 488:	84 b1       	in	r24, 0x04	; 4
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	84 b9       	out	0x04, r24	; 4
	// Enable SPI
	SPCR |= (1<<SPE)|(1<<SPR0);
 48e:	8c b5       	in	r24, 0x2c	; 44
 490:	81 64       	ori	r24, 0x41	; 65
 492:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << WD_LED);			// clear init LED 
 494:	85 b1       	in	r24, 0x05	; 5
 496:	8f 77       	andi	r24, 0x7F	; 127
 498:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		PORTB |= (1 << LED_WindMill);
 49a:	85 b1       	in	r24, 0x05	; 5
 49c:	80 61       	ori	r24, 0x10	; 16
 49e:	85 b9       	out	0x05, r24	; 5
		wdt_reset();					// reset WDT => Counter = 0 
 4a0:	a8 95       	wdr
		//////////////////////////////////////////////////////////////////////////
		//                 calc pumps + LED Running Light
		//////////////////////////////////////////////////////////////////////////
			
		if(rData[0] == 0) {
 4a2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 4a6:	81 11       	cpse	r24, r1
 4a8:	0a c0       	rjmp	.+20     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			OCR1A = 0;
 4aa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4ae:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			PORTH &= ~((1 << LED_PUMP) | (1 << LED_GENERATOR));	
 4b2:	e2 e0       	ldi	r30, 0x02	; 2
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	80 81       	ld	r24, Z
 4b8:	8c 7f       	andi	r24, 0xFC	; 252
 4ba:	80 83       	st	Z, r24
 4bc:	73 c0       	rjmp	.+230    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
		} else {
			if(rData[0] > 100) {	// generator runs
 4be:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 4c2:	85 36       	cpi	r24, 0x65	; 101
 4c4:	c8 f1       	brcs	.+114    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
 4c6:	e2 e0       	ldi	r30, 0x02	; 2
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	80 81       	ld	r24, Z
 4cc:	8d 7f       	andi	r24, 0xFD	; 253
 4ce:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
 4d0:	80 81       	ld	r24, Z
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	80 83       	st	Z, r24
				OCR1B = 0;
 4d6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 4da:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				OCR1A = (uint16_t)((((uint32_t)(rData[0] - 100) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
 4de:	c8 e0       	ldi	r28, 0x08	; 8
 4e0:	d2 e0       	ldi	r29, 0x02	; 2
 4e2:	a8 81       	ld	r26, Y
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	a4 56       	subi	r26, 0x64	; 100
 4e8:	b1 09       	sbc	r27, r1
 4ea:	20 ea       	ldi	r18, 0xA0	; 160
 4ec:	3f e0       	ldi	r19, 0x0F	; 15
 4ee:	e8 d2       	rcall	.+1488   	; 0xac0 <__usmulhisi3>
 4f0:	0f 2e       	mov	r0, r31
 4f2:	f4 e6       	ldi	r31, 0x64	; 100
 4f4:	cf 2e       	mov	r12, r31
 4f6:	d1 2c       	mov	r13, r1
 4f8:	e1 2c       	mov	r14, r1
 4fa:	f1 2c       	mov	r15, r1
 4fc:	f0 2d       	mov	r31, r0
 4fe:	a7 01       	movw	r20, r14
 500:	96 01       	movw	r18, r12
 502:	ad d2       	rcall	.+1370   	; 0xa5e <__udivmodsi4>
 504:	20 56       	subi	r18, 0x60	; 96
 506:	30 4f       	sbci	r19, 0xF0	; 240
 508:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 50c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				ICR5 = (uint16_t)((((uint32_t)(100-(rData[0] - 100)) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
 510:	88 81       	ld	r24, Y
 512:	a8 ec       	ldi	r26, 0xC8	; 200
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	a8 1b       	sub	r26, r24
 518:	b1 09       	sbc	r27, r1
 51a:	28 e6       	ldi	r18, 0x68	; 104
 51c:	38 e4       	ldi	r19, 0x48	; 72
 51e:	4f ef       	ldi	r20, 0xFF	; 255
 520:	5f ef       	ldi	r21, 0xFF	; 255
 522:	de d2       	rcall	.+1468   	; 0xae0 <__mulshisi3>
 524:	a7 01       	movw	r20, r14
 526:	96 01       	movw	r18, r12
 528:	9a d2       	rcall	.+1332   	; 0xa5e <__udivmodsi4>
 52a:	28 54       	subi	r18, 0x48	; 72
 52c:	34 4f       	sbci	r19, 0xF4	; 244
 52e:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 532:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
 536:	36 c0       	rjmp	.+108    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
			} else {
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
 538:	e2 e0       	ldi	r30, 0x02	; 2
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	80 81       	ld	r24, Z
 53e:	8d 7f       	andi	r24, 0xFD	; 253
 540:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
 542:	80 81       	ld	r24, Z
 544:	81 60       	ori	r24, 0x01	; 1
 546:	80 83       	st	Z, r24
				OCR1A = 0;
 548:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 54c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				OCR1B = (uint16_t)((((uint32_t)(100 - rData[0]) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
 550:	c8 e0       	ldi	r28, 0x08	; 8
 552:	d2 e0       	ldi	r29, 0x02	; 2
 554:	88 81       	ld	r24, Y
 556:	a4 e6       	ldi	r26, 0x64	; 100
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	a8 1b       	sub	r26, r24
 55c:	b1 09       	sbc	r27, r1
 55e:	20 ea       	ldi	r18, 0xA0	; 160
 560:	3f e0       	ldi	r19, 0x0F	; 15
 562:	ae d2       	rcall	.+1372   	; 0xac0 <__usmulhisi3>
 564:	0f 2e       	mov	r0, r31
 566:	f4 e6       	ldi	r31, 0x64	; 100
 568:	cf 2e       	mov	r12, r31
 56a:	d1 2c       	mov	r13, r1
 56c:	e1 2c       	mov	r14, r1
 56e:	f1 2c       	mov	r15, r1
 570:	f0 2d       	mov	r31, r0
 572:	a7 01       	movw	r20, r14
 574:	96 01       	movw	r18, r12
 576:	73 d2       	rcall	.+1254   	; 0xa5e <__udivmodsi4>
 578:	20 56       	subi	r18, 0x60	; 96
 57a:	30 4f       	sbci	r19, 0xF0	; 240
 57c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 580:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				ICR5 = (uint16_t)((((uint32_t)(rData[0]) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
 584:	a8 81       	ld	r26, Y
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	28 e6       	ldi	r18, 0x68	; 104
 58a:	38 e4       	ldi	r19, 0x48	; 72
 58c:	4f ef       	ldi	r20, 0xFF	; 255
 58e:	5f ef       	ldi	r21, 0xFF	; 255
 590:	9d d2       	rcall	.+1338   	; 0xacc <__muluhisi3>
 592:	a7 01       	movw	r20, r14
 594:	96 01       	movw	r18, r12
 596:	63 d2       	rcall	.+1222   	; 0xa5e <__udivmodsi4>
 598:	28 54       	subi	r18, 0x48	; 72
 59a:	34 4f       	sbci	r19, 0xF4	; 244
 59c:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 5a0:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//                       calc Windmill - PWM
		//////////////////////////////////////////////////////////////////////////
		if(rData[1] <= 0) {
 5a4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rData+0x1>
 5a8:	81 11       	cpse	r24, r1
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			OCR3A = 0;
 5ac:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 5b0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		} else {
			OCR3A =  (uint16_t)((((uint32_t)rData[1] * (uint32_t)(WM_ICR - WM_FASTEST_OCR))/100) + WM_FASTEST_OCR) - 1;
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5b6:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <rData+0x1>
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	a0 ea       	ldi	r26, 0xA0	; 160
 5be:	bf e0       	ldi	r27, 0x0F	; 15
 5c0:	70 d2       	rcall	.+1248   	; 0xaa2 <__umulhisi3>
 5c2:	24 e6       	ldi	r18, 0x64	; 100
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	49 d2       	rcall	.+1170   	; 0xa5e <__udivmodsi4>
 5cc:	21 56       	subi	r18, 0x61	; 97
 5ce:	30 4f       	sbci	r19, 0xF0	; 240
 5d0:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 5d4:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		// 3. in ISR if rising edge start Timer 4
		// 4. wait for falling edge on INT0
		// 5. in ISR if falling edge stop Timer 4
		// 6. calculate distance and set tData 0 and 1
		// 7. stop INT0 sensing and set TCNT4 = 0
		PORTJ |= (1 << US_TRIGGER_IN);
 5d8:	e5 e0       	ldi	r30, 0x05	; 5
 5da:	f1 e0       	ldi	r31, 0x01	; 1
 5dc:	80 81       	ld	r24, Z
 5de:	81 60       	ori	r24, 0x01	; 1
 5e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e2:	8a e6       	ldi	r24, 0x6A	; 106
 5e4:	8a 95       	dec	r24
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_IN);
 5ea:	80 81       	ld	r24, Z
 5ec:	8e 7f       	andi	r24, 0xFE	; 254
 5ee:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);			// activate INT0 interrupt 
 5f0:	8d b3       	in	r24, 0x1d	; 29
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 5fc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 600:	81 11       	cpse	r24, r1
 602:	fc cf       	rjmp	.-8      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
		};
		EIMSK &= ~(1 << INT0);			// deactivate INT0 interrupt
 604:	8d b3       	in	r24, 0x1d	; 29
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	8d bb       	out	0x1d, r24	; 29
		
		PORTJ |= (1 << US_TRIGGER_OUT);
 60a:	e5 e0       	ldi	r30, 0x05	; 5
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	80 81       	ld	r24, Z
 610:	82 60       	ori	r24, 0x02	; 2
 612:	80 83       	st	Z, r24
 614:	8a e6       	ldi	r24, 0x6A	; 106
 616:	8a 95       	dec	r24
 618:	f1 f7       	brne	.-4      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_OUT);
 61c:	80 81       	ld	r24, Z
 61e:	8d 7f       	andi	r24, 0xFD	; 253
 620:	80 83       	st	Z, r24
		EIMSK |= (1 << INT1);			// activate INT1 interrupt 
 622:	8d b3       	in	r24, 0x1d	; 29
 624:	82 60       	ori	r24, 0x02	; 2
 626:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 62e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 632:	81 11       	cpse	r24, r1
 634:	fc cf       	rjmp	.-8      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
		};
		EIMSK &= ~(1 << INT1);			// deactivate INT1 interrupt 
 636:	8d b3       	in	r24, 0x1d	; 29
 638:	8d 7f       	andi	r24, 0xFD	; 253
 63a:	8d bb       	out	0x1d, r24	; 29
		
		
		
		TCCR5B |= (1 << CS50) | (1 << CS51);	// start LED Timer	
 63c:	e1 e2       	ldi	r30, 0x21	; 33
 63e:	f1 e0       	ldi	r31, 0x01	; 1
 640:	80 81       	ld	r24, Z
 642:	83 60       	ori	r24, 0x03	; 3
 644:	80 83       	st	Z, r24
		EIMSK |= (1 << INT2);					// enable !SS interupt when !SS is activated (falling edge)
 646:	8d b3       	in	r24, 0x1d	; 29
 648:	84 60       	ori	r24, 0x04	; 4
 64a:	8d bb       	out	0x1d, r24	; 29
		PORTB &= ~(1 << LED_WindMill);			// turn out WindMill flash LED
 64c:	85 b1       	in	r24, 0x05	; 5
 64e:	8f 7e       	andi	r24, 0xEF	; 239
 650:	85 b9       	out	0x05, r24	; 5
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	86 30       	cpi	r24, 0x06	; 6
 656:	08 f0       	brcs	.+2      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 658:	20 cf       	rjmp	.-448    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
					
			// Write 1st byte into register
			SPDR = tData[idx];
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	f9 01       	movw	r30, r18
 660:	e0 50       	subi	r30, 0x00	; 0
 662:	fe 4f       	sbci	r31, 0xFE	; 254
 664:	90 81       	ld	r25, Z
 666:	9e bd       	out	0x2e, r25	; 46
					
			// Wait for transmission
			while(!(SPSR & (1<<SPIF)));
 668:	0d b4       	in	r0, 0x2d	; 45
 66a:	07 fe       	sbrs	r0, 7
 66c:	fd cf       	rjmp	.-6      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
					
			// Because only the first 2 bytes are real data => check if its the 1st or 2nd byte
			if (idx < 2) {
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	50 f4       	brcc	.+20     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
				// Read register
				rData[idx] = SPDR;
 672:	9e b5       	in	r25, 0x2e	; 46
 674:	f9 01       	movw	r30, r18
 676:	e8 5f       	subi	r30, 0xF8	; 248
 678:	fd 4f       	sbci	r31, 0xFD	; 253
 67a:	90 83       	st	Z, r25
				tData[idx + 4] = rData[idx];	// to send values back next time transmitting
 67c:	90 81       	ld	r25, Z
 67e:	f9 01       	movw	r30, r18
 680:	ec 5f       	subi	r30, 0xFC	; 252
 682:	fd 4f       	sbci	r31, 0xFD	; 253
 684:	90 83       	st	Z, r25
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 686:	8f 5f       	subi	r24, 0xFF	; 255
 688:	e5 cf       	rjmp	.-54     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>

0000068a <__subsf3>:
 68a:	50 58       	subi	r21, 0x80	; 128

0000068c <__addsf3>:
 68c:	bb 27       	eor	r27, r27
 68e:	aa 27       	eor	r26, r26
 690:	0e d0       	rcall	.+28     	; 0x6ae <__addsf3x>
 692:	48 c1       	rjmp	.+656    	; 0x924 <__fp_round>
 694:	39 d1       	rcall	.+626    	; 0x908 <__fp_pscA>
 696:	30 f0       	brcs	.+12     	; 0x6a4 <__addsf3+0x18>
 698:	3e d1       	rcall	.+636    	; 0x916 <__fp_pscB>
 69a:	20 f0       	brcs	.+8      	; 0x6a4 <__addsf3+0x18>
 69c:	31 f4       	brne	.+12     	; 0x6aa <__addsf3+0x1e>
 69e:	9f 3f       	cpi	r25, 0xFF	; 255
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <__addsf3+0x1a>
 6a2:	1e f4       	brtc	.+6      	; 0x6aa <__addsf3+0x1e>
 6a4:	2e c1       	rjmp	.+604    	; 0x902 <__fp_nan>
 6a6:	0e f4       	brtc	.+2      	; 0x6aa <__addsf3+0x1e>
 6a8:	e0 95       	com	r30
 6aa:	e7 fb       	bst	r30, 7
 6ac:	24 c1       	rjmp	.+584    	; 0x8f6 <__fp_inf>

000006ae <__addsf3x>:
 6ae:	e9 2f       	mov	r30, r25
 6b0:	4a d1       	rcall	.+660    	; 0x946 <__fp_split3>
 6b2:	80 f3       	brcs	.-32     	; 0x694 <__addsf3+0x8>
 6b4:	ba 17       	cp	r27, r26
 6b6:	62 07       	cpc	r22, r18
 6b8:	73 07       	cpc	r23, r19
 6ba:	84 07       	cpc	r24, r20
 6bc:	95 07       	cpc	r25, r21
 6be:	18 f0       	brcs	.+6      	; 0x6c6 <__addsf3x+0x18>
 6c0:	71 f4       	brne	.+28     	; 0x6de <__addsf3x+0x30>
 6c2:	9e f5       	brtc	.+102    	; 0x72a <__addsf3x+0x7c>
 6c4:	62 c1       	rjmp	.+708    	; 0x98a <__fp_zero>
 6c6:	0e f4       	brtc	.+2      	; 0x6ca <__addsf3x+0x1c>
 6c8:	e0 95       	com	r30
 6ca:	0b 2e       	mov	r0, r27
 6cc:	ba 2f       	mov	r27, r26
 6ce:	a0 2d       	mov	r26, r0
 6d0:	0b 01       	movw	r0, r22
 6d2:	b9 01       	movw	r22, r18
 6d4:	90 01       	movw	r18, r0
 6d6:	0c 01       	movw	r0, r24
 6d8:	ca 01       	movw	r24, r20
 6da:	a0 01       	movw	r20, r0
 6dc:	11 24       	eor	r1, r1
 6de:	ff 27       	eor	r31, r31
 6e0:	59 1b       	sub	r21, r25
 6e2:	99 f0       	breq	.+38     	; 0x70a <__addsf3x+0x5c>
 6e4:	59 3f       	cpi	r21, 0xF9	; 249
 6e6:	50 f4       	brcc	.+20     	; 0x6fc <__addsf3x+0x4e>
 6e8:	50 3e       	cpi	r21, 0xE0	; 224
 6ea:	68 f1       	brcs	.+90     	; 0x746 <__addsf3x+0x98>
 6ec:	1a 16       	cp	r1, r26
 6ee:	f0 40       	sbci	r31, 0x00	; 0
 6f0:	a2 2f       	mov	r26, r18
 6f2:	23 2f       	mov	r18, r19
 6f4:	34 2f       	mov	r19, r20
 6f6:	44 27       	eor	r20, r20
 6f8:	58 5f       	subi	r21, 0xF8	; 248
 6fa:	f3 cf       	rjmp	.-26     	; 0x6e2 <__addsf3x+0x34>
 6fc:	46 95       	lsr	r20
 6fe:	37 95       	ror	r19
 700:	27 95       	ror	r18
 702:	a7 95       	ror	r26
 704:	f0 40       	sbci	r31, 0x00	; 0
 706:	53 95       	inc	r21
 708:	c9 f7       	brne	.-14     	; 0x6fc <__addsf3x+0x4e>
 70a:	7e f4       	brtc	.+30     	; 0x72a <__addsf3x+0x7c>
 70c:	1f 16       	cp	r1, r31
 70e:	ba 0b       	sbc	r27, r26
 710:	62 0b       	sbc	r22, r18
 712:	73 0b       	sbc	r23, r19
 714:	84 0b       	sbc	r24, r20
 716:	ba f0       	brmi	.+46     	; 0x746 <__addsf3x+0x98>
 718:	91 50       	subi	r25, 0x01	; 1
 71a:	a1 f0       	breq	.+40     	; 0x744 <__addsf3x+0x96>
 71c:	ff 0f       	add	r31, r31
 71e:	bb 1f       	adc	r27, r27
 720:	66 1f       	adc	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	c2 f7       	brpl	.-16     	; 0x718 <__addsf3x+0x6a>
 728:	0e c0       	rjmp	.+28     	; 0x746 <__addsf3x+0x98>
 72a:	ba 0f       	add	r27, r26
 72c:	62 1f       	adc	r22, r18
 72e:	73 1f       	adc	r23, r19
 730:	84 1f       	adc	r24, r20
 732:	48 f4       	brcc	.+18     	; 0x746 <__addsf3x+0x98>
 734:	87 95       	ror	r24
 736:	77 95       	ror	r23
 738:	67 95       	ror	r22
 73a:	b7 95       	ror	r27
 73c:	f7 95       	ror	r31
 73e:	9e 3f       	cpi	r25, 0xFE	; 254
 740:	08 f0       	brcs	.+2      	; 0x744 <__addsf3x+0x96>
 742:	b3 cf       	rjmp	.-154    	; 0x6aa <__addsf3+0x1e>
 744:	93 95       	inc	r25
 746:	88 0f       	add	r24, r24
 748:	08 f0       	brcs	.+2      	; 0x74c <__addsf3x+0x9e>
 74a:	99 27       	eor	r25, r25
 74c:	ee 0f       	add	r30, r30
 74e:	97 95       	ror	r25
 750:	87 95       	ror	r24
 752:	08 95       	ret

00000754 <__divsf3>:
 754:	0c d0       	rcall	.+24     	; 0x76e <__divsf3x>
 756:	e6 c0       	rjmp	.+460    	; 0x924 <__fp_round>
 758:	de d0       	rcall	.+444    	; 0x916 <__fp_pscB>
 75a:	40 f0       	brcs	.+16     	; 0x76c <__divsf3+0x18>
 75c:	d5 d0       	rcall	.+426    	; 0x908 <__fp_pscA>
 75e:	30 f0       	brcs	.+12     	; 0x76c <__divsf3+0x18>
 760:	21 f4       	brne	.+8      	; 0x76a <__divsf3+0x16>
 762:	5f 3f       	cpi	r21, 0xFF	; 255
 764:	19 f0       	breq	.+6      	; 0x76c <__divsf3+0x18>
 766:	c7 c0       	rjmp	.+398    	; 0x8f6 <__fp_inf>
 768:	51 11       	cpse	r21, r1
 76a:	10 c1       	rjmp	.+544    	; 0x98c <__fp_szero>
 76c:	ca c0       	rjmp	.+404    	; 0x902 <__fp_nan>

0000076e <__divsf3x>:
 76e:	eb d0       	rcall	.+470    	; 0x946 <__fp_split3>
 770:	98 f3       	brcs	.-26     	; 0x758 <__divsf3+0x4>

00000772 <__divsf3_pse>:
 772:	99 23       	and	r25, r25
 774:	c9 f3       	breq	.-14     	; 0x768 <__divsf3+0x14>
 776:	55 23       	and	r21, r21
 778:	b1 f3       	breq	.-20     	; 0x766 <__divsf3+0x12>
 77a:	95 1b       	sub	r25, r21
 77c:	55 0b       	sbc	r21, r21
 77e:	bb 27       	eor	r27, r27
 780:	aa 27       	eor	r26, r26
 782:	62 17       	cp	r22, r18
 784:	73 07       	cpc	r23, r19
 786:	84 07       	cpc	r24, r20
 788:	38 f0       	brcs	.+14     	; 0x798 <__divsf3_pse+0x26>
 78a:	9f 5f       	subi	r25, 0xFF	; 255
 78c:	5f 4f       	sbci	r21, 0xFF	; 255
 78e:	22 0f       	add	r18, r18
 790:	33 1f       	adc	r19, r19
 792:	44 1f       	adc	r20, r20
 794:	aa 1f       	adc	r26, r26
 796:	a9 f3       	breq	.-22     	; 0x782 <__divsf3_pse+0x10>
 798:	33 d0       	rcall	.+102    	; 0x800 <__divsf3_pse+0x8e>
 79a:	0e 2e       	mov	r0, r30
 79c:	3a f0       	brmi	.+14     	; 0x7ac <__divsf3_pse+0x3a>
 79e:	e0 e8       	ldi	r30, 0x80	; 128
 7a0:	30 d0       	rcall	.+96     	; 0x802 <__divsf3_pse+0x90>
 7a2:	91 50       	subi	r25, 0x01	; 1
 7a4:	50 40       	sbci	r21, 0x00	; 0
 7a6:	e6 95       	lsr	r30
 7a8:	00 1c       	adc	r0, r0
 7aa:	ca f7       	brpl	.-14     	; 0x79e <__divsf3_pse+0x2c>
 7ac:	29 d0       	rcall	.+82     	; 0x800 <__divsf3_pse+0x8e>
 7ae:	fe 2f       	mov	r31, r30
 7b0:	27 d0       	rcall	.+78     	; 0x800 <__divsf3_pse+0x8e>
 7b2:	66 0f       	add	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	bb 1f       	adc	r27, r27
 7ba:	26 17       	cp	r18, r22
 7bc:	37 07       	cpc	r19, r23
 7be:	48 07       	cpc	r20, r24
 7c0:	ab 07       	cpc	r26, r27
 7c2:	b0 e8       	ldi	r27, 0x80	; 128
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <__divsf3_pse+0x56>
 7c6:	bb 0b       	sbc	r27, r27
 7c8:	80 2d       	mov	r24, r0
 7ca:	bf 01       	movw	r22, r30
 7cc:	ff 27       	eor	r31, r31
 7ce:	93 58       	subi	r25, 0x83	; 131
 7d0:	5f 4f       	sbci	r21, 0xFF	; 255
 7d2:	2a f0       	brmi	.+10     	; 0x7de <__divsf3_pse+0x6c>
 7d4:	9e 3f       	cpi	r25, 0xFE	; 254
 7d6:	51 05       	cpc	r21, r1
 7d8:	68 f0       	brcs	.+26     	; 0x7f4 <__divsf3_pse+0x82>
 7da:	8d c0       	rjmp	.+282    	; 0x8f6 <__fp_inf>
 7dc:	d7 c0       	rjmp	.+430    	; 0x98c <__fp_szero>
 7de:	5f 3f       	cpi	r21, 0xFF	; 255
 7e0:	ec f3       	brlt	.-6      	; 0x7dc <__divsf3_pse+0x6a>
 7e2:	98 3e       	cpi	r25, 0xE8	; 232
 7e4:	dc f3       	brlt	.-10     	; 0x7dc <__divsf3_pse+0x6a>
 7e6:	86 95       	lsr	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b7 95       	ror	r27
 7ee:	f7 95       	ror	r31
 7f0:	9f 5f       	subi	r25, 0xFF	; 255
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__divsf3_pse+0x74>
 7f4:	88 0f       	add	r24, r24
 7f6:	91 1d       	adc	r25, r1
 7f8:	96 95       	lsr	r25
 7fa:	87 95       	ror	r24
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret
 800:	e1 e0       	ldi	r30, 0x01	; 1
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	bb 1f       	adc	r27, r27
 80a:	62 17       	cp	r22, r18
 80c:	73 07       	cpc	r23, r19
 80e:	84 07       	cpc	r24, r20
 810:	ba 07       	cpc	r27, r26
 812:	20 f0       	brcs	.+8      	; 0x81c <__divsf3_pse+0xaa>
 814:	62 1b       	sub	r22, r18
 816:	73 0b       	sbc	r23, r19
 818:	84 0b       	sbc	r24, r20
 81a:	ba 0b       	sbc	r27, r26
 81c:	ee 1f       	adc	r30, r30
 81e:	88 f7       	brcc	.-30     	; 0x802 <__divsf3_pse+0x90>
 820:	e0 95       	com	r30
 822:	08 95       	ret

00000824 <__fixunssfsi>:
 824:	98 d0       	rcall	.+304    	; 0x956 <__fp_splitA>
 826:	88 f0       	brcs	.+34     	; 0x84a <__fixunssfsi+0x26>
 828:	9f 57       	subi	r25, 0x7F	; 127
 82a:	90 f0       	brcs	.+36     	; 0x850 <__fixunssfsi+0x2c>
 82c:	b9 2f       	mov	r27, r25
 82e:	99 27       	eor	r25, r25
 830:	b7 51       	subi	r27, 0x17	; 23
 832:	a0 f0       	brcs	.+40     	; 0x85c <__fixunssfsi+0x38>
 834:	d1 f0       	breq	.+52     	; 0x86a <__fixunssfsi+0x46>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	1a f0       	brmi	.+6      	; 0x846 <__fixunssfsi+0x22>
 840:	ba 95       	dec	r27
 842:	c9 f7       	brne	.-14     	; 0x836 <__fixunssfsi+0x12>
 844:	12 c0       	rjmp	.+36     	; 0x86a <__fixunssfsi+0x46>
 846:	b1 30       	cpi	r27, 0x01	; 1
 848:	81 f0       	breq	.+32     	; 0x86a <__fixunssfsi+0x46>
 84a:	9f d0       	rcall	.+318    	; 0x98a <__fp_zero>
 84c:	b1 e0       	ldi	r27, 0x01	; 1
 84e:	08 95       	ret
 850:	9c c0       	rjmp	.+312    	; 0x98a <__fp_zero>
 852:	67 2f       	mov	r22, r23
 854:	78 2f       	mov	r23, r24
 856:	88 27       	eor	r24, r24
 858:	b8 5f       	subi	r27, 0xF8	; 248
 85a:	39 f0       	breq	.+14     	; 0x86a <__fixunssfsi+0x46>
 85c:	b9 3f       	cpi	r27, 0xF9	; 249
 85e:	cc f3       	brlt	.-14     	; 0x852 <__fixunssfsi+0x2e>
 860:	86 95       	lsr	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b3 95       	inc	r27
 868:	d9 f7       	brne	.-10     	; 0x860 <__fixunssfsi+0x3c>
 86a:	3e f4       	brtc	.+14     	; 0x87a <__fixunssfsi+0x56>
 86c:	90 95       	com	r25
 86e:	80 95       	com	r24
 870:	70 95       	com	r23
 872:	61 95       	neg	r22
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <__floatunsisf>:
 87c:	e8 94       	clt
 87e:	09 c0       	rjmp	.+18     	; 0x892 <__floatsisf+0x12>

00000880 <__floatsisf>:
 880:	97 fb       	bst	r25, 7
 882:	3e f4       	brtc	.+14     	; 0x892 <__floatsisf+0x12>
 884:	90 95       	com	r25
 886:	80 95       	com	r24
 888:	70 95       	com	r23
 88a:	61 95       	neg	r22
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	99 23       	and	r25, r25
 894:	a9 f0       	breq	.+42     	; 0x8c0 <__floatsisf+0x40>
 896:	f9 2f       	mov	r31, r25
 898:	96 e9       	ldi	r25, 0x96	; 150
 89a:	bb 27       	eor	r27, r27
 89c:	93 95       	inc	r25
 89e:	f6 95       	lsr	r31
 8a0:	87 95       	ror	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b7 95       	ror	r27
 8a8:	f1 11       	cpse	r31, r1
 8aa:	f8 cf       	rjmp	.-16     	; 0x89c <__floatsisf+0x1c>
 8ac:	fa f4       	brpl	.+62     	; 0x8ec <__floatsisf+0x6c>
 8ae:	bb 0f       	add	r27, r27
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <__floatsisf+0x36>
 8b2:	60 ff       	sbrs	r22, 0
 8b4:	1b c0       	rjmp	.+54     	; 0x8ec <__floatsisf+0x6c>
 8b6:	6f 5f       	subi	r22, 0xFF	; 255
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	16 c0       	rjmp	.+44     	; 0x8ec <__floatsisf+0x6c>
 8c0:	88 23       	and	r24, r24
 8c2:	11 f0       	breq	.+4      	; 0x8c8 <__floatsisf+0x48>
 8c4:	96 e9       	ldi	r25, 0x96	; 150
 8c6:	11 c0       	rjmp	.+34     	; 0x8ea <__floatsisf+0x6a>
 8c8:	77 23       	and	r23, r23
 8ca:	21 f0       	breq	.+8      	; 0x8d4 <__floatsisf+0x54>
 8cc:	9e e8       	ldi	r25, 0x8E	; 142
 8ce:	87 2f       	mov	r24, r23
 8d0:	76 2f       	mov	r23, r22
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <__floatsisf+0x5e>
 8d4:	66 23       	and	r22, r22
 8d6:	71 f0       	breq	.+28     	; 0x8f4 <__floatsisf+0x74>
 8d8:	96 e8       	ldi	r25, 0x86	; 134
 8da:	86 2f       	mov	r24, r22
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	2a f0       	brmi	.+10     	; 0x8ec <__floatsisf+0x6c>
 8e2:	9a 95       	dec	r25
 8e4:	66 0f       	add	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	da f7       	brpl	.-10     	; 0x8e2 <__floatsisf+0x62>
 8ec:	88 0f       	add	r24, r24
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	97 f9       	bld	r25, 7
 8f4:	08 95       	ret

000008f6 <__fp_inf>:
 8f6:	97 f9       	bld	r25, 7
 8f8:	9f 67       	ori	r25, 0x7F	; 127
 8fa:	80 e8       	ldi	r24, 0x80	; 128
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	08 95       	ret

00000902 <__fp_nan>:
 902:	9f ef       	ldi	r25, 0xFF	; 255
 904:	80 ec       	ldi	r24, 0xC0	; 192
 906:	08 95       	ret

00000908 <__fp_pscA>:
 908:	00 24       	eor	r0, r0
 90a:	0a 94       	dec	r0
 90c:	16 16       	cp	r1, r22
 90e:	17 06       	cpc	r1, r23
 910:	18 06       	cpc	r1, r24
 912:	09 06       	cpc	r0, r25
 914:	08 95       	ret

00000916 <__fp_pscB>:
 916:	00 24       	eor	r0, r0
 918:	0a 94       	dec	r0
 91a:	12 16       	cp	r1, r18
 91c:	13 06       	cpc	r1, r19
 91e:	14 06       	cpc	r1, r20
 920:	05 06       	cpc	r0, r21
 922:	08 95       	ret

00000924 <__fp_round>:
 924:	09 2e       	mov	r0, r25
 926:	03 94       	inc	r0
 928:	00 0c       	add	r0, r0
 92a:	11 f4       	brne	.+4      	; 0x930 <__fp_round+0xc>
 92c:	88 23       	and	r24, r24
 92e:	52 f0       	brmi	.+20     	; 0x944 <__fp_round+0x20>
 930:	bb 0f       	add	r27, r27
 932:	40 f4       	brcc	.+16     	; 0x944 <__fp_round+0x20>
 934:	bf 2b       	or	r27, r31
 936:	11 f4       	brne	.+4      	; 0x93c <__fp_round+0x18>
 938:	60 ff       	sbrs	r22, 0
 93a:	04 c0       	rjmp	.+8      	; 0x944 <__fp_round+0x20>
 93c:	6f 5f       	subi	r22, 0xFF	; 255
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	08 95       	ret

00000946 <__fp_split3>:
 946:	57 fd       	sbrc	r21, 7
 948:	90 58       	subi	r25, 0x80	; 128
 94a:	44 0f       	add	r20, r20
 94c:	55 1f       	adc	r21, r21
 94e:	59 f0       	breq	.+22     	; 0x966 <__fp_splitA+0x10>
 950:	5f 3f       	cpi	r21, 0xFF	; 255
 952:	71 f0       	breq	.+28     	; 0x970 <__fp_splitA+0x1a>
 954:	47 95       	ror	r20

00000956 <__fp_splitA>:
 956:	88 0f       	add	r24, r24
 958:	97 fb       	bst	r25, 7
 95a:	99 1f       	adc	r25, r25
 95c:	61 f0       	breq	.+24     	; 0x976 <__fp_splitA+0x20>
 95e:	9f 3f       	cpi	r25, 0xFF	; 255
 960:	79 f0       	breq	.+30     	; 0x980 <__fp_splitA+0x2a>
 962:	87 95       	ror	r24
 964:	08 95       	ret
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	14 06       	cpc	r1, r20
 96c:	55 1f       	adc	r21, r21
 96e:	f2 cf       	rjmp	.-28     	; 0x954 <__fp_split3+0xe>
 970:	46 95       	lsr	r20
 972:	f1 df       	rcall	.-30     	; 0x956 <__fp_splitA>
 974:	08 c0       	rjmp	.+16     	; 0x986 <__fp_splitA+0x30>
 976:	16 16       	cp	r1, r22
 978:	17 06       	cpc	r1, r23
 97a:	18 06       	cpc	r1, r24
 97c:	99 1f       	adc	r25, r25
 97e:	f1 cf       	rjmp	.-30     	; 0x962 <__fp_splitA+0xc>
 980:	86 95       	lsr	r24
 982:	71 05       	cpc	r23, r1
 984:	61 05       	cpc	r22, r1
 986:	08 94       	sec
 988:	08 95       	ret

0000098a <__fp_zero>:
 98a:	e8 94       	clt

0000098c <__fp_szero>:
 98c:	bb 27       	eor	r27, r27
 98e:	66 27       	eor	r22, r22
 990:	77 27       	eor	r23, r23
 992:	cb 01       	movw	r24, r22
 994:	97 f9       	bld	r25, 7
 996:	08 95       	ret

00000998 <__mulsf3>:
 998:	0b d0       	rcall	.+22     	; 0x9b0 <__mulsf3x>
 99a:	c4 cf       	rjmp	.-120    	; 0x924 <__fp_round>
 99c:	b5 df       	rcall	.-150    	; 0x908 <__fp_pscA>
 99e:	28 f0       	brcs	.+10     	; 0x9aa <__mulsf3+0x12>
 9a0:	ba df       	rcall	.-140    	; 0x916 <__fp_pscB>
 9a2:	18 f0       	brcs	.+6      	; 0x9aa <__mulsf3+0x12>
 9a4:	95 23       	and	r25, r21
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__mulsf3+0x12>
 9a8:	a6 cf       	rjmp	.-180    	; 0x8f6 <__fp_inf>
 9aa:	ab cf       	rjmp	.-170    	; 0x902 <__fp_nan>
 9ac:	11 24       	eor	r1, r1
 9ae:	ee cf       	rjmp	.-36     	; 0x98c <__fp_szero>

000009b0 <__mulsf3x>:
 9b0:	ca df       	rcall	.-108    	; 0x946 <__fp_split3>
 9b2:	a0 f3       	brcs	.-24     	; 0x99c <__mulsf3+0x4>

000009b4 <__mulsf3_pse>:
 9b4:	95 9f       	mul	r25, r21
 9b6:	d1 f3       	breq	.-12     	; 0x9ac <__mulsf3+0x14>
 9b8:	95 0f       	add	r25, r21
 9ba:	50 e0       	ldi	r21, 0x00	; 0
 9bc:	55 1f       	adc	r21, r21
 9be:	62 9f       	mul	r22, r18
 9c0:	f0 01       	movw	r30, r0
 9c2:	72 9f       	mul	r23, r18
 9c4:	bb 27       	eor	r27, r27
 9c6:	f0 0d       	add	r31, r0
 9c8:	b1 1d       	adc	r27, r1
 9ca:	63 9f       	mul	r22, r19
 9cc:	aa 27       	eor	r26, r26
 9ce:	f0 0d       	add	r31, r0
 9d0:	b1 1d       	adc	r27, r1
 9d2:	aa 1f       	adc	r26, r26
 9d4:	64 9f       	mul	r22, r20
 9d6:	66 27       	eor	r22, r22
 9d8:	b0 0d       	add	r27, r0
 9da:	a1 1d       	adc	r26, r1
 9dc:	66 1f       	adc	r22, r22
 9de:	82 9f       	mul	r24, r18
 9e0:	22 27       	eor	r18, r18
 9e2:	b0 0d       	add	r27, r0
 9e4:	a1 1d       	adc	r26, r1
 9e6:	62 1f       	adc	r22, r18
 9e8:	73 9f       	mul	r23, r19
 9ea:	b0 0d       	add	r27, r0
 9ec:	a1 1d       	adc	r26, r1
 9ee:	62 1f       	adc	r22, r18
 9f0:	83 9f       	mul	r24, r19
 9f2:	a0 0d       	add	r26, r0
 9f4:	61 1d       	adc	r22, r1
 9f6:	22 1f       	adc	r18, r18
 9f8:	74 9f       	mul	r23, r20
 9fa:	33 27       	eor	r19, r19
 9fc:	a0 0d       	add	r26, r0
 9fe:	61 1d       	adc	r22, r1
 a00:	23 1f       	adc	r18, r19
 a02:	84 9f       	mul	r24, r20
 a04:	60 0d       	add	r22, r0
 a06:	21 1d       	adc	r18, r1
 a08:	82 2f       	mov	r24, r18
 a0a:	76 2f       	mov	r23, r22
 a0c:	6a 2f       	mov	r22, r26
 a0e:	11 24       	eor	r1, r1
 a10:	9f 57       	subi	r25, 0x7F	; 127
 a12:	50 40       	sbci	r21, 0x00	; 0
 a14:	8a f0       	brmi	.+34     	; 0xa38 <__mulsf3_pse+0x84>
 a16:	e1 f0       	breq	.+56     	; 0xa50 <__mulsf3_pse+0x9c>
 a18:	88 23       	and	r24, r24
 a1a:	4a f0       	brmi	.+18     	; 0xa2e <__mulsf3_pse+0x7a>
 a1c:	ee 0f       	add	r30, r30
 a1e:	ff 1f       	adc	r31, r31
 a20:	bb 1f       	adc	r27, r27
 a22:	66 1f       	adc	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	91 50       	subi	r25, 0x01	; 1
 a2a:	50 40       	sbci	r21, 0x00	; 0
 a2c:	a9 f7       	brne	.-22     	; 0xa18 <__mulsf3_pse+0x64>
 a2e:	9e 3f       	cpi	r25, 0xFE	; 254
 a30:	51 05       	cpc	r21, r1
 a32:	70 f0       	brcs	.+28     	; 0xa50 <__mulsf3_pse+0x9c>
 a34:	60 cf       	rjmp	.-320    	; 0x8f6 <__fp_inf>
 a36:	aa cf       	rjmp	.-172    	; 0x98c <__fp_szero>
 a38:	5f 3f       	cpi	r21, 0xFF	; 255
 a3a:	ec f3       	brlt	.-6      	; 0xa36 <__mulsf3_pse+0x82>
 a3c:	98 3e       	cpi	r25, 0xE8	; 232
 a3e:	dc f3       	brlt	.-10     	; 0xa36 <__mulsf3_pse+0x82>
 a40:	86 95       	lsr	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	b7 95       	ror	r27
 a48:	f7 95       	ror	r31
 a4a:	e7 95       	ror	r30
 a4c:	9f 5f       	subi	r25, 0xFF	; 255
 a4e:	c1 f7       	brne	.-16     	; 0xa40 <__mulsf3_pse+0x8c>
 a50:	fe 2b       	or	r31, r30
 a52:	88 0f       	add	r24, r24
 a54:	91 1d       	adc	r25, r1
 a56:	96 95       	lsr	r25
 a58:	87 95       	ror	r24
 a5a:	97 f9       	bld	r25, 7
 a5c:	08 95       	ret

00000a5e <__udivmodsi4>:
 a5e:	a1 e2       	ldi	r26, 0x21	; 33
 a60:	1a 2e       	mov	r1, r26
 a62:	aa 1b       	sub	r26, r26
 a64:	bb 1b       	sub	r27, r27
 a66:	fd 01       	movw	r30, r26
 a68:	0d c0       	rjmp	.+26     	; 0xa84 <__udivmodsi4_ep>

00000a6a <__udivmodsi4_loop>:
 a6a:	aa 1f       	adc	r26, r26
 a6c:	bb 1f       	adc	r27, r27
 a6e:	ee 1f       	adc	r30, r30
 a70:	ff 1f       	adc	r31, r31
 a72:	a2 17       	cp	r26, r18
 a74:	b3 07       	cpc	r27, r19
 a76:	e4 07       	cpc	r30, r20
 a78:	f5 07       	cpc	r31, r21
 a7a:	20 f0       	brcs	.+8      	; 0xa84 <__udivmodsi4_ep>
 a7c:	a2 1b       	sub	r26, r18
 a7e:	b3 0b       	sbc	r27, r19
 a80:	e4 0b       	sbc	r30, r20
 a82:	f5 0b       	sbc	r31, r21

00000a84 <__udivmodsi4_ep>:
 a84:	66 1f       	adc	r22, r22
 a86:	77 1f       	adc	r23, r23
 a88:	88 1f       	adc	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	1a 94       	dec	r1
 a8e:	69 f7       	brne	.-38     	; 0xa6a <__udivmodsi4_loop>
 a90:	60 95       	com	r22
 a92:	70 95       	com	r23
 a94:	80 95       	com	r24
 a96:	90 95       	com	r25
 a98:	9b 01       	movw	r18, r22
 a9a:	ac 01       	movw	r20, r24
 a9c:	bd 01       	movw	r22, r26
 a9e:	cf 01       	movw	r24, r30
 aa0:	08 95       	ret

00000aa2 <__umulhisi3>:
 aa2:	a2 9f       	mul	r26, r18
 aa4:	b0 01       	movw	r22, r0
 aa6:	b3 9f       	mul	r27, r19
 aa8:	c0 01       	movw	r24, r0
 aaa:	a3 9f       	mul	r26, r19
 aac:	70 0d       	add	r23, r0
 aae:	81 1d       	adc	r24, r1
 ab0:	11 24       	eor	r1, r1
 ab2:	91 1d       	adc	r25, r1
 ab4:	b2 9f       	mul	r27, r18
 ab6:	70 0d       	add	r23, r0
 ab8:	81 1d       	adc	r24, r1
 aba:	11 24       	eor	r1, r1
 abc:	91 1d       	adc	r25, r1
 abe:	08 95       	ret

00000ac0 <__usmulhisi3>:
 ac0:	f0 df       	rcall	.-32     	; 0xaa2 <__umulhisi3>

00000ac2 <__usmulhisi3_tail>:
 ac2:	b7 ff       	sbrs	r27, 7
 ac4:	08 95       	ret
 ac6:	82 1b       	sub	r24, r18
 ac8:	93 0b       	sbc	r25, r19
 aca:	08 95       	ret

00000acc <__muluhisi3>:
 acc:	ea df       	rcall	.-44     	; 0xaa2 <__umulhisi3>
 ace:	a5 9f       	mul	r26, r21
 ad0:	90 0d       	add	r25, r0
 ad2:	b4 9f       	mul	r27, r20
 ad4:	90 0d       	add	r25, r0
 ad6:	a4 9f       	mul	r26, r20
 ad8:	80 0d       	add	r24, r0
 ada:	91 1d       	adc	r25, r1
 adc:	11 24       	eor	r1, r1
 ade:	08 95       	ret

00000ae0 <__mulshisi3>:
 ae0:	b7 ff       	sbrs	r27, 7
 ae2:	f4 cf       	rjmp	.-24     	; 0xacc <__muluhisi3>

00000ae4 <__mulohisi3>:
 ae4:	f3 df       	rcall	.-26     	; 0xacc <__muluhisi3>
 ae6:	82 1b       	sub	r24, r18
 ae8:	93 0b       	sbc	r25, r19
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
