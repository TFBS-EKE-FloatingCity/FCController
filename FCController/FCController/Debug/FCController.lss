
FCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  0000111a  000011ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000111a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800234  00800234  000011e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000244c  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115b  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cca  00000000  00000000  000048db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  000055a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097d  00000000  00000000  00005998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013de  00000000  00000000  00006315  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000076f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	ae c0       	rjmp	.+348    	; 0x162 <__vector_1>
       6:	00 00       	nop
       8:	03 c1       	rjmp	.+518    	; 0x210 <__vector_2>
       a:	00 00       	nop
       c:	58 c1       	rjmp	.+688    	; 0x2be <__vector_3>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__vector_45>
      b6:	00 00       	nop
      b8:	1b c1       	rjmp	.+566    	; 0x2f0 <__vector_46>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e1       	ldi	r30, 0x1A	; 26
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 33       	cpi	r26, 0x34	; 52
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e3       	ldi	r26, 0x34	; 52
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 33       	cpi	r26, 0x3F	; 63
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	27 d1       	rcall	.+590    	; 0x36e <main>
     120:	fa c7       	rjmp	.+4084   	; 0x1116 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_45>:

#include <avr/interrupt.h>
#include "../general.h"

// stop Usonic measurement for it took too long
ISR(TIMER4_OVF_vect) {
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	0b b6       	in	r0, 0x3b	; 59
     130:	0f 92       	push	r0
     132:	8f 93       	push	r24
     134:	ef 93       	push	r30
     136:	ff 93       	push	r31
	TCCR4B &= ~(1 << CS40);		// stop timer
     138:	e1 ea       	ldi	r30, 0xA1	; 161
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	8e 7f       	andi	r24, 0xFE	; 254
     140:	80 83       	st	Z, r24
	TCNT4 = 0;					// reset timer value
     142:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     146:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	waiting = 0;
     14a:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <waiting>
}
     14e:	ff 91       	pop	r31
     150:	ef 91       	pop	r30
     152:	8f 91       	pop	r24
     154:	0f 90       	pop	r0
     156:	0b be       	out	0x3b, r0	; 59
     158:	0f 90       	pop	r0
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	0f 90       	pop	r0
     15e:	1f 90       	pop	r1
     160:	18 95       	reti

00000162 <__vector_1>:

// Usonic measurement (inside)
// gets called when the level on PD0 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT0_vect) {
     162:	1f 92       	push	r1
     164:	0f 92       	push	r0
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	0b b6       	in	r0, 0x3b	; 59
     16e:	0f 92       	push	r0
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	4f 93       	push	r20
     176:	5f 93       	push	r21
     178:	6f 93       	push	r22
     17a:	7f 93       	push	r23
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	af 93       	push	r26
     182:	bf 93       	push	r27
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ef 93       	push	r30
     18a:	ff 93       	push	r31
	if(PIND & (1 << PD0)) {		// rising edge
     18c:	48 9b       	sbis	0x09, 0	; 9
     18e:	06 c0       	rjmp	.+12     	; 0x19c <__vector_1+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
     190:	e1 ea       	ldi	r30, 0xA1	; 161
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	81 60       	ori	r24, 0x01	; 1
     198:	80 83       	st	Z, r24
     19a:	25 c0       	rjmp	.+74     	; 0x1e6 <__vector_1+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
     19c:	e1 ea       	ldi	r30, 0xA1	; 161
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	8e 7f       	andi	r24, 0xFE	; 254
     1a4:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
     1a6:	c4 ea       	ldi	r28, 0xA4	; 164
     1a8:	d0 e0       	ldi	r29, 0x00	; 0
     1aa:	28 81       	ld	r18, Y
     1ac:	39 81       	ldd	r19, Y+1	; 0x01
     1ae:	a7 e5       	ldi	r26, 0x57	; 87
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	59 d7       	rcall	.+3762   	; 0x1066 <__umulhisi3>
     1b4:	45 d6       	rcall	.+3210   	; 0xe40 <__floatunsisf>
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e8       	ldi	r20, 0x80	; 128
     1bc:	5d e3       	ldi	r21, 0x3D	; 61
     1be:	ce d6       	rcall	.+3484   	; 0xf5c <__mulsf3>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	4a ef       	ldi	r20, 0xFA	; 250
     1c6:	54 e4       	ldi	r21, 0x44	; 68
     1c8:	a7 d5       	rcall	.+2894   	; 0xd18 <__divsf3>
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	5f e3       	ldi	r21, 0x3F	; 63
     1d2:	3e d5       	rcall	.+2684   	; 0xc50 <__addsf3>
     1d4:	09 d6       	rcall	.+3090   	; 0xde8 <__fixunssfsi>
		tData[0] = (dist >> 8);
     1d6:	e4 e3       	ldi	r30, 0x34	; 52
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	70 83       	st	Z, r23
		tData[1] = dist;
     1dc:	61 83       	std	Z+1, r22	; 0x01
		TCNT4 = 0;
     1de:	19 82       	std	Y+1, r1	; 0x01
     1e0:	18 82       	st	Y, r1
		waiting = 0;
     1e2:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <waiting>
	}
}
     1e6:	ff 91       	pop	r31
     1e8:	ef 91       	pop	r30
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	bf 91       	pop	r27
     1f0:	af 91       	pop	r26
     1f2:	9f 91       	pop	r25
     1f4:	8f 91       	pop	r24
     1f6:	7f 91       	pop	r23
     1f8:	6f 91       	pop	r22
     1fa:	5f 91       	pop	r21
     1fc:	4f 91       	pop	r20
     1fe:	3f 91       	pop	r19
     200:	2f 91       	pop	r18
     202:	0f 90       	pop	r0
     204:	0b be       	out	0x3b, r0	; 59
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <__vector_2>:

// Usonic measurement (outside)
// gets called when the level on PD1 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT1_vect) {
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0b b6       	in	r0, 0x3b	; 59
     21c:	0f 92       	push	r0
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ef 93       	push	r30
     238:	ff 93       	push	r31
	if(PIND & (1 << PD1)) {		// rising edge
     23a:	49 9b       	sbis	0x09, 1	; 9
     23c:	06 c0       	rjmp	.+12     	; 0x24a <__vector_2+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
     23e:	e1 ea       	ldi	r30, 0xA1	; 161
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	81 60       	ori	r24, 0x01	; 1
     246:	80 83       	st	Z, r24
     248:	25 c0       	rjmp	.+74     	; 0x294 <__vector_2+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
     24a:	e1 ea       	ldi	r30, 0xA1	; 161
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	8e 7f       	andi	r24, 0xFE	; 254
     252:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
     254:	c4 ea       	ldi	r28, 0xA4	; 164
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	28 81       	ld	r18, Y
     25a:	39 81       	ldd	r19, Y+1	; 0x01
     25c:	a7 e5       	ldi	r26, 0x57	; 87
     25e:	b1 e0       	ldi	r27, 0x01	; 1
     260:	02 d7       	rcall	.+3588   	; 0x1066 <__umulhisi3>
     262:	ee d5       	rcall	.+3036   	; 0xe40 <__floatunsisf>
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e8       	ldi	r20, 0x80	; 128
     26a:	5d e3       	ldi	r21, 0x3D	; 61
     26c:	77 d6       	rcall	.+3310   	; 0xf5c <__mulsf3>
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	4a ef       	ldi	r20, 0xFA	; 250
     274:	54 e4       	ldi	r21, 0x44	; 68
     276:	50 d5       	rcall	.+2720   	; 0xd18 <__divsf3>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	5f e3       	ldi	r21, 0x3F	; 63
     280:	e7 d4       	rcall	.+2510   	; 0xc50 <__addsf3>
     282:	b2 d5       	rcall	.+2916   	; 0xde8 <__fixunssfsi>
		tData[2] = (dist >> 8);
     284:	e4 e3       	ldi	r30, 0x34	; 52
     286:	f2 e0       	ldi	r31, 0x02	; 2
     288:	72 83       	std	Z+2, r23	; 0x02
		tData[3] = dist;
     28a:	63 83       	std	Z+3, r22	; 0x03
		TCNT4 = 0;	
     28c:	19 82       	std	Y+1, r1	; 0x01
     28e:	18 82       	st	Y, r1
		waiting = 0;
     290:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <waiting>
	}
}
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	bf 91       	pop	r27
     29e:	af 91       	pop	r26
     2a0:	9f 91       	pop	r25
     2a2:	8f 91       	pop	r24
     2a4:	7f 91       	pop	r23
     2a6:	6f 91       	pop	r22
     2a8:	5f 91       	pop	r21
     2aa:	4f 91       	pop	r20
     2ac:	3f 91       	pop	r19
     2ae:	2f 91       	pop	r18
     2b0:	0f 90       	pop	r0
     2b2:	0b be       	out	0x3b, r0	; 59
     2b4:	0f 90       	pop	r0
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	0f 90       	pop	r0
     2ba:	1f 90       	pop	r1
     2bc:	18 95       	reti

000002be <__vector_3>:

// !SS falling edge 
// PIN PD2 must be connected to !SS pin
// stops the LED Timer because a transmission starts
ISR(INT2_vect) {
     2be:	1f 92       	push	r1
     2c0:	0f 92       	push	r0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	0f 92       	push	r0
     2c6:	11 24       	eor	r1, r1
     2c8:	0b b6       	in	r0, 0x3b	; 59
     2ca:	0f 92       	push	r0
     2cc:	8f 93       	push	r24
     2ce:	ef 93       	push	r30
     2d0:	ff 93       	push	r31
	TCCR5B &= ~((1 << CS50) | (1 << CS51));		// stop LED Timer
     2d2:	e1 e2       	ldi	r30, 0x21	; 33
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	8c 7f       	andi	r24, 0xFC	; 252
     2da:	80 83       	st	Z, r24
}
     2dc:	ff 91       	pop	r31
     2de:	ef 91       	pop	r30
     2e0:	8f 91       	pop	r24
     2e2:	0f 90       	pop	r0
     2e4:	0b be       	out	0x3b, r0	; 59
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <__vector_46>:

// LEDs
// when ICR is reached the next 16Bit LED value is set
ISR(TIMER5_CAPT_vect) {
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	2f 93       	push	r18
     2fc:	8f 93       	push	r24
     2fe:	9f 93       	push	r25
	leds <<= 1;
     300:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <leds>
     304:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <leds+0x1>
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <leds+0x1>
     310:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <leds>
	if(leds < 3) { 
     314:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <leds>
     318:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <leds+0x1>
     31c:	03 97       	sbiw	r24, 0x03	; 3
     31e:	38 f4       	brcc	.+14     	; 0x32e <__vector_46+0x3e>
		leds = 3;
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <leds+0x1>
     328:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <leds>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <__vector_46+0x58>
	} else if (leds == 0x8000) {
     32e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <leds>
     332:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <leds+0x1>
     336:	81 15       	cp	r24, r1
     338:	90 48       	sbci	r25, 0x80	; 128
     33a:	31 f4       	brne	.+12     	; 0x348 <__vector_46+0x58>
		leds = 0x8001;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e8       	ldi	r25, 0x80	; 128
     340:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <leds+0x1>
     344:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <leds>
	} 
	PORTF = leds;
     348:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <leds>
     34c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <leds+0x1>
     350:	81 bb       	out	0x11, r24	; 17
	PORTK = (leds >> 8);		
     352:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <leds>
     356:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <leds+0x1>
     35a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
}
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <main>:
volatile uint16_t leds;
volatile uint8_t tData[6];


int main(void)
{
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	61 97       	sbiw	r28, 0x11	; 17
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
	// initialize global variables 
	waiting = 0;
     382:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <waiting>
	rData[0] = 0;
     386:	ec e3       	ldi	r30, 0x3C	; 60
     388:	f2 e0       	ldi	r31, 0x02	; 2
     38a:	10 82       	st	Z, r1
	rData[1] = 0;
     38c:	11 82       	std	Z+1, r1	; 0x01
	leds = 0;
     38e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <leds+0x1>
     392:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <leds>
	
	for(uint8_t i = 0; i < 6; i++) {
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	86 30       	cpi	r24, 0x06	; 6
     39a:	38 f4       	brcc	.+14     	; 0x3aa <main+0x3c>
		tData[i] = 0;
     39c:	e8 2f       	mov	r30, r24
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	ec 5c       	subi	r30, 0xCC	; 204
     3a2:	fd 4f       	sbci	r31, 0xFD	; 253
     3a4:	10 82       	st	Z, r1
	waiting = 0;
	rData[0] = 0;
	rData[1] = 0;
	leds = 0;
	
	for(uint8_t i = 0; i < 6; i++) {
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	f7 cf       	rjmp	.-18     	; 0x398 <main+0x2a>
		tData[i] = 0;
	}
	
	//INIT Watchdog
	//start Watchdog and set Watchdog LED (clear before entering while())
	DDRB |= (1 << WD_LED) | (1 << LED_WindMill);
     3aa:	84 b1       	in	r24, 0x04	; 4
     3ac:	80 69       	ori	r24, 0x90	; 144
     3ae:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( 1 << WD_LED);		// set LED on
     3b0:	85 b1       	in	r24, 0x05	; 5
     3b2:	80 68       	ori	r24, 0x80	; 128
     3b4:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
     3b6:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     3b8:	99 e2       	ldi	r25, 0x29	; 41
     3ba:	88 e1       	ldi	r24, 0x18	; 24
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	a8 95       	wdr
     3c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
	wdt_enable(WDTO_8S);			// start WDT TOF=8s
	
	//INIT Pump timer 1
	//PWM-frequency: 2kHz
	//>0% ... >40% Dutycycle
	DDRB |= (1 << PUMP_PWM) | (1 << GENERATOR_PWM);	// PWM pins as output
     3cc:	84 b1       	in	r24, 0x04	; 4
     3ce:	80 66       	ori	r24, 0x60	; 96
     3d0:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11);
     3d2:	e0 e8       	ldi	r30, 0x80	; 128
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) |( 1 << WGM13);			// FastPWM mode 14
     3dc:	a1 e8       	ldi	r26, 0x81	; 129
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	8c 91       	ld	r24, X
     3e2:	88 61       	ori	r24, 0x18	; 24
     3e4:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1A1);						// set OC1A (PB5) as timer1 pwm output (generator)
     3e6:	80 81       	ld	r24, Z
     3e8:	80 68       	ori	r24, 0x80	; 128
     3ea:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);						// set OC1B (PB6) as timer 1 pwm output (pump)
     3ec:	80 81       	ld	r24, Z
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	80 83       	st	Z, r24
	ICR1 = PUMP_ICR -1;								// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
     3f2:	4f e3       	ldi	r20, 0x3F	; 63
     3f4:	5f e1       	ldi	r21, 0x1F	; 31
     3f6:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
     3fa:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
	OCR1A = 0;										// DutyCyle = 0%
     3fe:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     402:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;										// DutyCycle = 0%
     406:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     40a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		
	
	//INIT windmill timer 3
	//PWM frequency: 25kHz
	//>0% ... >50% Dutycycle
	DDRE |= (1 << WM_PWM_OUT);					// PWM pin as output
     40e:	8d b1       	in	r24, 0x0d	; 13
     410:	88 60       	ori	r24, 0x08	; 8
     412:	8d b9       	out	0x0d, r24	; 13
	TCCR3A |= (1 << WGM11);
     414:	80 e9       	ldi	r24, 0x90	; 144
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	20 81       	ld	r18, Z
     41c:	22 60       	ori	r18, 0x02	; 2
     41e:	20 83       	st	Z, r18
	TCCR3B |= (1 << WGM12) | (1 << WGM13);		// FastPWM mode 14
     420:	61 e9       	ldi	r22, 0x91	; 145
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	fb 01       	movw	r30, r22
     426:	20 81       	ld	r18, Z
     428:	28 61       	ori	r18, 0x18	; 24
     42a:	20 83       	st	Z, r18
	ICR3 = WM_ICR - 1;							// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
     42c:	50 93 97 00 	sts	0x0097, r21	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
     430:	40 93 96 00 	sts	0x0096, r20	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	TCCR3A |= (1 << COM3A1);					// set OC3A (PE3) as timer 3 pwm output (windmill)
     434:	fc 01       	movw	r30, r24
     436:	20 81       	ld	r18, Z
     438:	20 68       	ori	r18, 0x80	; 128
     43a:	20 83       	st	Z, r18
	OCR3A = 0;									// DutyCycle = 0%
     43c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     440:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	// 30cm max. depth of water => 60cm way of sound => ca. 2ms duration
	// 16Bit timer with prescaler 1 (16MHz clock) => after ca. 4ms Overflow => cancel meassurement and write 0 to array
	// not Timer output required, only set prescaler to start timer and configure Overflow Interrupt to end measurement. 
	// start Timer: TCCR4B |= (1 << CS40);
	// stopp Timer: TCCR4B &= ~(1 << CS40);
	TIMSK4 |= (1 << TOIE4);					// set interrupt (measurement takes too long)
     444:	22 e7       	ldi	r18, 0x72	; 114
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	f9 01       	movw	r30, r18
     44a:	80 81       	ld	r24, Z
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	80 83       	st	Z, r24
	TCNT4 = 0;								// set counter to 0 
     450:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
     454:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	EICRA |= (1 << ISC00) | (1 << ISC10);					// configure INT0 on PD0 and INT1 on PD1 to any edge for Sensor 1 and 2
     458:	89 e6       	ldi	r24, 0x69	; 105
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	fc 01       	movw	r30, r24
     45e:	20 81       	ld	r18, Z
     460:	25 60       	ori	r18, 0x05	; 5
     462:	20 83       	st	Z, r18
	DDRJ |= (1 << US_TRIGGER_IN) | (1 << US_TRIGGER_OUT);	// configure PJ2 and PJ3 as Trigger output pins
     464:	44 e0       	ldi	r20, 0x04	; 4
     466:	51 e0       	ldi	r21, 0x01	; 1
     468:	fa 01       	movw	r30, r20
     46a:	20 81       	ld	r18, Z
     46c:	23 60       	ori	r18, 0x03	; 3
     46e:	20 83       	st	Z, r18
	// maxValue for 100% (e.g. 0.5s per LED)
	// PWM Frequency >200Hz
	// Both directions with outputs PF0 .. PF7 and PK0 .. PK7
	//      only plugged vice versa for other direction
	// two pins for MOSFETs to select the LED bank
	DDRF = 0xFF;
     470:	2f ef       	ldi	r18, 0xFF	; 255
     472:	20 bb       	out	0x10, r18	; 16
	DDRK = 0xFF;
     474:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRH |= (1 << LED_GENERATOR) | (1 << LED_PUMP);		// Pins to select LED running light (per MOSFET)
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	51 e0       	ldi	r21, 0x01	; 1
     47c:	fa 01       	movw	r30, r20
     47e:	20 81       	ld	r18, Z
     480:	23 60       	ori	r18, 0x03	; 3
     482:	20 83       	st	Z, r18
	TCCR5B |= (1 << WGM52) |( 1 << WGM53);				// CTC mode 12
     484:	41 e2       	ldi	r20, 0x21	; 33
     486:	51 e0       	ldi	r21, 0x01	; 1
     488:	fa 01       	movw	r30, r20
     48a:	20 81       	ld	r18, Z
     48c:	28 61       	ori	r18, 0x18	; 24
     48e:	20 83       	st	Z, r18
	ICR5 = LED_SLOWEST_ICR - 1;							// default value -> must be calculated
     490:	2f e4       	ldi	r18, 0x4F	; 79
     492:	33 ec       	ldi	r19, 0xC3	; 195
     494:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
     498:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
	TIMSK5 |= (1 << ICIE5);
     49c:	43 e7       	ldi	r20, 0x73	; 115
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	fa 01       	movw	r30, r20
     4a2:	20 81       	ld	r18, Z
     4a4:	20 62       	ori	r18, 0x20	; 32
     4a6:	20 83       	st	Z, r18
	
	EICRA |= ( 1 << ISC21);							// enable INT2 on PD2 for falling edge (connect to !SS pin)
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 81       	ld	r18, Z
     4ac:	20 62       	ori	r18, 0x20	; 32
     4ae:	20 83       	st	Z, r18
	
	TCCR1B |= (1 << CS10);				// start Timer 1 (Pumps) Prescaler 1
     4b0:	8c 91       	ld	r24, X
     4b2:	81 60       	ori	r24, 0x01	; 1
     4b4:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS10);				// start Timer 3 (Windmill) Prescaler 1
     4b6:	fb 01       	movw	r30, r22
     4b8:	80 81       	ld	r24, Z
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	80 83       	st	Z, r24
	sei();
     4be:	78 94       	sei
	
	//////////////////////////////////////////////////////////////////////////
	//             USART initialisation only for Testing
	//////////////////////////////////////////////////////////////////////////
	uartSettings us;
     4c0:	8d e0       	ldi	r24, 0x0D	; 13
     4c2:	e6 e2       	ldi	r30, 0x26	; 38
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	de 01       	movw	r26, r28
     4c8:	11 96       	adiw	r26, 0x01	; 1
     4ca:	01 90       	ld	r0, Z+
     4cc:	0d 92       	st	X+, r0
     4ce:	8a 95       	dec	r24
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	DDRE |= (1 << PE1);
     4d2:	8d b1       	in	r24, 0x0d	; 13
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	8d b9       	out	0x0d, r24	; 13
	us.module = uartModule::uart0;
     4d8:	1a 82       	std	Y+2, r1	; 0x02
     4da:	19 82       	std	Y+1, r1	; 0x01
	us.baud = UartBaudRates::br38400;
     4dc:	80 e8       	ldi	r24, 0x80	; 128
     4de:	c8 2e       	mov	r12, r24
     4e0:	8b 83       	std	Y+3, r24	; 0x03
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	8c 83       	std	Y+4, r24	; 0x04
	Uart uart(us);
     4e6:	a1 2c       	mov	r10, r1
     4e8:	ba 80       	ldd	r11, Y+2	; 0x02
     4ea:	dd 24       	eor	r13, r13
     4ec:	d3 94       	inc	r13
     4ee:	ed 80       	ldd	r14, Y+5	; 0x05
     4f0:	fe 80       	ldd	r15, Y+6	; 0x06
     4f2:	0f 81       	ldd	r16, Y+7	; 0x07
     4f4:	18 85       	ldd	r17, Y+8	; 0x08
     4f6:	29 85       	ldd	r18, Y+9	; 0x09
     4f8:	3a 85       	ldd	r19, Y+10	; 0x0a
     4fa:	4b 85       	ldd	r20, Y+11	; 0x0b
     4fc:	5c 85       	ldd	r21, Y+12	; 0x0c
     4fe:	6d 85       	ldd	r22, Y+13	; 0x0d
     500:	ce 01       	movw	r24, r28
     502:	0e 96       	adiw	r24, 0x0e	; 14
     504:	65 d1       	rcall	.+714    	; 0x7d0 <_ZN4UartC1E12uartSettings>
	uart.enable();
     506:	ce 01       	movw	r24, r28
     508:	0e 96       	adiw	r24, 0x0e	; 14
     50a:	b0 d2       	rcall	.+1376   	; 0xa6c <_ZN4Uart6enableEv>
	uart.cls();	
     50c:	ce 01       	movw	r24, r28
     50e:	0e 96       	adiw	r24, 0x0e	; 14
     510:	40 d3       	rcall	.+1664   	; 0xb92 <_ZN4Uart3clsEv>
	uart.write((char*)"Start der Messungen\0", true);
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	72 e0       	ldi	r23, 0x02	; 2
     518:	ce 01       	movw	r24, r28
     51a:	0e 96       	adiw	r24, 0x0e	; 14
     51c:	5b d3       	rcall	.+1718   	; 0xbd4 <_ZN4Uart5writeEPcb>
	//................ end test
	
	DDR_SPI |= (1<<DD_MISO);
     51e:	84 b1       	in	r24, 0x04	; 4
     520:	88 60       	ori	r24, 0x08	; 8
     522:	84 b9       	out	0x04, r24	; 4
	// Enable SPI
	SPCR |= (1<<SPE)|(1<<SPR0);
     524:	8c b5       	in	r24, 0x2c	; 44
     526:	81 64       	ori	r24, 0x41	; 65
     528:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << WD_LED);			// clear init LED 
     52a:	85 b1       	in	r24, 0x05	; 5
     52c:	8f 77       	andi	r24, 0x7F	; 127
     52e:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		PORTB |= (1 << LED_WindMill);
     530:	85 b1       	in	r24, 0x05	; 5
     532:	80 61       	ori	r24, 0x10	; 16
     534:	85 b9       	out	0x05, r24	; 5
		wdt_reset();					// reset WDT => Counter = 0 
     536:	a8 95       	wdr
		//////////////////////////////////////////////////////////////////////////
		//                 calc pumps + LED Running Light
		//////////////////////////////////////////////////////////////////////////
		uint8_t absData = 0;
		if(rData[0] < 0) 
     538:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rData>
     53c:	88 23       	and	r24, r24
     53e:	24 f4       	brge	.+8      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			absData = rData[0] * (-1);
     540:	10 91 3c 02 	lds	r17, 0x023C	; 0x80023c <rData>
     544:	11 95       	neg	r17
     546:	02 c0       	rjmp	.+4      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		else 
			absData = rData[0];
     548:	10 91 3c 02 	lds	r17, 0x023C	; 0x80023c <rData>
			
		if(rData[0] == 0) {
     54c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rData>
     550:	81 11       	cpse	r24, r1
     552:	0a c0       	rjmp	.+20     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
			OCR1A = 0;
     554:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     558:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			PORTH &= ~((1 << LED_PUMP) | (1 << LED_GENERATOR));	
     55c:	e2 e0       	ldi	r30, 0x02	; 2
     55e:	f1 e0       	ldi	r31, 0x01	; 1
     560:	80 81       	ld	r24, Z
     562:	8c 7f       	andi	r24, 0xFC	; 252
     564:	80 83       	st	Z, r24
     566:	51 c0       	rjmp	.+162    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
		} else {
			if(rData[0] > 0) {	// generator runs
     568:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rData>
     56c:	18 16       	cp	r1, r24
     56e:	ec f4       	brge	.+58     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
     570:	e2 e0       	ldi	r30, 0x02	; 2
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	80 81       	ld	r24, Z
     576:	8d 7f       	andi	r24, 0xFD	; 253
     578:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
     57a:	80 81       	ld	r24, Z
     57c:	81 60       	ori	r24, 0x01	; 1
     57e:	80 83       	st	Z, r24
				OCR1B = 0;
     580:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     584:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				OCR1A = (uint16_t)((((uint32_t)(absData) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
     588:	21 2f       	mov	r18, r17
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	a0 ea       	ldi	r26, 0xA0	; 160
     58e:	bf e0       	ldi	r27, 0x0F	; 15
     590:	6a d5       	rcall	.+2772   	; 0x1066 <__umulhisi3>
     592:	24 e6       	ldi	r18, 0x64	; 100
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	43 d5       	rcall	.+2694   	; 0x1022 <__udivmodsi4>
     59c:	20 56       	subi	r18, 0x60	; 96
     59e:	30 4f       	sbci	r19, 0xF0	; 240
     5a0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     5a4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     5a8:	1c c0       	rjmp	.+56     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
			} else {
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
     5aa:	e2 e0       	ldi	r30, 0x02	; 2
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	80 81       	ld	r24, Z
     5b0:	8d 7f       	andi	r24, 0xFD	; 253
     5b2:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
     5b4:	80 81       	ld	r24, Z
     5b6:	81 60       	ori	r24, 0x01	; 1
     5b8:	80 83       	st	Z, r24
				OCR1A = 0;
     5ba:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     5be:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				OCR1B = (uint16_t)((((uint32_t)(absData) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
     5c2:	21 2f       	mov	r18, r17
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	a0 ea       	ldi	r26, 0xA0	; 160
     5c8:	bf e0       	ldi	r27, 0x0F	; 15
     5ca:	4d d5       	rcall	.+2714   	; 0x1066 <__umulhisi3>
     5cc:	24 e6       	ldi	r18, 0x64	; 100
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	26 d5       	rcall	.+2636   	; 0x1022 <__udivmodsi4>
     5d6:	20 56       	subi	r18, 0x60	; 96
     5d8:	30 4f       	sbci	r19, 0xF0	; 240
     5da:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     5de:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
			}
			
			ICR5 = (uint16_t)((((uint32_t)(100-absData) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
     5e2:	a4 e6       	ldi	r26, 0x64	; 100
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	a1 1b       	sub	r26, r17
     5e8:	b1 09       	sbc	r27, r1
     5ea:	28 e6       	ldi	r18, 0x68	; 104
     5ec:	38 e4       	ldi	r19, 0x48	; 72
     5ee:	4f ef       	ldi	r20, 0xFF	; 255
     5f0:	5f ef       	ldi	r21, 0xFF	; 255
     5f2:	4e d5       	rcall	.+2716   	; 0x1090 <__mulshisi3>
     5f4:	24 e6       	ldi	r18, 0x64	; 100
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	12 d5       	rcall	.+2596   	; 0x1022 <__udivmodsi4>
     5fe:	28 54       	subi	r18, 0x48	; 72
     600:	34 4f       	sbci	r19, 0xF4	; 244
     602:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
     606:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//                       calc Windmill - PWM
		//////////////////////////////////////////////////////////////////////////
		if(rData[1] <= 0) {
     60a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <rData+0x1>
     60e:	18 16       	cp	r1, r24
     610:	2c f0       	brlt	.+10     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
			OCR3A = 0;
     612:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     616:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		} else {
			OCR3A =  (uint16_t)((((uint32_t)rData[1] * (uint32_t)(WM_ICR - WM_FASTEST_OCR))/100) + WM_FASTEST_OCR) - 1;
     61a:	13 c0       	rjmp	.+38     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     61c:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <rData+0x1>
     620:	0a 2e       	mov	r0, r26
     622:	00 0c       	add	r0, r0
     624:	bb 0b       	sbc	r27, r27
     626:	20 ea       	ldi	r18, 0xA0	; 160
     628:	3f e0       	ldi	r19, 0x0F	; 15
     62a:	2c d5       	rcall	.+2648   	; 0x1084 <__usmulhisi3>
     62c:	24 e6       	ldi	r18, 0x64	; 100
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	f6 d4       	rcall	.+2540   	; 0x1022 <__udivmodsi4>
     636:	21 56       	subi	r18, 0x61	; 97
     638:	30 4f       	sbci	r19, 0xF0	; 240
     63a:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     63e:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		// 3. in ISR if rising edge start Timer 4
		// 4. wait for falling edge on INT0
		// 5. in ISR if falling edge stop Timer 4
		// 6. calculate distance and set tData 0 and 1
		// 7. stop INT0 sensing and set TCNT4 = 0
		PORTJ |= (1 << US_TRIGGER_IN);
     642:	e5 e0       	ldi	r30, 0x05	; 5
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	80 81       	ld	r24, Z
     648:	81 60       	ori	r24, 0x01	; 1
     64a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64c:	2a e6       	ldi	r18, 0x6A	; 106
     64e:	2a 95       	dec	r18
     650:	f1 f7       	brne	.-4      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     652:	00 c0       	rjmp	.+0      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_IN);
     654:	80 81       	ld	r24, Z
     656:	8e 7f       	andi	r24, 0xFE	; 254
     658:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);			// activate INT0 interrupt 
     65a:	8d b3       	in	r24, 0x1d	; 29
     65c:	81 60       	ori	r24, 0x01	; 1
     65e:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <waiting>
		while(waiting){
     666:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <waiting>
     66a:	81 11       	cpse	r24, r1
     66c:	fc cf       	rjmp	.-8      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
		};
		EIMSK &= ~(1 << INT0);			// deactivate INT0 interrupt
     66e:	8d b3       	in	r24, 0x1d	; 29
     670:	8e 7f       	andi	r24, 0xFE	; 254
     672:	8d bb       	out	0x1d, r24	; 29
		
		PORTJ |= (1 << US_TRIGGER_OUT);
     674:	e5 e0       	ldi	r30, 0x05	; 5
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	80 81       	ld	r24, Z
     67a:	82 60       	ori	r24, 0x02	; 2
     67c:	80 83       	st	Z, r24
     67e:	8a e6       	ldi	r24, 0x6A	; 106
     680:	8a 95       	dec	r24
     682:	f1 f7       	brne	.-4      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     684:	00 c0       	rjmp	.+0      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_OUT);
     686:	80 81       	ld	r24, Z
     688:	8d 7f       	andi	r24, 0xFD	; 253
     68a:	80 83       	st	Z, r24
		EIMSK |= (1 << INT1);			// activate INT1 interrupt 
     68c:	8d b3       	in	r24, 0x1d	; 29
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <waiting>
		while(waiting){
     698:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <waiting>
     69c:	81 11       	cpse	r24, r1
     69e:	fc cf       	rjmp	.-8      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
		};
		EIMSK &= ~(1 << INT1);			// deactivate INT1 interrupt 
     6a0:	8d b3       	in	r24, 0x1d	; 29
     6a2:	8d 7f       	andi	r24, 0xFD	; 253
     6a4:	8d bb       	out	0x1d, r24	; 29
		
		
		
		TCCR5B |= (1 << CS50) | (1 << CS51);	// start LED Timer	
     6a6:	e1 e2       	ldi	r30, 0x21	; 33
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	80 81       	ld	r24, Z
     6ac:	83 60       	ori	r24, 0x03	; 3
     6ae:	80 83       	st	Z, r24
		EIMSK |= (1 << INT2);					// enable !SS interupt when !SS is activated (falling edge)
     6b0:	8d b3       	in	r24, 0x1d	; 29
     6b2:	84 60       	ori	r24, 0x04	; 4
     6b4:	8d bb       	out	0x1d, r24	; 29
		PORTB &= ~(1 << LED_WindMill);			// turn out WindMill flash LED
     6b6:	85 b1       	in	r24, 0x05	; 5
     6b8:	8f 7e       	andi	r24, 0xEF	; 239
     6ba:	85 b9       	out	0x05, r24	; 5
		//////////////////////////////////////////////////////////////////////////
		//             Test: shut down SPI Communication and set values instead
		//////////////////////////////////////////////////////////////////////////
		
		// get Usonic intern and calc rdata[0] => 50 - 150mm => 100 - 0%; 150mm - 300mm => 0 - 100%
		uint16_t test1 = tData[0];
     6bc:	e4 e3       	ldi	r30, 0x34	; 52
     6be:	f2 e0       	ldi	r31, 0x02	; 2
     6c0:	00 81       	ld	r16, Z
     6c2:	10 e0       	ldi	r17, 0x00	; 0
		test1 = (test1 << 8) + tData[1];
     6c4:	10 2f       	mov	r17, r16
     6c6:	00 27       	eor	r16, r16
     6c8:	81 81       	ldd	r24, Z+1	; 0x01
     6ca:	08 0f       	add	r16, r24
     6cc:	11 1d       	adc	r17, r1

		
		// get Usonic extern and calc rdata[1] => 50 - 300mm => 0 - 100%
		uint16_t test2 = tData[2];
     6ce:	e2 80       	ldd	r14, Z+2	; 0x02
		test2 = (test2 << 8) + tData[3];
     6d0:	f1 2c       	mov	r15, r1
     6d2:	fe 2c       	mov	r15, r14
     6d4:	ee 24       	eor	r14, r14
     6d6:	83 81       	ldd	r24, Z+3	; 0x03

		
		uart.write((char*)"S1: \0");
     6d8:	e8 0e       	add	r14, r24
     6da:	f1 1c       	adc	r15, r1
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	65 e1       	ldi	r22, 0x15	; 21
     6e0:	72 e0       	ldi	r23, 0x02	; 2
     6e2:	ce 01       	movw	r24, r28
		uart.write((uint16_t)test1);
     6e4:	0e 96       	adiw	r24, 0x0e	; 14
     6e6:	76 d2       	rcall	.+1260   	; 0xbd4 <_ZN4Uart5writeEPcb>
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	b8 01       	movw	r22, r16
     6ec:	ce 01       	movw	r24, r28
		uart.write((char*)"     S2: \0");
     6ee:	0e 96       	adiw	r24, 0x0e	; 14
     6f0:	8b d2       	rcall	.+1302   	; 0xc08 <_ZN4Uart5writeEjb>
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	6b e1       	ldi	r22, 0x1B	; 27
     6f6:	72 e0       	ldi	r23, 0x02	; 2
     6f8:	ce 01       	movw	r24, r28
     6fa:	0e 96       	adiw	r24, 0x0e	; 14
		uart.write((uint16_t)test2, true);		
     6fc:	6b d2       	rcall	.+1238   	; 0xbd4 <_ZN4Uart5writeEPcb>
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	b7 01       	movw	r22, r14
     702:	ce 01       	movw	r24, r28
     704:	0e 96       	adiw	r24, 0x0e	; 14
     706:	80 d2       	rcall	.+1280   	; 0xc08 <_ZN4Uart5writeEjb>
		
		if (test1 > 300) test1 = 300;
     708:	0d 32       	cpi	r16, 0x2D	; 45
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	19 07       	cpc	r17, r25
     70e:	10 f0       	brcs	.+4      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     710:	0c e2       	ldi	r16, 0x2C	; 44
     712:	11 e0       	ldi	r17, 0x01	; 1
		if (test1 < 50) test1 = 50;
     714:	02 33       	cpi	r16, 0x32	; 50
     716:	11 05       	cpc	r17, r1
     718:	10 f4       	brcc	.+4      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     71a:	02 e3       	ldi	r16, 0x32	; 50
		if (test1 >= 150) {
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	06 39       	cpi	r16, 0x96	; 150
     720:	11 05       	cpc	r17, r1
			rData[0] = (int8_t)(((test1 - (uint16_t)150) * (uint16_t)100)/(uint16_t)150);
     722:	c8 f0       	brcs	.+50     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
     724:	84 e6       	ldi	r24, 0x64	; 100
     726:	80 9f       	mul	r24, r16
     728:	90 01       	movw	r18, r0
     72a:	81 9f       	mul	r24, r17
     72c:	30 0d       	add	r19, r0
     72e:	11 24       	eor	r1, r1
     730:	28 59       	subi	r18, 0x98	; 152
     732:	3a 43       	sbci	r19, 0x3A	; 58
     734:	36 95       	lsr	r19
     736:	27 95       	ror	r18
     738:	a5 e7       	ldi	r26, 0x75	; 117
     73a:	ba ed       	ldi	r27, 0xDA	; 218
     73c:	94 d4       	rcall	.+2344   	; 0x1066 <__umulhisi3>
     73e:	00 24       	eor	r0, r0
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	00 1c       	adc	r0, r0
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	00 1c       	adc	r0, r0
     74c:	89 2f       	mov	r24, r25
     74e:	90 2d       	mov	r25, r0
     750:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <rData>
     754:	07 c0       	rjmp	.+14     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			} else if (test1 < 150) {
     756:	06 39       	cpi	r16, 0x96	; 150
     758:	11 05       	cpc	r17, r1
     75a:	20 f4       	brcc	.+8      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			rData[0] = (int8_t)((int8_t)(((uint16_t)test1 - (uint16_t)50)) * (-1));
     75c:	82 e3       	ldi	r24, 0x32	; 50
     75e:	80 1b       	sub	r24, r16
     760:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <rData>
		}
		if(test2 > 300) test2 = 300;
     764:	ed e2       	ldi	r30, 0x2D	; 45
     766:	ee 16       	cp	r14, r30
     768:	e1 e0       	ldi	r30, 0x01	; 1
     76a:	fe 06       	cpc	r15, r30
     76c:	30 f0       	brcs	.+12     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
     76e:	0f 2e       	mov	r0, r31
     770:	fc e2       	ldi	r31, 0x2C	; 44
     772:	ef 2e       	mov	r14, r31
     774:	ff 24       	eor	r15, r15
     776:	f3 94       	inc	r15
     778:	f0 2d       	mov	r31, r0
		if(test2 < 50) test2 = 50;
     77a:	f2 e3       	ldi	r31, 0x32	; 50
     77c:	ef 16       	cp	r14, r31
     77e:	f1 04       	cpc	r15, r1
     780:	28 f4       	brcc	.+10     	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
     782:	0f 2e       	mov	r0, r31
     784:	f2 e3       	ldi	r31, 0x32	; 50
     786:	ef 2e       	mov	r14, r31
     788:	f1 2c       	mov	r15, r1
		
		rData[1] = (int8_t)(((test2 - (uint16_t)50)*(uint16_t)100)/(uint16_t)250);
     78a:	f0 2d       	mov	r31, r0
     78c:	84 e6       	ldi	r24, 0x64	; 100
     78e:	8e 9d       	mul	r24, r14
     790:	90 01       	movw	r18, r0
     792:	8f 9d       	mul	r24, r15
     794:	30 0d       	add	r19, r0
     796:	11 24       	eor	r1, r1
     798:	28 58       	subi	r18, 0x88	; 136
     79a:	33 41       	sbci	r19, 0x13	; 19
     79c:	36 95       	lsr	r19
     79e:	27 95       	ror	r18
     7a0:	a3 e1       	ldi	r26, 0x13	; 19
     7a2:	b3 e8       	ldi	r27, 0x83	; 131
     7a4:	60 d4       	rcall	.+2240   	; 0x1066 <__umulhisi3>
     7a6:	00 24       	eor	r0, r0
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	00 1c       	adc	r0, r0
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	00 1c       	adc	r0, r0
     7b4:	89 2f       	mov	r24, r25
     7b6:	90 2d       	mov	r25, r0
     7b8:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <rData+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7bc:	2f ef       	ldi	r18, 0xFF	; 255
     7be:	83 ec       	ldi	r24, 0xC3	; 195
     7c0:	99 e0       	ldi	r25, 0x09	; 9
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	80 40       	sbci	r24, 0x00	; 0
     7c6:	90 40       	sbci	r25, 0x00	; 0
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
     7cc:	00 00       	nop
     7ce:	b0 ce       	rjmp	.-672    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>

000007d0 <_ZN4UartC1E12uartSettings>:
 */
void Uart::write(int16_t i, bool linefeed /*= false*/) {
	char s[7];
	itoa(i, s, 10);
	write(s, linefeed);
}
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2d 97       	sbiw	r28, 0x0d	; 13
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	fc 01       	movw	r30, r24
     7f6:	a9 82       	std	Y+1, r10	; 0x01
     7f8:	ba 82       	std	Y+2, r11	; 0x02
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	dc 82       	std	Y+4, r13	; 0x04
     7fe:	ed 82       	std	Y+5, r14	; 0x05
     800:	fe 82       	std	Y+6, r15	; 0x06
     802:	0f 83       	std	Y+7, r16	; 0x07
     804:	18 87       	std	Y+8, r17	; 0x08
     806:	29 87       	std	Y+9, r18	; 0x09
     808:	3a 87       	std	Y+10, r19	; 0x0a
     80a:	4b 87       	std	Y+11, r20	; 0x0b
     80c:	5c 87       	std	Y+12, r21	; 0x0c
     80e:	6d 87       	std	Y+13, r22	; 0x0d
     810:	09 81       	ldd	r16, Y+1	; 0x01
     812:	1a 81       	ldd	r17, Y+2	; 0x02
     814:	11 83       	std	Z+1, r17	; 0x01
     816:	00 83       	st	Z, r16
     818:	52 83       	std	Z+2, r21	; 0x02
     81a:	63 83       	std	Z+3, r22	; 0x03
     81c:	44 23       	and	r20, r20
     81e:	79 f0       	breq	.+30     	; 0x83e <_ZN4UartC1E12uartSettings+0x6e>
     820:	2b 81       	ldd	r18, Y+3	; 0x03
     822:	3c 81       	ldd	r19, Y+4	; 0x04
     824:	a0 e2       	ldi	r26, 0x20	; 32
     826:	b3 e0       	ldi	r27, 0x03	; 3
     828:	1e d4       	rcall	.+2108   	; 0x1066 <__umulhisi3>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	74 e2       	ldi	r23, 0x24	; 36
     832:	84 ef       	ldi	r24, 0xF4	; 244
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	f5 d3       	rcall	.+2026   	; 0x1022 <__udivmodsi4>
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	31 09       	sbc	r19, r1
     83c:	0e c0       	rjmp	.+28     	; 0x85a <_ZN4UartC1E12uartSettings+0x8a>
     83e:	2b 81       	ldd	r18, Y+3	; 0x03
     840:	3c 81       	ldd	r19, Y+4	; 0x04
     842:	a0 e4       	ldi	r26, 0x40	; 64
     844:	b6 e0       	ldi	r27, 0x06	; 6
     846:	0f d4       	rcall	.+2078   	; 0x1066 <__umulhisi3>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	74 e2       	ldi	r23, 0x24	; 36
     850:	84 ef       	ldi	r24, 0xF4	; 244
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	e6 d3       	rcall	.+1996   	; 0x1022 <__udivmodsi4>
     856:	21 50       	subi	r18, 0x01	; 1
     858:	31 09       	sbc	r19, r1
     85a:	01 30       	cpi	r16, 0x01	; 1
     85c:	11 05       	cpc	r17, r1
     85e:	09 f4       	brne	.+2      	; 0x862 <_ZN4UartC1E12uartSettings+0x92>
     860:	47 c0       	rjmp	.+142    	; 0x8f0 <_ZN4UartC1E12uartSettings+0x120>
     862:	1c f4       	brge	.+6      	; 0x86a <_ZN4UartC1E12uartSettings+0x9a>
     864:	01 2b       	or	r16, r17
     866:	51 f0       	breq	.+20     	; 0x87c <_ZN4UartC1E12uartSettings+0xac>
     868:	f0 c0       	rjmp	.+480    	; 0xa4a <_ZN4UartC1E12uartSettings+0x27a>
     86a:	02 30       	cpi	r16, 0x02	; 2
     86c:	11 05       	cpc	r17, r1
     86e:	09 f4       	brne	.+2      	; 0x872 <_ZN4UartC1E12uartSettings+0xa2>
     870:	79 c0       	rjmp	.+242    	; 0x964 <_ZN4UartC1E12uartSettings+0x194>
     872:	03 30       	cpi	r16, 0x03	; 3
     874:	11 05       	cpc	r17, r1
     876:	09 f4       	brne	.+2      	; 0x87a <_ZN4UartC1E12uartSettings+0xaa>
     878:	af c0       	rjmp	.+350    	; 0x9d8 <_ZN4UartC1E12uartSettings+0x208>
     87a:	e7 c0       	rjmp	.+462    	; 0xa4a <_ZN4UartC1E12uartSettings+0x27a>
     87c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
     880:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
     884:	8b 85       	ldd	r24, Y+11	; 0x0b
     886:	88 23       	and	r24, r24
     888:	29 f0       	breq	.+10     	; 0x894 <_ZN4UartC1E12uartSettings+0xc4>
     88a:	e0 ec       	ldi	r30, 0xC0	; 192
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	82 60       	ori	r24, 0x02	; 2
     892:	80 83       	st	Z, r24
     894:	e2 ec       	ldi	r30, 0xC2	; 194
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	60 81       	ld	r22, Z
     89a:	2d 81       	ldd	r18, Y+5	; 0x05
     89c:	3e 81       	ldd	r19, Y+6	; 0x06
     89e:	23 70       	andi	r18, 0x03	; 3
     8a0:	33 27       	eor	r19, r19
     8a2:	a9 01       	movw	r20, r18
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	29 85       	ldd	r18, Y+9	; 0x09
     8aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     8ac:	33 27       	eor	r19, r19
     8ae:	22 0f       	add	r18, r18
     8b0:	33 1f       	adc	r19, r19
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	8f 81       	ldd	r24, Y+7	; 0x07
     8bc:	98 85       	ldd	r25, Y+8	; 0x08
     8be:	99 27       	eor	r25, r25
     8c0:	82 95       	swap	r24
     8c2:	92 95       	swap	r25
     8c4:	90 7f       	andi	r25, 0xF0	; 240
     8c6:	98 27       	eor	r25, r24
     8c8:	80 7f       	andi	r24, 0xF0	; 240
     8ca:	98 27       	eor	r25, r24
     8cc:	24 2b       	or	r18, r20
     8ce:	82 2b       	or	r24, r18
     8d0:	86 2b       	or	r24, r22
     8d2:	80 83       	st	Z, r24
     8d4:	e1 ec       	ldi	r30, 0xC1	; 193
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	20 81       	ld	r18, Z
     8da:	8d 81       	ldd	r24, Y+5	; 0x05
     8dc:	9e 81       	ldd	r25, Y+6	; 0x06
     8de:	84 70       	andi	r24, 0x04	; 4
     8e0:	99 27       	eor	r25, r25
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	82 2b       	or	r24, r18
     8ec:	80 83       	st	Z, r24
     8ee:	ad c0       	rjmp	.+346    	; 0xa4a <_ZN4UartC1E12uartSettings+0x27a>
     8f0:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
     8f4:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
     8f8:	8b 85       	ldd	r24, Y+11	; 0x0b
     8fa:	88 23       	and	r24, r24
     8fc:	29 f0       	breq	.+10     	; 0x908 <_ZN4UartC1E12uartSettings+0x138>
     8fe:	e8 ec       	ldi	r30, 0xC8	; 200
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	82 60       	ori	r24, 0x02	; 2
     906:	80 83       	st	Z, r24
     908:	ea ec       	ldi	r30, 0xCA	; 202
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	60 81       	ld	r22, Z
     90e:	2d 81       	ldd	r18, Y+5	; 0x05
     910:	3e 81       	ldd	r19, Y+6	; 0x06
     912:	23 70       	andi	r18, 0x03	; 3
     914:	33 27       	eor	r19, r19
     916:	a9 01       	movw	r20, r18
     918:	44 0f       	add	r20, r20
     91a:	55 1f       	adc	r21, r21
     91c:	29 85       	ldd	r18, Y+9	; 0x09
     91e:	3a 85       	ldd	r19, Y+10	; 0x0a
     920:	33 27       	eor	r19, r19
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	8f 81       	ldd	r24, Y+7	; 0x07
     930:	98 85       	ldd	r25, Y+8	; 0x08
     932:	99 27       	eor	r25, r25
     934:	82 95       	swap	r24
     936:	92 95       	swap	r25
     938:	90 7f       	andi	r25, 0xF0	; 240
     93a:	98 27       	eor	r25, r24
     93c:	80 7f       	andi	r24, 0xF0	; 240
     93e:	98 27       	eor	r25, r24
     940:	24 2b       	or	r18, r20
     942:	82 2b       	or	r24, r18
     944:	86 2b       	or	r24, r22
     946:	80 83       	st	Z, r24
     948:	e9 ec       	ldi	r30, 0xC9	; 201
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	20 81       	ld	r18, Z
     94e:	8d 81       	ldd	r24, Y+5	; 0x05
     950:	9e 81       	ldd	r25, Y+6	; 0x06
     952:	84 70       	andi	r24, 0x04	; 4
     954:	99 27       	eor	r25, r25
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	82 2b       	or	r24, r18
     960:	80 83       	st	Z, r24
     962:	73 c0       	rjmp	.+230    	; 0xa4a <_ZN4UartC1E12uartSettings+0x27a>
     964:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
     968:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
     96c:	8b 85       	ldd	r24, Y+11	; 0x0b
     96e:	88 23       	and	r24, r24
     970:	29 f0       	breq	.+10     	; 0x97c <_ZN4UartC1E12uartSettings+0x1ac>
     972:	e0 ed       	ldi	r30, 0xD0	; 208
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	82 60       	ori	r24, 0x02	; 2
     97a:	80 83       	st	Z, r24
     97c:	ea ec       	ldi	r30, 0xCA	; 202
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	60 81       	ld	r22, Z
     982:	2d 81       	ldd	r18, Y+5	; 0x05
     984:	3e 81       	ldd	r19, Y+6	; 0x06
     986:	23 70       	andi	r18, 0x03	; 3
     988:	33 27       	eor	r19, r19
     98a:	a9 01       	movw	r20, r18
     98c:	44 0f       	add	r20, r20
     98e:	55 1f       	adc	r21, r21
     990:	29 85       	ldd	r18, Y+9	; 0x09
     992:	3a 85       	ldd	r19, Y+10	; 0x0a
     994:	33 27       	eor	r19, r19
     996:	22 0f       	add	r18, r18
     998:	33 1f       	adc	r19, r19
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	8f 81       	ldd	r24, Y+7	; 0x07
     9a4:	98 85       	ldd	r25, Y+8	; 0x08
     9a6:	99 27       	eor	r25, r25
     9a8:	82 95       	swap	r24
     9aa:	92 95       	swap	r25
     9ac:	90 7f       	andi	r25, 0xF0	; 240
     9ae:	98 27       	eor	r25, r24
     9b0:	80 7f       	andi	r24, 0xF0	; 240
     9b2:	98 27       	eor	r25, r24
     9b4:	24 2b       	or	r18, r20
     9b6:	82 2b       	or	r24, r18
     9b8:	86 2b       	or	r24, r22
     9ba:	80 83       	st	Z, r24
     9bc:	e9 ec       	ldi	r30, 0xC9	; 201
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	20 81       	ld	r18, Z
     9c2:	8d 81       	ldd	r24, Y+5	; 0x05
     9c4:	9e 81       	ldd	r25, Y+6	; 0x06
     9c6:	84 70       	andi	r24, 0x04	; 4
     9c8:	99 27       	eor	r25, r25
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	82 2b       	or	r24, r18
     9d4:	80 83       	st	Z, r24
     9d6:	39 c0       	rjmp	.+114    	; 0xa4a <_ZN4UartC1E12uartSettings+0x27a>
     9d8:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
     9dc:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
     9e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e2:	88 23       	and	r24, r24
     9e4:	29 f0       	breq	.+10     	; 0x9f0 <_ZN4UartC1E12uartSettings+0x220>
     9e6:	e0 e3       	ldi	r30, 0x30	; 48
     9e8:	f1 e0       	ldi	r31, 0x01	; 1
     9ea:	80 81       	ld	r24, Z
     9ec:	82 60       	ori	r24, 0x02	; 2
     9ee:	80 83       	st	Z, r24
     9f0:	e2 e3       	ldi	r30, 0x32	; 50
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	60 81       	ld	r22, Z
     9f6:	2d 81       	ldd	r18, Y+5	; 0x05
     9f8:	3e 81       	ldd	r19, Y+6	; 0x06
     9fa:	23 70       	andi	r18, 0x03	; 3
     9fc:	33 27       	eor	r19, r19
     9fe:	a9 01       	movw	r20, r18
     a00:	44 0f       	add	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	29 85       	ldd	r18, Y+9	; 0x09
     a06:	3a 85       	ldd	r19, Y+10	; 0x0a
     a08:	33 27       	eor	r19, r19
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	22 0f       	add	r18, r18
     a14:	33 1f       	adc	r19, r19
     a16:	8f 81       	ldd	r24, Y+7	; 0x07
     a18:	98 85       	ldd	r25, Y+8	; 0x08
     a1a:	99 27       	eor	r25, r25
     a1c:	82 95       	swap	r24
     a1e:	92 95       	swap	r25
     a20:	90 7f       	andi	r25, 0xF0	; 240
     a22:	98 27       	eor	r25, r24
     a24:	80 7f       	andi	r24, 0xF0	; 240
     a26:	98 27       	eor	r25, r24
     a28:	24 2b       	or	r18, r20
     a2a:	82 2b       	or	r24, r18
     a2c:	86 2b       	or	r24, r22
     a2e:	80 83       	st	Z, r24
     a30:	e1 e3       	ldi	r30, 0x31	; 49
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	20 81       	ld	r18, Z
     a36:	8d 81       	ldd	r24, Y+5	; 0x05
     a38:	9e 81       	ldd	r25, Y+6	; 0x06
     a3a:	84 70       	andi	r24, 0x04	; 4
     a3c:	99 27       	eor	r25, r25
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	82 2b       	or	r24, r18
     a48:	80 83       	st	Z, r24
     a4a:	2d 96       	adiw	r28, 0x0d	; 13
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	08 95       	ret

00000a6c <_ZN4Uart6enableEv>:
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 81       	ld	r18, Z
     a70:	31 81       	ldd	r19, Z+1	; 0x01
     a72:	21 30       	cpi	r18, 0x01	; 1
     a74:	31 05       	cpc	r19, r1
     a76:	e1 f0       	breq	.+56     	; 0xab0 <_ZN4Uart6enableEv+0x44>
     a78:	1c f4       	brge	.+6      	; 0xa80 <_ZN4Uart6enableEv+0x14>
     a7a:	23 2b       	or	r18, r19
     a7c:	41 f0       	breq	.+16     	; 0xa8e <_ZN4Uart6enableEv+0x22>
     a7e:	08 95       	ret
     a80:	22 30       	cpi	r18, 0x02	; 2
     a82:	31 05       	cpc	r19, r1
     a84:	31 f1       	breq	.+76     	; 0xad2 <_ZN4Uart6enableEv+0x66>
     a86:	23 30       	cpi	r18, 0x03	; 3
     a88:	31 05       	cpc	r19, r1
     a8a:	a1 f1       	breq	.+104    	; 0xaf4 <_ZN4Uart6enableEv+0x88>
     a8c:	08 95       	ret
     a8e:	82 81       	ldd	r24, Z+2	; 0x02
     a90:	88 23       	and	r24, r24
     a92:	29 f0       	breq	.+10     	; 0xa9e <_ZN4Uart6enableEv+0x32>
     a94:	a1 ec       	ldi	r26, 0xC1	; 193
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	8c 91       	ld	r24, X
     a9a:	80 61       	ori	r24, 0x10	; 16
     a9c:	8c 93       	st	X, r24
     a9e:	83 81       	ldd	r24, Z+3	; 0x03
     aa0:	88 23       	and	r24, r24
     aa2:	c1 f1       	breq	.+112    	; 0xb14 <_ZN4Uart6enableEv+0xa8>
     aa4:	e1 ec       	ldi	r30, 0xC1	; 193
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	88 60       	ori	r24, 0x08	; 8
     aac:	80 83       	st	Z, r24
     aae:	08 95       	ret
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	88 23       	and	r24, r24
     ab4:	29 f0       	breq	.+10     	; 0xac0 <_ZN4Uart6enableEv+0x54>
     ab6:	a9 ec       	ldi	r26, 0xC9	; 201
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	8c 91       	ld	r24, X
     abc:	80 61       	ori	r24, 0x10	; 16
     abe:	8c 93       	st	X, r24
     ac0:	83 81       	ldd	r24, Z+3	; 0x03
     ac2:	88 23       	and	r24, r24
     ac4:	39 f1       	breq	.+78     	; 0xb14 <_ZN4Uart6enableEv+0xa8>
     ac6:	e9 ec       	ldi	r30, 0xC9	; 201
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	88 60       	ori	r24, 0x08	; 8
     ace:	80 83       	st	Z, r24
     ad0:	08 95       	ret
     ad2:	82 81       	ldd	r24, Z+2	; 0x02
     ad4:	88 23       	and	r24, r24
     ad6:	29 f0       	breq	.+10     	; 0xae2 <_ZN4Uart6enableEv+0x76>
     ad8:	a1 ed       	ldi	r26, 0xD1	; 209
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	8c 91       	ld	r24, X
     ade:	80 61       	ori	r24, 0x10	; 16
     ae0:	8c 93       	st	X, r24
     ae2:	83 81       	ldd	r24, Z+3	; 0x03
     ae4:	88 23       	and	r24, r24
     ae6:	b1 f0       	breq	.+44     	; 0xb14 <_ZN4Uart6enableEv+0xa8>
     ae8:	e1 ed       	ldi	r30, 0xD1	; 209
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	88 60       	ori	r24, 0x08	; 8
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret
     af4:	82 81       	ldd	r24, Z+2	; 0x02
     af6:	88 23       	and	r24, r24
     af8:	29 f0       	breq	.+10     	; 0xb04 <_ZN4Uart6enableEv+0x98>
     afa:	a1 e3       	ldi	r26, 0x31	; 49
     afc:	b1 e0       	ldi	r27, 0x01	; 1
     afe:	8c 91       	ld	r24, X
     b00:	80 61       	ori	r24, 0x10	; 16
     b02:	8c 93       	st	X, r24
     b04:	83 81       	ldd	r24, Z+3	; 0x03
     b06:	88 23       	and	r24, r24
     b08:	29 f0       	breq	.+10     	; 0xb14 <_ZN4Uart6enableEv+0xa8>
     b0a:	e1 e3       	ldi	r30, 0x31	; 49
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	80 81       	ld	r24, Z
     b10:	88 60       	ori	r24, 0x08	; 8
     b12:	80 83       	st	Z, r24
     b14:	08 95       	ret

00000b16 <_ZN4Uart4LfCrEv>:
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	ec 01       	movw	r28, r24
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	6a e0       	ldi	r22, 0x0A	; 10
     b20:	07 d0       	rcall	.+14     	; 0xb30 <_ZN4Uart5writeEhb>
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	6d e0       	ldi	r22, 0x0D	; 13
     b26:	ce 01       	movw	r24, r28
     b28:	03 d0       	rcall	.+6      	; 0xb30 <_ZN4Uart5writeEhb>
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <_ZN4Uart5writeEhb>:
     b30:	fc 01       	movw	r30, r24
     b32:	20 81       	ld	r18, Z
     b34:	31 81       	ldd	r19, Z+1	; 0x01
     b36:	21 30       	cpi	r18, 0x01	; 1
     b38:	31 05       	cpc	r19, r1
     b3a:	91 f0       	breq	.+36     	; 0xb60 <_ZN4Uart5writeEhb+0x30>
     b3c:	1c f4       	brge	.+6      	; 0xb44 <_ZN4Uart5writeEhb+0x14>
     b3e:	23 2b       	or	r18, r19
     b40:	41 f0       	breq	.+16     	; 0xb52 <_ZN4Uart5writeEhb+0x22>
     b42:	22 c0       	rjmp	.+68     	; 0xb88 <_ZN4Uart5writeEhb+0x58>
     b44:	22 30       	cpi	r18, 0x02	; 2
     b46:	31 05       	cpc	r19, r1
     b48:	91 f0       	breq	.+36     	; 0xb6e <_ZN4Uart5writeEhb+0x3e>
     b4a:	23 30       	cpi	r18, 0x03	; 3
     b4c:	31 05       	cpc	r19, r1
     b4e:	b1 f0       	breq	.+44     	; 0xb7c <_ZN4Uart5writeEhb+0x4c>
     b50:	1b c0       	rjmp	.+54     	; 0xb88 <_ZN4Uart5writeEhb+0x58>
     b52:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     b56:	95 ff       	sbrs	r25, 5
     b58:	fc cf       	rjmp	.-8      	; 0xb52 <_ZN4Uart5writeEhb+0x22>
     b5a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     b5e:	14 c0       	rjmp	.+40     	; 0xb88 <_ZN4Uart5writeEhb+0x58>
     b60:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     b64:	95 ff       	sbrs	r25, 5
     b66:	fc cf       	rjmp	.-8      	; 0xb60 <_ZN4Uart5writeEhb+0x30>
     b68:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     b6c:	0d c0       	rjmp	.+26     	; 0xb88 <_ZN4Uart5writeEhb+0x58>
     b6e:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
     b72:	95 ff       	sbrs	r25, 5
     b74:	fc cf       	rjmp	.-8      	; 0xb6e <_ZN4Uart5writeEhb+0x3e>
     b76:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     b7a:	06 c0       	rjmp	.+12     	; 0xb88 <_ZN4Uart5writeEhb+0x58>
     b7c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
     b80:	95 ff       	sbrs	r25, 5
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <_ZN4Uart5writeEhb+0x4c>
     b84:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     b88:	44 23       	and	r20, r20
     b8a:	11 f0       	breq	.+4      	; 0xb90 <_ZN4Uart5writeEhb+0x60>
     b8c:	cf 01       	movw	r24, r30
     b8e:	c3 cf       	rjmp	.-122    	; 0xb16 <_ZN4Uart4LfCrEv>
     b90:	08 95       	ret

00000b92 <_ZN4Uart3clsEv>:
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	ec 01       	movw	r28, r24
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	6b e1       	ldi	r22, 0x1B	; 27
     b9c:	c9 df       	rcall	.-110    	; 0xb30 <_ZN4Uart5writeEhb>
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	6b e5       	ldi	r22, 0x5B	; 91
     ba2:	ce 01       	movw	r24, r28
     ba4:	c5 df       	rcall	.-118    	; 0xb30 <_ZN4Uart5writeEhb>
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	62 e3       	ldi	r22, 0x32	; 50
     baa:	ce 01       	movw	r24, r28
     bac:	c1 df       	rcall	.-126    	; 0xb30 <_ZN4Uart5writeEhb>
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	6a e4       	ldi	r22, 0x4A	; 74
     bb2:	ce 01       	movw	r24, r28
     bb4:	bd df       	rcall	.-134    	; 0xb30 <_ZN4Uart5writeEhb>
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	6b e1       	ldi	r22, 0x1B	; 27
     bba:	ce 01       	movw	r24, r28
     bbc:	b9 df       	rcall	.-142    	; 0xb30 <_ZN4Uart5writeEhb>
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	6b e5       	ldi	r22, 0x5B	; 91
     bc2:	ce 01       	movw	r24, r28
     bc4:	b5 df       	rcall	.-150    	; 0xb30 <_ZN4Uart5writeEhb>
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	68 e4       	ldi	r22, 0x48	; 72
     bca:	ce 01       	movw	r24, r28
     bcc:	b1 df       	rcall	.-158    	; 0xb30 <_ZN4Uart5writeEhb>
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <_ZN4Uart5writeEPcb>:
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	8c 01       	movw	r16, r24
     be0:	eb 01       	movw	r28, r22
     be2:	f4 2e       	mov	r15, r20
     be4:	68 81       	ld	r22, Y
     be6:	66 23       	and	r22, r22
     be8:	29 f0       	breq	.+10     	; 0xbf4 <_ZN4Uart5writeEPcb+0x20>
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	c8 01       	movw	r24, r16
     bee:	a0 df       	rcall	.-192    	; 0xb30 <_ZN4Uart5writeEhb>
     bf0:	21 96       	adiw	r28, 0x01	; 1
     bf2:	f8 cf       	rjmp	.-16     	; 0xbe4 <_ZN4Uart5writeEPcb+0x10>
     bf4:	ff 20       	and	r15, r15
     bf6:	11 f0       	breq	.+4      	; 0xbfc <_ZN4Uart5writeEPcb+0x28>
     bf8:	c8 01       	movw	r24, r16
     bfa:	8d df       	rcall	.-230    	; 0xb16 <_ZN4Uart4LfCrEv>
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	08 95       	ret

00000c08 <_ZN4Uart5writeEjb>:
 * \param linefeed
 *  is handed over to write for char arrays
 *  default value is false
 * \return void
 */
void Uart::write(uint16_t i, bool linefeed /*= false*/) {
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	00 d0       	rcall	.+0      	; 0xc14 <_ZN4Uart5writeEjb+0xc>
     c14:	00 d0       	rcall	.+0      	; 0xc16 <_ZN4Uart5writeEjb+0xe>
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	8c 01       	movw	r16, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	f4 2e       	mov	r15, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     c20:	4a e0       	ldi	r20, 0x0A	; 10
     c22:	be 01       	movw	r22, r28
     c24:	6f 5f       	subi	r22, 0xFF	; 255
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	43 d2       	rcall	.+1158   	; 0x10b0 <__itoa_ncheck>
	char s[6];
	itoa(i, s, 10);
	write(s, linefeed);	
     c2a:	4f 2d       	mov	r20, r15
     c2c:	be 01       	movw	r22, r28
     c2e:	6f 5f       	subi	r22, 0xFF	; 255
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	c8 01       	movw	r24, r16
     c34:	cf df       	rcall	.-98     	; 0xbd4 <_ZN4Uart5writeEPcb>
}
     c36:	26 96       	adiw	r28, 0x06	; 6
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	08 95       	ret

00000c4e <__subsf3>:
     c4e:	50 58       	subi	r21, 0x80	; 128

00000c50 <__addsf3>:
     c50:	bb 27       	eor	r27, r27
     c52:	aa 27       	eor	r26, r26
     c54:	0e d0       	rcall	.+28     	; 0xc72 <__addsf3x>
     c56:	48 c1       	rjmp	.+656    	; 0xee8 <__fp_round>
     c58:	39 d1       	rcall	.+626    	; 0xecc <__fp_pscA>
     c5a:	30 f0       	brcs	.+12     	; 0xc68 <__addsf3+0x18>
     c5c:	3e d1       	rcall	.+636    	; 0xeda <__fp_pscB>
     c5e:	20 f0       	brcs	.+8      	; 0xc68 <__addsf3+0x18>
     c60:	31 f4       	brne	.+12     	; 0xc6e <__addsf3+0x1e>
     c62:	9f 3f       	cpi	r25, 0xFF	; 255
     c64:	11 f4       	brne	.+4      	; 0xc6a <__addsf3+0x1a>
     c66:	1e f4       	brtc	.+6      	; 0xc6e <__addsf3+0x1e>
     c68:	2e c1       	rjmp	.+604    	; 0xec6 <__fp_nan>
     c6a:	0e f4       	brtc	.+2      	; 0xc6e <__addsf3+0x1e>
     c6c:	e0 95       	com	r30
     c6e:	e7 fb       	bst	r30, 7
     c70:	24 c1       	rjmp	.+584    	; 0xeba <__fp_inf>

00000c72 <__addsf3x>:
     c72:	e9 2f       	mov	r30, r25
     c74:	4a d1       	rcall	.+660    	; 0xf0a <__fp_split3>
     c76:	80 f3       	brcs	.-32     	; 0xc58 <__addsf3+0x8>
     c78:	ba 17       	cp	r27, r26
     c7a:	62 07       	cpc	r22, r18
     c7c:	73 07       	cpc	r23, r19
     c7e:	84 07       	cpc	r24, r20
     c80:	95 07       	cpc	r25, r21
     c82:	18 f0       	brcs	.+6      	; 0xc8a <__addsf3x+0x18>
     c84:	71 f4       	brne	.+28     	; 0xca2 <__addsf3x+0x30>
     c86:	9e f5       	brtc	.+102    	; 0xcee <__addsf3x+0x7c>
     c88:	62 c1       	rjmp	.+708    	; 0xf4e <__fp_zero>
     c8a:	0e f4       	brtc	.+2      	; 0xc8e <__addsf3x+0x1c>
     c8c:	e0 95       	com	r30
     c8e:	0b 2e       	mov	r0, r27
     c90:	ba 2f       	mov	r27, r26
     c92:	a0 2d       	mov	r26, r0
     c94:	0b 01       	movw	r0, r22
     c96:	b9 01       	movw	r22, r18
     c98:	90 01       	movw	r18, r0
     c9a:	0c 01       	movw	r0, r24
     c9c:	ca 01       	movw	r24, r20
     c9e:	a0 01       	movw	r20, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	ff 27       	eor	r31, r31
     ca4:	59 1b       	sub	r21, r25
     ca6:	99 f0       	breq	.+38     	; 0xcce <__addsf3x+0x5c>
     ca8:	59 3f       	cpi	r21, 0xF9	; 249
     caa:	50 f4       	brcc	.+20     	; 0xcc0 <__addsf3x+0x4e>
     cac:	50 3e       	cpi	r21, 0xE0	; 224
     cae:	68 f1       	brcs	.+90     	; 0xd0a <__addsf3x+0x98>
     cb0:	1a 16       	cp	r1, r26
     cb2:	f0 40       	sbci	r31, 0x00	; 0
     cb4:	a2 2f       	mov	r26, r18
     cb6:	23 2f       	mov	r18, r19
     cb8:	34 2f       	mov	r19, r20
     cba:	44 27       	eor	r20, r20
     cbc:	58 5f       	subi	r21, 0xF8	; 248
     cbe:	f3 cf       	rjmp	.-26     	; 0xca6 <__addsf3x+0x34>
     cc0:	46 95       	lsr	r20
     cc2:	37 95       	ror	r19
     cc4:	27 95       	ror	r18
     cc6:	a7 95       	ror	r26
     cc8:	f0 40       	sbci	r31, 0x00	; 0
     cca:	53 95       	inc	r21
     ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__addsf3x+0x4e>
     cce:	7e f4       	brtc	.+30     	; 0xcee <__addsf3x+0x7c>
     cd0:	1f 16       	cp	r1, r31
     cd2:	ba 0b       	sbc	r27, r26
     cd4:	62 0b       	sbc	r22, r18
     cd6:	73 0b       	sbc	r23, r19
     cd8:	84 0b       	sbc	r24, r20
     cda:	ba f0       	brmi	.+46     	; 0xd0a <__addsf3x+0x98>
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	a1 f0       	breq	.+40     	; 0xd08 <__addsf3x+0x96>
     ce0:	ff 0f       	add	r31, r31
     ce2:	bb 1f       	adc	r27, r27
     ce4:	66 1f       	adc	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	c2 f7       	brpl	.-16     	; 0xcdc <__addsf3x+0x6a>
     cec:	0e c0       	rjmp	.+28     	; 0xd0a <__addsf3x+0x98>
     cee:	ba 0f       	add	r27, r26
     cf0:	62 1f       	adc	r22, r18
     cf2:	73 1f       	adc	r23, r19
     cf4:	84 1f       	adc	r24, r20
     cf6:	48 f4       	brcc	.+18     	; 0xd0a <__addsf3x+0x98>
     cf8:	87 95       	ror	r24
     cfa:	77 95       	ror	r23
     cfc:	67 95       	ror	r22
     cfe:	b7 95       	ror	r27
     d00:	f7 95       	ror	r31
     d02:	9e 3f       	cpi	r25, 0xFE	; 254
     d04:	08 f0       	brcs	.+2      	; 0xd08 <__addsf3x+0x96>
     d06:	b3 cf       	rjmp	.-154    	; 0xc6e <__addsf3+0x1e>
     d08:	93 95       	inc	r25
     d0a:	88 0f       	add	r24, r24
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__addsf3x+0x9e>
     d0e:	99 27       	eor	r25, r25
     d10:	ee 0f       	add	r30, r30
     d12:	97 95       	ror	r25
     d14:	87 95       	ror	r24
     d16:	08 95       	ret

00000d18 <__divsf3>:
     d18:	0c d0       	rcall	.+24     	; 0xd32 <__divsf3x>
     d1a:	e6 c0       	rjmp	.+460    	; 0xee8 <__fp_round>
     d1c:	de d0       	rcall	.+444    	; 0xeda <__fp_pscB>
     d1e:	40 f0       	brcs	.+16     	; 0xd30 <__divsf3+0x18>
     d20:	d5 d0       	rcall	.+426    	; 0xecc <__fp_pscA>
     d22:	30 f0       	brcs	.+12     	; 0xd30 <__divsf3+0x18>
     d24:	21 f4       	brne	.+8      	; 0xd2e <__divsf3+0x16>
     d26:	5f 3f       	cpi	r21, 0xFF	; 255
     d28:	19 f0       	breq	.+6      	; 0xd30 <__divsf3+0x18>
     d2a:	c7 c0       	rjmp	.+398    	; 0xeba <__fp_inf>
     d2c:	51 11       	cpse	r21, r1
     d2e:	10 c1       	rjmp	.+544    	; 0xf50 <__fp_szero>
     d30:	ca c0       	rjmp	.+404    	; 0xec6 <__fp_nan>

00000d32 <__divsf3x>:
     d32:	eb d0       	rcall	.+470    	; 0xf0a <__fp_split3>
     d34:	98 f3       	brcs	.-26     	; 0xd1c <__divsf3+0x4>

00000d36 <__divsf3_pse>:
     d36:	99 23       	and	r25, r25
     d38:	c9 f3       	breq	.-14     	; 0xd2c <__divsf3+0x14>
     d3a:	55 23       	and	r21, r21
     d3c:	b1 f3       	breq	.-20     	; 0xd2a <__divsf3+0x12>
     d3e:	95 1b       	sub	r25, r21
     d40:	55 0b       	sbc	r21, r21
     d42:	bb 27       	eor	r27, r27
     d44:	aa 27       	eor	r26, r26
     d46:	62 17       	cp	r22, r18
     d48:	73 07       	cpc	r23, r19
     d4a:	84 07       	cpc	r24, r20
     d4c:	38 f0       	brcs	.+14     	; 0xd5c <__divsf3_pse+0x26>
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	aa 1f       	adc	r26, r26
     d5a:	a9 f3       	breq	.-22     	; 0xd46 <__divsf3_pse+0x10>
     d5c:	33 d0       	rcall	.+102    	; 0xdc4 <__divsf3_pse+0x8e>
     d5e:	0e 2e       	mov	r0, r30
     d60:	3a f0       	brmi	.+14     	; 0xd70 <__divsf3_pse+0x3a>
     d62:	e0 e8       	ldi	r30, 0x80	; 128
     d64:	30 d0       	rcall	.+96     	; 0xdc6 <__divsf3_pse+0x90>
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	50 40       	sbci	r21, 0x00	; 0
     d6a:	e6 95       	lsr	r30
     d6c:	00 1c       	adc	r0, r0
     d6e:	ca f7       	brpl	.-14     	; 0xd62 <__divsf3_pse+0x2c>
     d70:	29 d0       	rcall	.+82     	; 0xdc4 <__divsf3_pse+0x8e>
     d72:	fe 2f       	mov	r31, r30
     d74:	27 d0       	rcall	.+78     	; 0xdc4 <__divsf3_pse+0x8e>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	bb 1f       	adc	r27, r27
     d7e:	26 17       	cp	r18, r22
     d80:	37 07       	cpc	r19, r23
     d82:	48 07       	cpc	r20, r24
     d84:	ab 07       	cpc	r26, r27
     d86:	b0 e8       	ldi	r27, 0x80	; 128
     d88:	09 f0       	breq	.+2      	; 0xd8c <__divsf3_pse+0x56>
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	80 2d       	mov	r24, r0
     d8e:	bf 01       	movw	r22, r30
     d90:	ff 27       	eor	r31, r31
     d92:	93 58       	subi	r25, 0x83	; 131
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	2a f0       	brmi	.+10     	; 0xda2 <__divsf3_pse+0x6c>
     d98:	9e 3f       	cpi	r25, 0xFE	; 254
     d9a:	51 05       	cpc	r21, r1
     d9c:	68 f0       	brcs	.+26     	; 0xdb8 <__divsf3_pse+0x82>
     d9e:	8d c0       	rjmp	.+282    	; 0xeba <__fp_inf>
     da0:	d7 c0       	rjmp	.+430    	; 0xf50 <__fp_szero>
     da2:	5f 3f       	cpi	r21, 0xFF	; 255
     da4:	ec f3       	brlt	.-6      	; 0xda0 <__divsf3_pse+0x6a>
     da6:	98 3e       	cpi	r25, 0xE8	; 232
     da8:	dc f3       	brlt	.-10     	; 0xda0 <__divsf3_pse+0x6a>
     daa:	86 95       	lsr	r24
     dac:	77 95       	ror	r23
     dae:	67 95       	ror	r22
     db0:	b7 95       	ror	r27
     db2:	f7 95       	ror	r31
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__divsf3_pse+0x74>
     db8:	88 0f       	add	r24, r24
     dba:	91 1d       	adc	r25, r1
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	97 f9       	bld	r25, 7
     dc2:	08 95       	ret
     dc4:	e1 e0       	ldi	r30, 0x01	; 1
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	bb 1f       	adc	r27, r27
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	ba 07       	cpc	r27, r26
     dd6:	20 f0       	brcs	.+8      	; 0xde0 <__divsf3_pse+0xaa>
     dd8:	62 1b       	sub	r22, r18
     dda:	73 0b       	sbc	r23, r19
     ddc:	84 0b       	sbc	r24, r20
     dde:	ba 0b       	sbc	r27, r26
     de0:	ee 1f       	adc	r30, r30
     de2:	88 f7       	brcc	.-30     	; 0xdc6 <__divsf3_pse+0x90>
     de4:	e0 95       	com	r30
     de6:	08 95       	ret

00000de8 <__fixunssfsi>:
     de8:	98 d0       	rcall	.+304    	; 0xf1a <__fp_splitA>
     dea:	88 f0       	brcs	.+34     	; 0xe0e <__fixunssfsi+0x26>
     dec:	9f 57       	subi	r25, 0x7F	; 127
     dee:	90 f0       	brcs	.+36     	; 0xe14 <__fixunssfsi+0x2c>
     df0:	b9 2f       	mov	r27, r25
     df2:	99 27       	eor	r25, r25
     df4:	b7 51       	subi	r27, 0x17	; 23
     df6:	a0 f0       	brcs	.+40     	; 0xe20 <__fixunssfsi+0x38>
     df8:	d1 f0       	breq	.+52     	; 0xe2e <__fixunssfsi+0x46>
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	88 1f       	adc	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	1a f0       	brmi	.+6      	; 0xe0a <__fixunssfsi+0x22>
     e04:	ba 95       	dec	r27
     e06:	c9 f7       	brne	.-14     	; 0xdfa <__fixunssfsi+0x12>
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__fixunssfsi+0x46>
     e0a:	b1 30       	cpi	r27, 0x01	; 1
     e0c:	81 f0       	breq	.+32     	; 0xe2e <__fixunssfsi+0x46>
     e0e:	9f d0       	rcall	.+318    	; 0xf4e <__fp_zero>
     e10:	b1 e0       	ldi	r27, 0x01	; 1
     e12:	08 95       	ret
     e14:	9c c0       	rjmp	.+312    	; 0xf4e <__fp_zero>
     e16:	67 2f       	mov	r22, r23
     e18:	78 2f       	mov	r23, r24
     e1a:	88 27       	eor	r24, r24
     e1c:	b8 5f       	subi	r27, 0xF8	; 248
     e1e:	39 f0       	breq	.+14     	; 0xe2e <__fixunssfsi+0x46>
     e20:	b9 3f       	cpi	r27, 0xF9	; 249
     e22:	cc f3       	brlt	.-14     	; 0xe16 <__fixunssfsi+0x2e>
     e24:	86 95       	lsr	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b3 95       	inc	r27
     e2c:	d9 f7       	brne	.-10     	; 0xe24 <__fixunssfsi+0x3c>
     e2e:	3e f4       	brtc	.+14     	; 0xe3e <__fixunssfsi+0x56>
     e30:	90 95       	com	r25
     e32:	80 95       	com	r24
     e34:	70 95       	com	r23
     e36:	61 95       	neg	r22
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8f 4f       	sbci	r24, 0xFF	; 255
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	08 95       	ret

00000e40 <__floatunsisf>:
     e40:	e8 94       	clt
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <__floatsisf+0x12>

00000e44 <__floatsisf>:
     e44:	97 fb       	bst	r25, 7
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__floatsisf+0x12>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	99 23       	and	r25, r25
     e58:	a9 f0       	breq	.+42     	; 0xe84 <__floatsisf+0x40>
     e5a:	f9 2f       	mov	r31, r25
     e5c:	96 e9       	ldi	r25, 0x96	; 150
     e5e:	bb 27       	eor	r27, r27
     e60:	93 95       	inc	r25
     e62:	f6 95       	lsr	r31
     e64:	87 95       	ror	r24
     e66:	77 95       	ror	r23
     e68:	67 95       	ror	r22
     e6a:	b7 95       	ror	r27
     e6c:	f1 11       	cpse	r31, r1
     e6e:	f8 cf       	rjmp	.-16     	; 0xe60 <__floatsisf+0x1c>
     e70:	fa f4       	brpl	.+62     	; 0xeb0 <__floatsisf+0x6c>
     e72:	bb 0f       	add	r27, r27
     e74:	11 f4       	brne	.+4      	; 0xe7a <__floatsisf+0x36>
     e76:	60 ff       	sbrs	r22, 0
     e78:	1b c0       	rjmp	.+54     	; 0xeb0 <__floatsisf+0x6c>
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	8f 4f       	sbci	r24, 0xFF	; 255
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	16 c0       	rjmp	.+44     	; 0xeb0 <__floatsisf+0x6c>
     e84:	88 23       	and	r24, r24
     e86:	11 f0       	breq	.+4      	; 0xe8c <__floatsisf+0x48>
     e88:	96 e9       	ldi	r25, 0x96	; 150
     e8a:	11 c0       	rjmp	.+34     	; 0xeae <__floatsisf+0x6a>
     e8c:	77 23       	and	r23, r23
     e8e:	21 f0       	breq	.+8      	; 0xe98 <__floatsisf+0x54>
     e90:	9e e8       	ldi	r25, 0x8E	; 142
     e92:	87 2f       	mov	r24, r23
     e94:	76 2f       	mov	r23, r22
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <__floatsisf+0x5e>
     e98:	66 23       	and	r22, r22
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <__floatsisf+0x74>
     e9c:	96 e8       	ldi	r25, 0x86	; 134
     e9e:	86 2f       	mov	r24, r22
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	2a f0       	brmi	.+10     	; 0xeb0 <__floatsisf+0x6c>
     ea6:	9a 95       	dec	r25
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	88 1f       	adc	r24, r24
     eae:	da f7       	brpl	.-10     	; 0xea6 <__floatsisf+0x62>
     eb0:	88 0f       	add	r24, r24
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	97 f9       	bld	r25, 7
     eb8:	08 95       	ret

00000eba <__fp_inf>:
     eba:	97 f9       	bld	r25, 7
     ebc:	9f 67       	ori	r25, 0x7F	; 127
     ebe:	80 e8       	ldi	r24, 0x80	; 128
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	08 95       	ret

00000ec6 <__fp_nan>:
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	80 ec       	ldi	r24, 0xC0	; 192
     eca:	08 95       	ret

00000ecc <__fp_pscA>:
     ecc:	00 24       	eor	r0, r0
     ece:	0a 94       	dec	r0
     ed0:	16 16       	cp	r1, r22
     ed2:	17 06       	cpc	r1, r23
     ed4:	18 06       	cpc	r1, r24
     ed6:	09 06       	cpc	r0, r25
     ed8:	08 95       	ret

00000eda <__fp_pscB>:
     eda:	00 24       	eor	r0, r0
     edc:	0a 94       	dec	r0
     ede:	12 16       	cp	r1, r18
     ee0:	13 06       	cpc	r1, r19
     ee2:	14 06       	cpc	r1, r20
     ee4:	05 06       	cpc	r0, r21
     ee6:	08 95       	ret

00000ee8 <__fp_round>:
     ee8:	09 2e       	mov	r0, r25
     eea:	03 94       	inc	r0
     eec:	00 0c       	add	r0, r0
     eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0xc>
     ef0:	88 23       	and	r24, r24
     ef2:	52 f0       	brmi	.+20     	; 0xf08 <__fp_round+0x20>
     ef4:	bb 0f       	add	r27, r27
     ef6:	40 f4       	brcc	.+16     	; 0xf08 <__fp_round+0x20>
     ef8:	bf 2b       	or	r27, r31
     efa:	11 f4       	brne	.+4      	; 0xf00 <__fp_round+0x18>
     efc:	60 ff       	sbrs	r22, 0
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <__fp_round+0x20>
     f00:	6f 5f       	subi	r22, 0xFF	; 255
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <__fp_split3>:
     f0a:	57 fd       	sbrc	r21, 7
     f0c:	90 58       	subi	r25, 0x80	; 128
     f0e:	44 0f       	add	r20, r20
     f10:	55 1f       	adc	r21, r21
     f12:	59 f0       	breq	.+22     	; 0xf2a <__fp_splitA+0x10>
     f14:	5f 3f       	cpi	r21, 0xFF	; 255
     f16:	71 f0       	breq	.+28     	; 0xf34 <__fp_splitA+0x1a>
     f18:	47 95       	ror	r20

00000f1a <__fp_splitA>:
     f1a:	88 0f       	add	r24, r24
     f1c:	97 fb       	bst	r25, 7
     f1e:	99 1f       	adc	r25, r25
     f20:	61 f0       	breq	.+24     	; 0xf3a <__fp_splitA+0x20>
     f22:	9f 3f       	cpi	r25, 0xFF	; 255
     f24:	79 f0       	breq	.+30     	; 0xf44 <__fp_splitA+0x2a>
     f26:	87 95       	ror	r24
     f28:	08 95       	ret
     f2a:	12 16       	cp	r1, r18
     f2c:	13 06       	cpc	r1, r19
     f2e:	14 06       	cpc	r1, r20
     f30:	55 1f       	adc	r21, r21
     f32:	f2 cf       	rjmp	.-28     	; 0xf18 <__fp_split3+0xe>
     f34:	46 95       	lsr	r20
     f36:	f1 df       	rcall	.-30     	; 0xf1a <__fp_splitA>
     f38:	08 c0       	rjmp	.+16     	; 0xf4a <__fp_splitA+0x30>
     f3a:	16 16       	cp	r1, r22
     f3c:	17 06       	cpc	r1, r23
     f3e:	18 06       	cpc	r1, r24
     f40:	99 1f       	adc	r25, r25
     f42:	f1 cf       	rjmp	.-30     	; 0xf26 <__fp_splitA+0xc>
     f44:	86 95       	lsr	r24
     f46:	71 05       	cpc	r23, r1
     f48:	61 05       	cpc	r22, r1
     f4a:	08 94       	sec
     f4c:	08 95       	ret

00000f4e <__fp_zero>:
     f4e:	e8 94       	clt

00000f50 <__fp_szero>:
     f50:	bb 27       	eor	r27, r27
     f52:	66 27       	eor	r22, r22
     f54:	77 27       	eor	r23, r23
     f56:	cb 01       	movw	r24, r22
     f58:	97 f9       	bld	r25, 7
     f5a:	08 95       	ret

00000f5c <__mulsf3>:
     f5c:	0b d0       	rcall	.+22     	; 0xf74 <__mulsf3x>
     f5e:	c4 cf       	rjmp	.-120    	; 0xee8 <__fp_round>
     f60:	b5 df       	rcall	.-150    	; 0xecc <__fp_pscA>
     f62:	28 f0       	brcs	.+10     	; 0xf6e <__mulsf3+0x12>
     f64:	ba df       	rcall	.-140    	; 0xeda <__fp_pscB>
     f66:	18 f0       	brcs	.+6      	; 0xf6e <__mulsf3+0x12>
     f68:	95 23       	and	r25, r21
     f6a:	09 f0       	breq	.+2      	; 0xf6e <__mulsf3+0x12>
     f6c:	a6 cf       	rjmp	.-180    	; 0xeba <__fp_inf>
     f6e:	ab cf       	rjmp	.-170    	; 0xec6 <__fp_nan>
     f70:	11 24       	eor	r1, r1
     f72:	ee cf       	rjmp	.-36     	; 0xf50 <__fp_szero>

00000f74 <__mulsf3x>:
     f74:	ca df       	rcall	.-108    	; 0xf0a <__fp_split3>
     f76:	a0 f3       	brcs	.-24     	; 0xf60 <__mulsf3+0x4>

00000f78 <__mulsf3_pse>:
     f78:	95 9f       	mul	r25, r21
     f7a:	d1 f3       	breq	.-12     	; 0xf70 <__mulsf3+0x14>
     f7c:	95 0f       	add	r25, r21
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	55 1f       	adc	r21, r21
     f82:	62 9f       	mul	r22, r18
     f84:	f0 01       	movw	r30, r0
     f86:	72 9f       	mul	r23, r18
     f88:	bb 27       	eor	r27, r27
     f8a:	f0 0d       	add	r31, r0
     f8c:	b1 1d       	adc	r27, r1
     f8e:	63 9f       	mul	r22, r19
     f90:	aa 27       	eor	r26, r26
     f92:	f0 0d       	add	r31, r0
     f94:	b1 1d       	adc	r27, r1
     f96:	aa 1f       	adc	r26, r26
     f98:	64 9f       	mul	r22, r20
     f9a:	66 27       	eor	r22, r22
     f9c:	b0 0d       	add	r27, r0
     f9e:	a1 1d       	adc	r26, r1
     fa0:	66 1f       	adc	r22, r22
     fa2:	82 9f       	mul	r24, r18
     fa4:	22 27       	eor	r18, r18
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	62 1f       	adc	r22, r18
     fac:	73 9f       	mul	r23, r19
     fae:	b0 0d       	add	r27, r0
     fb0:	a1 1d       	adc	r26, r1
     fb2:	62 1f       	adc	r22, r18
     fb4:	83 9f       	mul	r24, r19
     fb6:	a0 0d       	add	r26, r0
     fb8:	61 1d       	adc	r22, r1
     fba:	22 1f       	adc	r18, r18
     fbc:	74 9f       	mul	r23, r20
     fbe:	33 27       	eor	r19, r19
     fc0:	a0 0d       	add	r26, r0
     fc2:	61 1d       	adc	r22, r1
     fc4:	23 1f       	adc	r18, r19
     fc6:	84 9f       	mul	r24, r20
     fc8:	60 0d       	add	r22, r0
     fca:	21 1d       	adc	r18, r1
     fcc:	82 2f       	mov	r24, r18
     fce:	76 2f       	mov	r23, r22
     fd0:	6a 2f       	mov	r22, r26
     fd2:	11 24       	eor	r1, r1
     fd4:	9f 57       	subi	r25, 0x7F	; 127
     fd6:	50 40       	sbci	r21, 0x00	; 0
     fd8:	8a f0       	brmi	.+34     	; 0xffc <__mulsf3_pse+0x84>
     fda:	e1 f0       	breq	.+56     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     fdc:	88 23       	and	r24, r24
     fde:	4a f0       	brmi	.+18     	; 0xff2 <__mulsf3_pse+0x7a>
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	bb 1f       	adc	r27, r27
     fe6:	66 1f       	adc	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	50 40       	sbci	r21, 0x00	; 0
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <__mulsf3_pse+0x64>
     ff2:	9e 3f       	cpi	r25, 0xFE	; 254
     ff4:	51 05       	cpc	r21, r1
     ff6:	70 f0       	brcs	.+28     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     ff8:	60 cf       	rjmp	.-320    	; 0xeba <__fp_inf>
     ffa:	aa cf       	rjmp	.-172    	; 0xf50 <__fp_szero>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	ec f3       	brlt	.-6      	; 0xffa <__mulsf3_pse+0x82>
    1000:	98 3e       	cpi	r25, 0xE8	; 232
    1002:	dc f3       	brlt	.-10     	; 0xffa <__mulsf3_pse+0x82>
    1004:	86 95       	lsr	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b7 95       	ror	r27
    100c:	f7 95       	ror	r31
    100e:	e7 95       	ror	r30
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	c1 f7       	brne	.-16     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1014:	fe 2b       	or	r31, r30
    1016:	88 0f       	add	r24, r24
    1018:	91 1d       	adc	r25, r1
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
    101e:	97 f9       	bld	r25, 7
    1020:	08 95       	ret

00001022 <__udivmodsi4>:
    1022:	a1 e2       	ldi	r26, 0x21	; 33
    1024:	1a 2e       	mov	r1, r26
    1026:	aa 1b       	sub	r26, r26
    1028:	bb 1b       	sub	r27, r27
    102a:	fd 01       	movw	r30, r26
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <__udivmodsi4_ep>

0000102e <__udivmodsi4_loop>:
    102e:	aa 1f       	adc	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	ee 1f       	adc	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	a2 17       	cp	r26, r18
    1038:	b3 07       	cpc	r27, r19
    103a:	e4 07       	cpc	r30, r20
    103c:	f5 07       	cpc	r31, r21
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__udivmodsi4_ep>
    1040:	a2 1b       	sub	r26, r18
    1042:	b3 0b       	sbc	r27, r19
    1044:	e4 0b       	sbc	r30, r20
    1046:	f5 0b       	sbc	r31, r21

00001048 <__udivmodsi4_ep>:
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	1a 94       	dec	r1
    1052:	69 f7       	brne	.-38     	; 0x102e <__udivmodsi4_loop>
    1054:	60 95       	com	r22
    1056:	70 95       	com	r23
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	bd 01       	movw	r22, r26
    1062:	cf 01       	movw	r24, r30
    1064:	08 95       	ret

00001066 <__umulhisi3>:
    1066:	a2 9f       	mul	r26, r18
    1068:	b0 01       	movw	r22, r0
    106a:	b3 9f       	mul	r27, r19
    106c:	c0 01       	movw	r24, r0
    106e:	a3 9f       	mul	r26, r19
    1070:	70 0d       	add	r23, r0
    1072:	81 1d       	adc	r24, r1
    1074:	11 24       	eor	r1, r1
    1076:	91 1d       	adc	r25, r1
    1078:	b2 9f       	mul	r27, r18
    107a:	70 0d       	add	r23, r0
    107c:	81 1d       	adc	r24, r1
    107e:	11 24       	eor	r1, r1
    1080:	91 1d       	adc	r25, r1
    1082:	08 95       	ret

00001084 <__usmulhisi3>:
    1084:	f0 df       	rcall	.-32     	; 0x1066 <__umulhisi3>

00001086 <__usmulhisi3_tail>:
    1086:	b7 ff       	sbrs	r27, 7
    1088:	08 95       	ret
    108a:	82 1b       	sub	r24, r18
    108c:	93 0b       	sbc	r25, r19
    108e:	08 95       	ret

00001090 <__mulshisi3>:
    1090:	b7 ff       	sbrs	r27, 7
    1092:	04 c0       	rjmp	.+8      	; 0x109c <__muluhisi3>

00001094 <__mulohisi3>:
    1094:	03 d0       	rcall	.+6      	; 0x109c <__muluhisi3>
    1096:	82 1b       	sub	r24, r18
    1098:	93 0b       	sbc	r25, r19
    109a:	08 95       	ret

0000109c <__muluhisi3>:
    109c:	e4 df       	rcall	.-56     	; 0x1066 <__umulhisi3>
    109e:	a5 9f       	mul	r26, r21
    10a0:	90 0d       	add	r25, r0
    10a2:	b4 9f       	mul	r27, r20
    10a4:	90 0d       	add	r25, r0
    10a6:	a4 9f       	mul	r26, r20
    10a8:	80 0d       	add	r24, r0
    10aa:	91 1d       	adc	r25, r1
    10ac:	11 24       	eor	r1, r1
    10ae:	08 95       	ret

000010b0 <__itoa_ncheck>:
    10b0:	bb 27       	eor	r27, r27
    10b2:	4a 30       	cpi	r20, 0x0A	; 10
    10b4:	31 f4       	brne	.+12     	; 0x10c2 <__itoa_ncheck+0x12>
    10b6:	99 23       	and	r25, r25
    10b8:	22 f4       	brpl	.+8      	; 0x10c2 <__itoa_ncheck+0x12>
    10ba:	bd e2       	ldi	r27, 0x2D	; 45
    10bc:	90 95       	com	r25
    10be:	81 95       	neg	r24
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <__utoa_common>

000010c4 <__utoa_ncheck>:
    10c4:	bb 27       	eor	r27, r27

000010c6 <__utoa_common>:
    10c6:	fb 01       	movw	r30, r22
    10c8:	55 27       	eor	r21, r21
    10ca:	aa 27       	eor	r26, r26
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	aa 1f       	adc	r26, r26
    10d2:	a4 17       	cp	r26, r20
    10d4:	10 f0       	brcs	.+4      	; 0x10da <__utoa_common+0x14>
    10d6:	a4 1b       	sub	r26, r20
    10d8:	83 95       	inc	r24
    10da:	50 51       	subi	r21, 0x10	; 16
    10dc:	b9 f7       	brne	.-18     	; 0x10cc <__utoa_common+0x6>
    10de:	a0 5d       	subi	r26, 0xD0	; 208
    10e0:	aa 33       	cpi	r26, 0x3A	; 58
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <__utoa_common+0x20>
    10e4:	a9 5d       	subi	r26, 0xD9	; 217
    10e6:	a1 93       	st	Z+, r26
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	79 f7       	brne	.-34     	; 0x10ca <__utoa_common+0x4>
    10ec:	b1 11       	cpse	r27, r1
    10ee:	b1 93       	st	Z+, r27
    10f0:	11 92       	st	Z+, r1
    10f2:	cb 01       	movw	r24, r22
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <strrev>

000010f6 <strrev>:
    10f6:	dc 01       	movw	r26, r24
    10f8:	fc 01       	movw	r30, r24
    10fa:	67 2f       	mov	r22, r23
    10fc:	71 91       	ld	r23, Z+
    10fe:	77 23       	and	r23, r23
    1100:	e1 f7       	brne	.-8      	; 0x10fa <strrev+0x4>
    1102:	32 97       	sbiw	r30, 0x02	; 2
    1104:	04 c0       	rjmp	.+8      	; 0x110e <strrev+0x18>
    1106:	7c 91       	ld	r23, X
    1108:	6d 93       	st	X+, r22
    110a:	70 83       	st	Z, r23
    110c:	62 91       	ld	r22, -Z
    110e:	ae 17       	cp	r26, r30
    1110:	bf 07       	cpc	r27, r31
    1112:	c8 f3       	brcs	.-14     	; 0x1106 <strrev+0x10>
    1114:	08 95       	ret

00001116 <_exit>:
    1116:	f8 94       	cli

00001118 <__stop_program>:
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <__stop_program>
