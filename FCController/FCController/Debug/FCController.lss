
FCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  00000a7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e91  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5c  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e4  00000000  00000000  00002621  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000624  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003dd  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	a1 c0       	rjmp	.+322    	; 0x148 <__vector_1>
   6:	00 00       	nop
   8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__vector_2>
   a:	00 00       	nop
   c:	4b c1       	rjmp	.+662    	; 0x2a4 <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2a c0       	rjmp	.+84     	; 0x10a <__vector_45>
  b6:	00 00       	nop
  b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__vector_46>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 30       	cpi	r26, 0x09	; 9
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	27 d1       	rcall	.+590    	; 0x354 <main>
 106:	7d c4       	rjmp	.+2298   	; 0xa02 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_45>:

#include<avr/interrupt.h>
#include "../general.h"

// stop Usonic measurement for it took too long
ISR(TIMER4_OVF_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	8f 93       	push	r24
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	TCCR4B &= ~(1 << CS40);		// stop timer
 11e:	e1 ea       	ldi	r30, 0xA1	; 161
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24
	TCNT4 = 0;					// reset timer value
 128:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 12c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	waiting = 0;
 130:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <waiting>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0b be       	out	0x3b, r0	; 59
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_1>:

// Usonic measurement (inside)
// gets called when the level on PD0 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT0_vect) {
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0b b6       	in	r0, 0x3b	; 59
 154:	0f 92       	push	r0
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(PIND & (1 << PD0)) {		// rising edge
 172:	48 9b       	sbis	0x09, 0	; 9
 174:	06 c0       	rjmp	.+12     	; 0x182 <__vector_1+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 176:	e1 ea       	ldi	r30, 0xA1	; 161
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 83       	st	Z, r24
 180:	25 c0       	rjmp	.+74     	; 0x1cc <__vector_1+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 182:	e1 ea       	ldi	r30, 0xA1	; 161
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 18c:	c4 ea       	ldi	r28, 0xA4	; 164
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	28 81       	ld	r18, Y
 192:	39 81       	ldd	r19, Y+1	; 0x01
 194:	a7 e5       	ldi	r26, 0x57	; 87
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	0f d4       	rcall	.+2078   	; 0x9b8 <__umulhisi3>
 19a:	fb d2       	rcall	.+1526   	; 0x792 <__floatunsisf>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e8       	ldi	r20, 0x80	; 128
 1a2:	5d e3       	ldi	r21, 0x3D	; 61
 1a4:	84 d3       	rcall	.+1800   	; 0x8ae <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	4a ef       	ldi	r20, 0xFA	; 250
 1ac:	54 e4       	ldi	r21, 0x44	; 68
 1ae:	5d d2       	rcall	.+1210   	; 0x66a <__divsf3>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	5f e3       	ldi	r21, 0x3F	; 63
 1b8:	f4 d1       	rcall	.+1000   	; 0x5a2 <__addsf3>
 1ba:	bf d2       	rcall	.+1406   	; 0x73a <__fixunssfsi>
		tData[0] = (dist >> 8);
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	70 83       	st	Z, r23
		tData[1] = dist;
 1c2:	61 83       	std	Z+1, r22	; 0x01
		TCNT4 = 0;
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	18 82       	st	Y, r1
		waiting = 0;
 1c8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <waiting>
	}
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_2>:

// Usonic measurement (outside)
// gets called when the level on PD1 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT1_vect) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	0b b6       	in	r0, 0x3b	; 59
 202:	0f 92       	push	r0
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if(PIND & (1 << PD1)) {		// rising edge
 220:	49 9b       	sbis	0x09, 1	; 9
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_2+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 224:	e1 ea       	ldi	r30, 0xA1	; 161
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	23 c0       	rjmp	.+70     	; 0x276 <__vector_2+0x80>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 230:	e1 ea       	ldi	r30, 0xA1	; 161
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 23a:	c4 ea       	ldi	r28, 0xA4	; 164
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	28 81       	ld	r18, Y
 240:	39 81       	ldd	r19, Y+1	; 0x01
 242:	a7 e5       	ldi	r26, 0x57	; 87
 244:	b1 e0       	ldi	r27, 0x01	; 1
 246:	b8 d3       	rcall	.+1904   	; 0x9b8 <__umulhisi3>
 248:	a4 d2       	rcall	.+1352   	; 0x792 <__floatunsisf>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5d e3       	ldi	r21, 0x3D	; 61
 252:	2d d3       	rcall	.+1626   	; 0x8ae <__mulsf3>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a ef       	ldi	r20, 0xFA	; 250
 25a:	54 e4       	ldi	r21, 0x44	; 68
 25c:	06 d2       	rcall	.+1036   	; 0x66a <__divsf3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	5f e3       	ldi	r21, 0x3F	; 63
 266:	9d d1       	rcall	.+826    	; 0x5a2 <__addsf3>
 268:	68 d2       	rcall	.+1232   	; 0x73a <__fixunssfsi>
		tData[2] = (dist >> 8);
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	72 83       	std	Z+2, r23	; 0x02
		tData[3] = dist;
 270:	63 83       	std	Z+3, r22	; 0x03
		TCNT4 = 0;
 272:	19 82       	std	Y+1, r1	; 0x01
 274:	18 82       	st	Y, r1
	}
	waiting = 0;
 276:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <waiting>
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0b be       	out	0x3b, r0	; 59
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_3>:

// !SS falling edge 
// PIN PD2 must be connected to !SS pin
// stops the LED Timer because a transmission starts
ISR(INT2_vect) {
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	0f 92       	push	r0
 2b2:	8f 93       	push	r24
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	TCCR5B &= ~((1 << CS50) | (1 << CS51));		// stop LED Timer
 2b8:	e1 e2       	ldi	r30, 0x21	; 33
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	80 81       	ld	r24, Z
 2be:	8c 7f       	andi	r24, 0xFC	; 252
 2c0:	80 83       	st	Z, r24
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	8f 91       	pop	r24
 2c8:	0f 90       	pop	r0
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_46>:

// LEDs
// when ICR is reached the next 16Bit LED value is set
ISR(TIMER5_CAPT_vect) {
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
	leds <<= 1;
 2e6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leds>
 2ea:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leds+0x1>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <leds+0x1>
 2f6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <leds>
	if(leds < 3) { 
 2fa:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leds>
 2fe:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leds+0x1>
 302:	03 97       	sbiw	r24, 0x03	; 3
 304:	38 f4       	brcc	.+14     	; 0x314 <__vector_46+0x3e>
		leds = 3;
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <leds+0x1>
 30e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <leds>
 312:	0d c0       	rjmp	.+26     	; 0x32e <__vector_46+0x58>
	} else if (leds == 0x8000) {
 314:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leds>
 318:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leds+0x1>
 31c:	81 15       	cp	r24, r1
 31e:	90 48       	sbci	r25, 0x80	; 128
 320:	31 f4       	brne	.+12     	; 0x32e <__vector_46+0x58>
		leds = 0x8001;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e8       	ldi	r25, 0x80	; 128
 326:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <leds+0x1>
 32a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <leds>
	} 
	PORTF = leds;
 32e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leds>
 332:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leds+0x1>
 336:	81 bb       	out	0x11, r24	; 17
	PORTK = (leds >> 8);		
 338:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leds>
 33c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leds+0x1>
 340:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
}
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <main>:
{
	
	//INIT Pump timer 1
	//PWM-frequency: 2kHz
	//>0% ... >40% Dutycycle
	DDRB |= (1 << PUMP_PWM) | (1 << GENERATOR_PWM);	// PWM pins as output
 354:	84 b1       	in	r24, 0x04	; 4
 356:	80 66       	ori	r24, 0x60	; 96
 358:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11);
 35a:	e0 e8       	ldi	r30, 0x80	; 128
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	82 60       	ori	r24, 0x02	; 2
 362:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) |( 1 << WGM13);			// FastPWM mode 14
 364:	a1 e8       	ldi	r26, 0x81	; 129
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	8c 91       	ld	r24, X
 36a:	88 61       	ori	r24, 0x18	; 24
 36c:	8c 93       	st	X, r24
	ICR1 = PUMP_ICR -1;								// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 36e:	2f e3       	ldi	r18, 0x3F	; 63
 370:	3f e1       	ldi	r19, 0x1F	; 31
 372:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 376:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
	OCR1A = 0;										// DutyCyle = 0%
 37a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 37e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;										// DutyCycle = 0%
 382:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 386:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		
	
	//INIT windmill timer 3
	//PWM frequency: 25kHz
	//>0% ... >50% Dutycycle
	DDRE |= (1 << WM_PWM_OUT);					// PWM pin as output
 38a:	8d b1       	in	r24, 0x0d	; 13
 38c:	88 60       	ori	r24, 0x08	; 8
 38e:	8d b9       	out	0x0d, r24	; 13
	TCCR3A |= (1 << WGM11);
 390:	e0 e9       	ldi	r30, 0x90	; 144
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	82 60       	ori	r24, 0x02	; 2
 398:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM12) | (1 << WGM13);		// FastPWM mode 14
 39a:	41 e9       	ldi	r20, 0x91	; 145
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	fa 01       	movw	r30, r20
 3a0:	80 81       	ld	r24, Z
 3a2:	88 61       	ori	r24, 0x18	; 24
 3a4:	80 83       	st	Z, r24
	ICR3 = WM_ICR - 1;							// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 3a6:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 3aa:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	OCR3A = 0;									// DutyCycle = 0%
 3ae:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 3b2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	// 30cm max. depth of water => 60cm way of sound => ca. 2ms duration
	// 16Bit timer with prescaler 1 (16MHz clock) => after ca. 4ms Overflow => cancel meassurement and write 0 to array
	// not Timer output required, only set prescaler to start timer and configure Overflow Interrupt to end measurement. 
	// start Timer: TCCR4B |= (1 << CS40);
	// stopp Timer: TCCR4B &= ~(1 << CS40);
	TIMSK4 |= (1 << TOIE4);					// set interrupt (measurement takes too long)
 3b6:	c2 e7       	ldi	r28, 0x72	; 114
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
 3ba:	88 81       	ld	r24, Y
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	88 83       	st	Y, r24
	TCNT4 = 0;								// set counter to 0 
 3c0:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 3c4:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	EICRA |= (1 << ISC00) | (1 << ISC10);					// configure INT0 on PD0 and INT1 on PD1 to any edge for Sensor 1 and 2
 3c8:	c9 e6       	ldi	r28, 0x69	; 105
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	88 81       	ld	r24, Y
 3ce:	85 60       	ori	r24, 0x05	; 5
 3d0:	88 83       	st	Y, r24
	DDRJ |= (1 << US_TRIGGER_IN) | (1 << US_TRIGGER_OUT);	// configure PJ2 and PJ3 as Trigger output pins
 3d2:	24 e0       	ldi	r18, 0x04	; 4
 3d4:	31 e0       	ldi	r19, 0x01	; 1
 3d6:	f9 01       	movw	r30, r18
 3d8:	80 81       	ld	r24, Z
 3da:	83 60       	ori	r24, 0x03	; 3
 3dc:	80 83       	st	Z, r24
	// maxValue for 100% (e.g. 0.5s per LED)
	// PWM Frequency >200Hz
	// Both directions with outputs PF0 .. PF7 and PK0 .. PK7
	//      only plugged vice versa for other direction
	// two pins for MOSFETs to select the LED bank
	DDRF = 0xFF;
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	80 bb       	out	0x10, r24	; 16
	DDRK = 0xFF;
 3e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRH |= (1 << LED_GENERATOR) | (1 << LED_PUMP);		// Pins to select LED running light (per MOSFET)
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	31 e0       	ldi	r19, 0x01	; 1
 3ea:	f9 01       	movw	r30, r18
 3ec:	80 81       	ld	r24, Z
 3ee:	83 60       	ori	r24, 0x03	; 3
 3f0:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM52) |( 1 << WGM53);				// CTC mode 12
 3f2:	21 e2       	ldi	r18, 0x21	; 33
 3f4:	31 e0       	ldi	r19, 0x01	; 1
 3f6:	f9 01       	movw	r30, r18
 3f8:	80 81       	ld	r24, Z
 3fa:	88 61       	ori	r24, 0x18	; 24
 3fc:	80 83       	st	Z, r24
	ICR5 = LED_SLOWEST_OCR - 1;							// default value -> must be calculated
 3fe:	8f e4       	ldi	r24, 0x4F	; 79
 400:	93 ec       	ldi	r25, 0xC3	; 195
 402:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 406:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
	TIMSK5 |= (1 << ICIE5);
 40a:	23 e7       	ldi	r18, 0x73	; 115
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	f9 01       	movw	r30, r18
 410:	80 81       	ld	r24, Z
 412:	80 62       	ori	r24, 0x20	; 32
 414:	80 83       	st	Z, r24

	
	EICRA |= ( 1 << ISC21);							// enable INT2 on PD2 for falling edge (connect to !SS pin)
 416:	88 81       	ld	r24, Y
 418:	80 62       	ori	r24, 0x20	; 32
 41a:	88 83       	st	Y, r24
	
	TCCR1B |= (1 << CS10);				// start Timer 1 (Pumps) 
 41c:	8c 91       	ld	r24, X
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS10);				// start Timer 3 (Windmill) 
 422:	fa 01       	movw	r30, r20
 424:	80 81       	ld	r24, Z
 426:	81 60       	ori	r24, 0x01	; 1
 428:	80 83       	st	Z, r24
	sei();
 42a:	78 94       	sei
		
		//////////////////////////////////////////////////////////////////////////
		//                 calc pumps + LED Running Light
		//////////////////////////////////////////////////////////////////////////
		uint8_t absData = 0;
		if(rData[0] < 0) absData = rData[0] * (-1);
 42c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rData>
 430:	88 23       	and	r24, r24
 432:	24 f4       	brge	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 434:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <rData>
 438:	c1 94       	neg	r12
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			else absData = rData[0];
 43c:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <rData>
		if(rData[0] == 0) {
 440:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rData>
 444:	81 11       	cpse	r24, r1
 446:	08 c0       	rjmp	.+16     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			OCR1A = 0;
 448:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 44c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			PORTB &= ~((1 << PUMP_PWM) | (1 << GENERATOR_PWM));	
 450:	85 b1       	in	r24, 0x05	; 5
 452:	8f 79       	andi	r24, 0x9F	; 159
 454:	85 b9       	out	0x05, r24	; 5
 456:	37 c0       	rjmp	.+110    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		} else {
			if(rData[0] > 0) {	// generator runs
 458:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rData>
 45c:	18 16       	cp	r1, r24
 45e:	3c f4       	brge	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
				PORTB &= ~(1 << PUMP_PWM);		// disable pump leds mosfet
 460:	85 b1       	in	r24, 0x05	; 5
 462:	8f 7b       	andi	r24, 0xBF	; 191
 464:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << GENERATOR_PWM);	// enable generator leds mosfet
 466:	85 b1       	in	r24, 0x05	; 5
 468:	80 62       	ori	r24, 0x20	; 32
 46a:	85 b9       	out	0x05, r24	; 5
 46c:	06 c0       	rjmp	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			} else {
				PORTB &= ~(1 << GENERATOR_PWM);		// disable pump leds mosfet
 46e:	85 b1       	in	r24, 0x05	; 5
 470:	8f 7d       	andi	r24, 0xDF	; 223
 472:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PUMP_PWM);			// enable generator leds mosfet
 474:	85 b1       	in	r24, 0x05	; 5
 476:	80 64       	ori	r24, 0x40	; 64
 478:	85 b9       	out	0x05, r24	; 5
			}
			OCR1A = (uint16_t)((((uint32_t)absData * (uint32_t)(PUMP_ICR - PUMP_SLOWEST_OCR))/100) + PUMP_SLOWEST_OCR);
 47a:	d1 2c       	mov	r13, r1
 47c:	e1 2c       	mov	r14, r1
 47e:	f1 2c       	mov	r15, r1
 480:	a0 ea       	ldi	r26, 0xA0	; 160
 482:	bf e0       	ldi	r27, 0x0F	; 15
 484:	a7 01       	movw	r20, r14
 486:	96 01       	movw	r18, r12
 488:	ac d2       	rcall	.+1368   	; 0x9e2 <__muluhisi3>
 48a:	0f 2e       	mov	r0, r31
 48c:	f4 e6       	ldi	r31, 0x64	; 100
 48e:	8f 2e       	mov	r8, r31
 490:	91 2c       	mov	r9, r1
 492:	a1 2c       	mov	r10, r1
 494:	b1 2c       	mov	r11, r1
 496:	f0 2d       	mov	r31, r0
 498:	a5 01       	movw	r20, r10
 49a:	94 01       	movw	r18, r8
 49c:	6b d2       	rcall	.+1238   	; 0x974 <__udivmodsi4>
 49e:	20 56       	subi	r18, 0x60	; 96
 4a0:	30 4f       	sbci	r19, 0xF0	; 240
 4a2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4a6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			ICR5 = (uint16_t)((((uint32_t)absData * (uint32_t)(LED_FASTEST_OCR - LED_SLOWEST_OCR))/100) + LED_SLOWEST_OCR);
 4aa:	a8 e3       	ldi	r26, 0x38	; 56
 4ac:	b0 e5       	ldi	r27, 0x50	; 80
 4ae:	a7 01       	movw	r20, r14
 4b0:	96 01       	movw	r18, r12
 4b2:	a3 d2       	rcall	.+1350   	; 0x9fa <__mulohisi3>
 4b4:	a5 01       	movw	r20, r10
 4b6:	94 01       	movw	r18, r8
 4b8:	5d d2       	rcall	.+1210   	; 0x974 <__udivmodsi4>
 4ba:	20 5b       	subi	r18, 0xB0	; 176
 4bc:	3c 43       	sbci	r19, 0x3C	; 60
 4be:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 4c2:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//                       calc Windmill - PWM
		//////////////////////////////////////////////////////////////////////////
		if(rData[1] <= 0) {
 4c6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <rData+0x1>
 4ca:	18 16       	cp	r1, r24
 4cc:	2c f0       	brlt	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			OCR3A = 0;
 4ce:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 4d2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 4d6:	13 c0       	rjmp	.+38     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		} else {
			OCR3A =  (uint16_t)((((uint32_t)rData[1] * (uint32_t)(WM_ICR - WM_SLOWEST_OCR))/100) + WM_SLOWEST_OCR);
 4d8:	a0 91 07 02 	lds	r26, 0x0207	; 0x800207 <rData+0x1>
 4dc:	0a 2e       	mov	r0, r26
 4de:	00 0c       	add	r0, r0
 4e0:	bb 0b       	sbc	r27, r27
 4e2:	20 ea       	ldi	r18, 0xA0	; 160
 4e4:	3f e0       	ldi	r19, 0x0F	; 15
 4e6:	77 d2       	rcall	.+1262   	; 0x9d6 <__usmulhisi3>
 4e8:	24 e6       	ldi	r18, 0x64	; 100
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	41 d2       	rcall	.+1154   	; 0x974 <__udivmodsi4>
 4f2:	20 56       	subi	r18, 0x60	; 96
 4f4:	30 4f       	sbci	r19, 0xF0	; 240
 4f6:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 4fa:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		// 3. in ISR if rising edge start Timer 4
		// 4. wait for falling edge on INT0
		// 5. in ISR if falling edge stop Timer 4
		// 6. calculate distance and set tData 0 and 1
		// 7. stop INT0 sensing and set TCNT4 = 0
		PORTJ |= (1 << US_TRIGGER_IN);
 4fe:	e5 e0       	ldi	r30, 0x05	; 5
 500:	f1 e0       	ldi	r31, 0x01	; 1
 502:	80 81       	ld	r24, Z
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 508:	8a e6       	ldi	r24, 0x6A	; 106
 50a:	8a 95       	dec	r24
 50c:	f1 f7       	brne	.-4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_IN);
 510:	80 81       	ld	r24, Z
 512:	8e 7f       	andi	r24, 0xFE	; 254
 514:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);			// activate INT0 interrupt 
 516:	8d b3       	in	r24, 0x1d	; 29
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <waiting>
		while(waiting){
 522:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <waiting>
 526:	81 11       	cpse	r24, r1
 528:	fc cf       	rjmp	.-8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
		};
		EIMSK &= ~(1 << INT0);			// deactivate INT0 interrupt
 52a:	8d b3       	in	r24, 0x1d	; 29
 52c:	8e 7f       	andi	r24, 0xFE	; 254
 52e:	8d bb       	out	0x1d, r24	; 29
		
		PORTJ |= (1 << US_TRIGGER_OUT);
 530:	e5 e0       	ldi	r30, 0x05	; 5
 532:	f1 e0       	ldi	r31, 0x01	; 1
 534:	80 81       	ld	r24, Z
 536:	82 60       	ori	r24, 0x02	; 2
 538:	80 83       	st	Z, r24
 53a:	8a e6       	ldi	r24, 0x6A	; 106
 53c:	8a 95       	dec	r24
 53e:	f1 f7       	brne	.-4      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 540:	00 c0       	rjmp	.+0      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_OUT);
 542:	80 81       	ld	r24, Z
 544:	8d 7f       	andi	r24, 0xFD	; 253
 546:	80 83       	st	Z, r24
		EIMSK |= (1 << INT1);			// activate INT1 interrupt 
 548:	8d b3       	in	r24, 0x1d	; 29
 54a:	82 60       	ori	r24, 0x02	; 2
 54c:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <waiting>
		while(waiting){
 554:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <waiting>
 558:	81 11       	cpse	r24, r1
 55a:	fc cf       	rjmp	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		};
		EIMSK &= ~(1 << INT1);			// deactivate INT1 interrupt 
 55c:	8d b3       	in	r24, 0x1d	; 29
 55e:	8d 7f       	andi	r24, 0xFD	; 253
 560:	8d bb       	out	0x1d, r24	; 29
		
		
		
		TCCR5B |= (1 << CS50) | (1 << CS51);	// start LED Timer	
 562:	e1 e2       	ldi	r30, 0x21	; 33
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	80 81       	ld	r24, Z
 568:	83 60       	ori	r24, 0x03	; 3
 56a:	80 83       	st	Z, r24
		EIMSK |= (1 << INT2);					// enable !SS interupt when !SS is activated (falling edge)
 56c:	8d b3       	in	r24, 0x1d	; 29
 56e:	84 60       	ori	r24, 0x04	; 4
 570:	8d bb       	out	0x1d, r24	; 29
		/************************************************************************/
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 4; idx++) {
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	84 30       	cpi	r24, 0x04	; 4
 576:	08 f0       	brcs	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 578:	59 cf       	rjmp	.-334    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
					
			// Write 1st byte into register
			SPDR = tData[idx];
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	e0 50       	subi	r30, 0x00	; 0
 582:	fe 4f       	sbci	r31, 0xFE	; 254
 584:	90 81       	ld	r25, Z
 586:	9e bd       	out	0x2e, r25	; 46
					
			// Wait for transmission
			while(!(SPSR & (1<<SPIF)));
 588:	0d b4       	in	r0, 0x2d	; 45
 58a:	07 fe       	sbrs	r0, 7
 58c:	fd cf       	rjmp	.-6      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
					
			// Because only the first 2 bytes are real data => check if its the 1st or 2nd byte
			if (idx < 2) {
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	28 f4       	brcc	.+10     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
				// Read register
				rData[idx] = SPDR;
 592:	9e b5       	in	r25, 0x2e	; 46
 594:	f9 01       	movw	r30, r18
 596:	ea 5f       	subi	r30, 0xFA	; 250
 598:	fd 4f       	sbci	r31, 0xFD	; 253
 59a:	90 83       	st	Z, r25
		/************************************************************************/
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 4; idx++) {
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	ea cf       	rjmp	.-44     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>

000005a0 <__subsf3>:
 5a0:	50 58       	subi	r21, 0x80	; 128

000005a2 <__addsf3>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	aa 27       	eor	r26, r26
 5a6:	0e d0       	rcall	.+28     	; 0x5c4 <__addsf3x>
 5a8:	48 c1       	rjmp	.+656    	; 0x83a <__fp_round>
 5aa:	39 d1       	rcall	.+626    	; 0x81e <__fp_pscA>
 5ac:	30 f0       	brcs	.+12     	; 0x5ba <__addsf3+0x18>
 5ae:	3e d1       	rcall	.+636    	; 0x82c <__fp_pscB>
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__addsf3+0x18>
 5b2:	31 f4       	brne	.+12     	; 0x5c0 <__addsf3+0x1e>
 5b4:	9f 3f       	cpi	r25, 0xFF	; 255
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__addsf3+0x1a>
 5b8:	1e f4       	brtc	.+6      	; 0x5c0 <__addsf3+0x1e>
 5ba:	2e c1       	rjmp	.+604    	; 0x818 <__fp_nan>
 5bc:	0e f4       	brtc	.+2      	; 0x5c0 <__addsf3+0x1e>
 5be:	e0 95       	com	r30
 5c0:	e7 fb       	bst	r30, 7
 5c2:	24 c1       	rjmp	.+584    	; 0x80c <__fp_inf>

000005c4 <__addsf3x>:
 5c4:	e9 2f       	mov	r30, r25
 5c6:	4a d1       	rcall	.+660    	; 0x85c <__fp_split3>
 5c8:	80 f3       	brcs	.-32     	; 0x5aa <__addsf3+0x8>
 5ca:	ba 17       	cp	r27, r26
 5cc:	62 07       	cpc	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	95 07       	cpc	r25, r21
 5d4:	18 f0       	brcs	.+6      	; 0x5dc <__addsf3x+0x18>
 5d6:	71 f4       	brne	.+28     	; 0x5f4 <__addsf3x+0x30>
 5d8:	9e f5       	brtc	.+102    	; 0x640 <__addsf3x+0x7c>
 5da:	62 c1       	rjmp	.+708    	; 0x8a0 <__fp_zero>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3x+0x1c>
 5de:	e0 95       	com	r30
 5e0:	0b 2e       	mov	r0, r27
 5e2:	ba 2f       	mov	r27, r26
 5e4:	a0 2d       	mov	r26, r0
 5e6:	0b 01       	movw	r0, r22
 5e8:	b9 01       	movw	r22, r18
 5ea:	90 01       	movw	r18, r0
 5ec:	0c 01       	movw	r0, r24
 5ee:	ca 01       	movw	r24, r20
 5f0:	a0 01       	movw	r20, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	ff 27       	eor	r31, r31
 5f6:	59 1b       	sub	r21, r25
 5f8:	99 f0       	breq	.+38     	; 0x620 <__addsf3x+0x5c>
 5fa:	59 3f       	cpi	r21, 0xF9	; 249
 5fc:	50 f4       	brcc	.+20     	; 0x612 <__addsf3x+0x4e>
 5fe:	50 3e       	cpi	r21, 0xE0	; 224
 600:	68 f1       	brcs	.+90     	; 0x65c <__addsf3x+0x98>
 602:	1a 16       	cp	r1, r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	a2 2f       	mov	r26, r18
 608:	23 2f       	mov	r18, r19
 60a:	34 2f       	mov	r19, r20
 60c:	44 27       	eor	r20, r20
 60e:	58 5f       	subi	r21, 0xF8	; 248
 610:	f3 cf       	rjmp	.-26     	; 0x5f8 <__addsf3x+0x34>
 612:	46 95       	lsr	r20
 614:	37 95       	ror	r19
 616:	27 95       	ror	r18
 618:	a7 95       	ror	r26
 61a:	f0 40       	sbci	r31, 0x00	; 0
 61c:	53 95       	inc	r21
 61e:	c9 f7       	brne	.-14     	; 0x612 <__addsf3x+0x4e>
 620:	7e f4       	brtc	.+30     	; 0x640 <__addsf3x+0x7c>
 622:	1f 16       	cp	r1, r31
 624:	ba 0b       	sbc	r27, r26
 626:	62 0b       	sbc	r22, r18
 628:	73 0b       	sbc	r23, r19
 62a:	84 0b       	sbc	r24, r20
 62c:	ba f0       	brmi	.+46     	; 0x65c <__addsf3x+0x98>
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	a1 f0       	breq	.+40     	; 0x65a <__addsf3x+0x96>
 632:	ff 0f       	add	r31, r31
 634:	bb 1f       	adc	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	c2 f7       	brpl	.-16     	; 0x62e <__addsf3x+0x6a>
 63e:	0e c0       	rjmp	.+28     	; 0x65c <__addsf3x+0x98>
 640:	ba 0f       	add	r27, r26
 642:	62 1f       	adc	r22, r18
 644:	73 1f       	adc	r23, r19
 646:	84 1f       	adc	r24, r20
 648:	48 f4       	brcc	.+18     	; 0x65c <__addsf3x+0x98>
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	08 f0       	brcs	.+2      	; 0x65a <__addsf3x+0x96>
 658:	b3 cf       	rjmp	.-154    	; 0x5c0 <__addsf3+0x1e>
 65a:	93 95       	inc	r25
 65c:	88 0f       	add	r24, r24
 65e:	08 f0       	brcs	.+2      	; 0x662 <__addsf3x+0x9e>
 660:	99 27       	eor	r25, r25
 662:	ee 0f       	add	r30, r30
 664:	97 95       	ror	r25
 666:	87 95       	ror	r24
 668:	08 95       	ret

0000066a <__divsf3>:
 66a:	0c d0       	rcall	.+24     	; 0x684 <__divsf3x>
 66c:	e6 c0       	rjmp	.+460    	; 0x83a <__fp_round>
 66e:	de d0       	rcall	.+444    	; 0x82c <__fp_pscB>
 670:	40 f0       	brcs	.+16     	; 0x682 <__divsf3+0x18>
 672:	d5 d0       	rcall	.+426    	; 0x81e <__fp_pscA>
 674:	30 f0       	brcs	.+12     	; 0x682 <__divsf3+0x18>
 676:	21 f4       	brne	.+8      	; 0x680 <__divsf3+0x16>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	19 f0       	breq	.+6      	; 0x682 <__divsf3+0x18>
 67c:	c7 c0       	rjmp	.+398    	; 0x80c <__fp_inf>
 67e:	51 11       	cpse	r21, r1
 680:	10 c1       	rjmp	.+544    	; 0x8a2 <__fp_szero>
 682:	ca c0       	rjmp	.+404    	; 0x818 <__fp_nan>

00000684 <__divsf3x>:
 684:	eb d0       	rcall	.+470    	; 0x85c <__fp_split3>
 686:	98 f3       	brcs	.-26     	; 0x66e <__divsf3+0x4>

00000688 <__divsf3_pse>:
 688:	99 23       	and	r25, r25
 68a:	c9 f3       	breq	.-14     	; 0x67e <__divsf3+0x14>
 68c:	55 23       	and	r21, r21
 68e:	b1 f3       	breq	.-20     	; 0x67c <__divsf3+0x12>
 690:	95 1b       	sub	r25, r21
 692:	55 0b       	sbc	r21, r21
 694:	bb 27       	eor	r27, r27
 696:	aa 27       	eor	r26, r26
 698:	62 17       	cp	r22, r18
 69a:	73 07       	cpc	r23, r19
 69c:	84 07       	cpc	r24, r20
 69e:	38 f0       	brcs	.+14     	; 0x6ae <__divsf3_pse+0x26>
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	22 0f       	add	r18, r18
 6a6:	33 1f       	adc	r19, r19
 6a8:	44 1f       	adc	r20, r20
 6aa:	aa 1f       	adc	r26, r26
 6ac:	a9 f3       	breq	.-22     	; 0x698 <__divsf3_pse+0x10>
 6ae:	33 d0       	rcall	.+102    	; 0x716 <__divsf3_pse+0x8e>
 6b0:	0e 2e       	mov	r0, r30
 6b2:	3a f0       	brmi	.+14     	; 0x6c2 <__divsf3_pse+0x3a>
 6b4:	e0 e8       	ldi	r30, 0x80	; 128
 6b6:	30 d0       	rcall	.+96     	; 0x718 <__divsf3_pse+0x90>
 6b8:	91 50       	subi	r25, 0x01	; 1
 6ba:	50 40       	sbci	r21, 0x00	; 0
 6bc:	e6 95       	lsr	r30
 6be:	00 1c       	adc	r0, r0
 6c0:	ca f7       	brpl	.-14     	; 0x6b4 <__divsf3_pse+0x2c>
 6c2:	29 d0       	rcall	.+82     	; 0x716 <__divsf3_pse+0x8e>
 6c4:	fe 2f       	mov	r31, r30
 6c6:	27 d0       	rcall	.+78     	; 0x716 <__divsf3_pse+0x8e>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	bb 1f       	adc	r27, r27
 6d0:	26 17       	cp	r18, r22
 6d2:	37 07       	cpc	r19, r23
 6d4:	48 07       	cpc	r20, r24
 6d6:	ab 07       	cpc	r26, r27
 6d8:	b0 e8       	ldi	r27, 0x80	; 128
 6da:	09 f0       	breq	.+2      	; 0x6de <__divsf3_pse+0x56>
 6dc:	bb 0b       	sbc	r27, r27
 6de:	80 2d       	mov	r24, r0
 6e0:	bf 01       	movw	r22, r30
 6e2:	ff 27       	eor	r31, r31
 6e4:	93 58       	subi	r25, 0x83	; 131
 6e6:	5f 4f       	sbci	r21, 0xFF	; 255
 6e8:	2a f0       	brmi	.+10     	; 0x6f4 <__divsf3_pse+0x6c>
 6ea:	9e 3f       	cpi	r25, 0xFE	; 254
 6ec:	51 05       	cpc	r21, r1
 6ee:	68 f0       	brcs	.+26     	; 0x70a <__divsf3_pse+0x82>
 6f0:	8d c0       	rjmp	.+282    	; 0x80c <__fp_inf>
 6f2:	d7 c0       	rjmp	.+430    	; 0x8a2 <__fp_szero>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	ec f3       	brlt	.-6      	; 0x6f2 <__divsf3_pse+0x6a>
 6f8:	98 3e       	cpi	r25, 0xE8	; 232
 6fa:	dc f3       	brlt	.-10     	; 0x6f2 <__divsf3_pse+0x6a>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f7 95       	ror	r31
 706:	9f 5f       	subi	r25, 0xFF	; 255
 708:	c9 f7       	brne	.-14     	; 0x6fc <__divsf3_pse+0x74>
 70a:	88 0f       	add	r24, r24
 70c:	91 1d       	adc	r25, r1
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret
 716:	e1 e0       	ldi	r30, 0x01	; 1
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	bb 1f       	adc	r27, r27
 720:	62 17       	cp	r22, r18
 722:	73 07       	cpc	r23, r19
 724:	84 07       	cpc	r24, r20
 726:	ba 07       	cpc	r27, r26
 728:	20 f0       	brcs	.+8      	; 0x732 <__divsf3_pse+0xaa>
 72a:	62 1b       	sub	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	84 0b       	sbc	r24, r20
 730:	ba 0b       	sbc	r27, r26
 732:	ee 1f       	adc	r30, r30
 734:	88 f7       	brcc	.-30     	; 0x718 <__divsf3_pse+0x90>
 736:	e0 95       	com	r30
 738:	08 95       	ret

0000073a <__fixunssfsi>:
 73a:	98 d0       	rcall	.+304    	; 0x86c <__fp_splitA>
 73c:	88 f0       	brcs	.+34     	; 0x760 <__fixunssfsi+0x26>
 73e:	9f 57       	subi	r25, 0x7F	; 127
 740:	90 f0       	brcs	.+36     	; 0x766 <__fixunssfsi+0x2c>
 742:	b9 2f       	mov	r27, r25
 744:	99 27       	eor	r25, r25
 746:	b7 51       	subi	r27, 0x17	; 23
 748:	a0 f0       	brcs	.+40     	; 0x772 <__fixunssfsi+0x38>
 74a:	d1 f0       	breq	.+52     	; 0x780 <__fixunssfsi+0x46>
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	1a f0       	brmi	.+6      	; 0x75c <__fixunssfsi+0x22>
 756:	ba 95       	dec	r27
 758:	c9 f7       	brne	.-14     	; 0x74c <__fixunssfsi+0x12>
 75a:	12 c0       	rjmp	.+36     	; 0x780 <__fixunssfsi+0x46>
 75c:	b1 30       	cpi	r27, 0x01	; 1
 75e:	81 f0       	breq	.+32     	; 0x780 <__fixunssfsi+0x46>
 760:	9f d0       	rcall	.+318    	; 0x8a0 <__fp_zero>
 762:	b1 e0       	ldi	r27, 0x01	; 1
 764:	08 95       	ret
 766:	9c c0       	rjmp	.+312    	; 0x8a0 <__fp_zero>
 768:	67 2f       	mov	r22, r23
 76a:	78 2f       	mov	r23, r24
 76c:	88 27       	eor	r24, r24
 76e:	b8 5f       	subi	r27, 0xF8	; 248
 770:	39 f0       	breq	.+14     	; 0x780 <__fixunssfsi+0x46>
 772:	b9 3f       	cpi	r27, 0xF9	; 249
 774:	cc f3       	brlt	.-14     	; 0x768 <__fixunssfsi+0x2e>
 776:	86 95       	lsr	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b3 95       	inc	r27
 77e:	d9 f7       	brne	.-10     	; 0x776 <__fixunssfsi+0x3c>
 780:	3e f4       	brtc	.+14     	; 0x790 <__fixunssfsi+0x56>
 782:	90 95       	com	r25
 784:	80 95       	com	r24
 786:	70 95       	com	r23
 788:	61 95       	neg	r22
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	08 95       	ret

00000792 <__floatunsisf>:
 792:	e8 94       	clt
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <__floatsisf+0x12>

00000796 <__floatsisf>:
 796:	97 fb       	bst	r25, 7
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__floatsisf+0x12>
 79a:	90 95       	com	r25
 79c:	80 95       	com	r24
 79e:	70 95       	com	r23
 7a0:	61 95       	neg	r22
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	99 23       	and	r25, r25
 7aa:	a9 f0       	breq	.+42     	; 0x7d6 <__floatsisf+0x40>
 7ac:	f9 2f       	mov	r31, r25
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	bb 27       	eor	r27, r27
 7b2:	93 95       	inc	r25
 7b4:	f6 95       	lsr	r31
 7b6:	87 95       	ror	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b7 95       	ror	r27
 7be:	f1 11       	cpse	r31, r1
 7c0:	f8 cf       	rjmp	.-16     	; 0x7b2 <__floatsisf+0x1c>
 7c2:	fa f4       	brpl	.+62     	; 0x802 <__floatsisf+0x6c>
 7c4:	bb 0f       	add	r27, r27
 7c6:	11 f4       	brne	.+4      	; 0x7cc <__floatsisf+0x36>
 7c8:	60 ff       	sbrs	r22, 0
 7ca:	1b c0       	rjmp	.+54     	; 0x802 <__floatsisf+0x6c>
 7cc:	6f 5f       	subi	r22, 0xFF	; 255
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <__floatsisf+0x6c>
 7d6:	88 23       	and	r24, r24
 7d8:	11 f0       	breq	.+4      	; 0x7de <__floatsisf+0x48>
 7da:	96 e9       	ldi	r25, 0x96	; 150
 7dc:	11 c0       	rjmp	.+34     	; 0x800 <__floatsisf+0x6a>
 7de:	77 23       	and	r23, r23
 7e0:	21 f0       	breq	.+8      	; 0x7ea <__floatsisf+0x54>
 7e2:	9e e8       	ldi	r25, 0x8E	; 142
 7e4:	87 2f       	mov	r24, r23
 7e6:	76 2f       	mov	r23, r22
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <__floatsisf+0x5e>
 7ea:	66 23       	and	r22, r22
 7ec:	71 f0       	breq	.+28     	; 0x80a <__floatsisf+0x74>
 7ee:	96 e8       	ldi	r25, 0x86	; 134
 7f0:	86 2f       	mov	r24, r22
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	2a f0       	brmi	.+10     	; 0x802 <__floatsisf+0x6c>
 7f8:	9a 95       	dec	r25
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	da f7       	brpl	.-10     	; 0x7f8 <__floatsisf+0x62>
 802:	88 0f       	add	r24, r24
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_inf>:
 80c:	97 f9       	bld	r25, 7
 80e:	9f 67       	ori	r25, 0x7F	; 127
 810:	80 e8       	ldi	r24, 0x80	; 128
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	08 95       	ret

00000818 <__fp_nan>:
 818:	9f ef       	ldi	r25, 0xFF	; 255
 81a:	80 ec       	ldi	r24, 0xC0	; 192
 81c:	08 95       	ret

0000081e <__fp_pscA>:
 81e:	00 24       	eor	r0, r0
 820:	0a 94       	dec	r0
 822:	16 16       	cp	r1, r22
 824:	17 06       	cpc	r1, r23
 826:	18 06       	cpc	r1, r24
 828:	09 06       	cpc	r0, r25
 82a:	08 95       	ret

0000082c <__fp_pscB>:
 82c:	00 24       	eor	r0, r0
 82e:	0a 94       	dec	r0
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	14 06       	cpc	r1, r20
 836:	05 06       	cpc	r0, r21
 838:	08 95       	ret

0000083a <__fp_round>:
 83a:	09 2e       	mov	r0, r25
 83c:	03 94       	inc	r0
 83e:	00 0c       	add	r0, r0
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0xc>
 842:	88 23       	and	r24, r24
 844:	52 f0       	brmi	.+20     	; 0x85a <__fp_round+0x20>
 846:	bb 0f       	add	r27, r27
 848:	40 f4       	brcc	.+16     	; 0x85a <__fp_round+0x20>
 84a:	bf 2b       	or	r27, r31
 84c:	11 f4       	brne	.+4      	; 0x852 <__fp_round+0x18>
 84e:	60 ff       	sbrs	r22, 0
 850:	04 c0       	rjmp	.+8      	; 0x85a <__fp_round+0x20>
 852:	6f 5f       	subi	r22, 0xFF	; 255
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	08 95       	ret

0000085c <__fp_split3>:
 85c:	57 fd       	sbrc	r21, 7
 85e:	90 58       	subi	r25, 0x80	; 128
 860:	44 0f       	add	r20, r20
 862:	55 1f       	adc	r21, r21
 864:	59 f0       	breq	.+22     	; 0x87c <__fp_splitA+0x10>
 866:	5f 3f       	cpi	r21, 0xFF	; 255
 868:	71 f0       	breq	.+28     	; 0x886 <__fp_splitA+0x1a>
 86a:	47 95       	ror	r20

0000086c <__fp_splitA>:
 86c:	88 0f       	add	r24, r24
 86e:	97 fb       	bst	r25, 7
 870:	99 1f       	adc	r25, r25
 872:	61 f0       	breq	.+24     	; 0x88c <__fp_splitA+0x20>
 874:	9f 3f       	cpi	r25, 0xFF	; 255
 876:	79 f0       	breq	.+30     	; 0x896 <__fp_splitA+0x2a>
 878:	87 95       	ror	r24
 87a:	08 95       	ret
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	55 1f       	adc	r21, r21
 884:	f2 cf       	rjmp	.-28     	; 0x86a <__fp_split3+0xe>
 886:	46 95       	lsr	r20
 888:	f1 df       	rcall	.-30     	; 0x86c <__fp_splitA>
 88a:	08 c0       	rjmp	.+16     	; 0x89c <__fp_splitA+0x30>
 88c:	16 16       	cp	r1, r22
 88e:	17 06       	cpc	r1, r23
 890:	18 06       	cpc	r1, r24
 892:	99 1f       	adc	r25, r25
 894:	f1 cf       	rjmp	.-30     	; 0x878 <__fp_splitA+0xc>
 896:	86 95       	lsr	r24
 898:	71 05       	cpc	r23, r1
 89a:	61 05       	cpc	r22, r1
 89c:	08 94       	sec
 89e:	08 95       	ret

000008a0 <__fp_zero>:
 8a0:	e8 94       	clt

000008a2 <__fp_szero>:
 8a2:	bb 27       	eor	r27, r27
 8a4:	66 27       	eor	r22, r22
 8a6:	77 27       	eor	r23, r23
 8a8:	cb 01       	movw	r24, r22
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <__mulsf3>:
 8ae:	0b d0       	rcall	.+22     	; 0x8c6 <__mulsf3x>
 8b0:	c4 cf       	rjmp	.-120    	; 0x83a <__fp_round>
 8b2:	b5 df       	rcall	.-150    	; 0x81e <__fp_pscA>
 8b4:	28 f0       	brcs	.+10     	; 0x8c0 <__mulsf3+0x12>
 8b6:	ba df       	rcall	.-140    	; 0x82c <__fp_pscB>
 8b8:	18 f0       	brcs	.+6      	; 0x8c0 <__mulsf3+0x12>
 8ba:	95 23       	and	r25, r21
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__mulsf3+0x12>
 8be:	a6 cf       	rjmp	.-180    	; 0x80c <__fp_inf>
 8c0:	ab cf       	rjmp	.-170    	; 0x818 <__fp_nan>
 8c2:	11 24       	eor	r1, r1
 8c4:	ee cf       	rjmp	.-36     	; 0x8a2 <__fp_szero>

000008c6 <__mulsf3x>:
 8c6:	ca df       	rcall	.-108    	; 0x85c <__fp_split3>
 8c8:	a0 f3       	brcs	.-24     	; 0x8b2 <__mulsf3+0x4>

000008ca <__mulsf3_pse>:
 8ca:	95 9f       	mul	r25, r21
 8cc:	d1 f3       	breq	.-12     	; 0x8c2 <__mulsf3+0x14>
 8ce:	95 0f       	add	r25, r21
 8d0:	50 e0       	ldi	r21, 0x00	; 0
 8d2:	55 1f       	adc	r21, r21
 8d4:	62 9f       	mul	r22, r18
 8d6:	f0 01       	movw	r30, r0
 8d8:	72 9f       	mul	r23, r18
 8da:	bb 27       	eor	r27, r27
 8dc:	f0 0d       	add	r31, r0
 8de:	b1 1d       	adc	r27, r1
 8e0:	63 9f       	mul	r22, r19
 8e2:	aa 27       	eor	r26, r26
 8e4:	f0 0d       	add	r31, r0
 8e6:	b1 1d       	adc	r27, r1
 8e8:	aa 1f       	adc	r26, r26
 8ea:	64 9f       	mul	r22, r20
 8ec:	66 27       	eor	r22, r22
 8ee:	b0 0d       	add	r27, r0
 8f0:	a1 1d       	adc	r26, r1
 8f2:	66 1f       	adc	r22, r22
 8f4:	82 9f       	mul	r24, r18
 8f6:	22 27       	eor	r18, r18
 8f8:	b0 0d       	add	r27, r0
 8fa:	a1 1d       	adc	r26, r1
 8fc:	62 1f       	adc	r22, r18
 8fe:	73 9f       	mul	r23, r19
 900:	b0 0d       	add	r27, r0
 902:	a1 1d       	adc	r26, r1
 904:	62 1f       	adc	r22, r18
 906:	83 9f       	mul	r24, r19
 908:	a0 0d       	add	r26, r0
 90a:	61 1d       	adc	r22, r1
 90c:	22 1f       	adc	r18, r18
 90e:	74 9f       	mul	r23, r20
 910:	33 27       	eor	r19, r19
 912:	a0 0d       	add	r26, r0
 914:	61 1d       	adc	r22, r1
 916:	23 1f       	adc	r18, r19
 918:	84 9f       	mul	r24, r20
 91a:	60 0d       	add	r22, r0
 91c:	21 1d       	adc	r18, r1
 91e:	82 2f       	mov	r24, r18
 920:	76 2f       	mov	r23, r22
 922:	6a 2f       	mov	r22, r26
 924:	11 24       	eor	r1, r1
 926:	9f 57       	subi	r25, 0x7F	; 127
 928:	50 40       	sbci	r21, 0x00	; 0
 92a:	8a f0       	brmi	.+34     	; 0x94e <__mulsf3_pse+0x84>
 92c:	e1 f0       	breq	.+56     	; 0x966 <__mulsf3_pse+0x9c>
 92e:	88 23       	and	r24, r24
 930:	4a f0       	brmi	.+18     	; 0x944 <__mulsf3_pse+0x7a>
 932:	ee 0f       	add	r30, r30
 934:	ff 1f       	adc	r31, r31
 936:	bb 1f       	adc	r27, r27
 938:	66 1f       	adc	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	91 50       	subi	r25, 0x01	; 1
 940:	50 40       	sbci	r21, 0x00	; 0
 942:	a9 f7       	brne	.-22     	; 0x92e <__mulsf3_pse+0x64>
 944:	9e 3f       	cpi	r25, 0xFE	; 254
 946:	51 05       	cpc	r21, r1
 948:	70 f0       	brcs	.+28     	; 0x966 <__mulsf3_pse+0x9c>
 94a:	60 cf       	rjmp	.-320    	; 0x80c <__fp_inf>
 94c:	aa cf       	rjmp	.-172    	; 0x8a2 <__fp_szero>
 94e:	5f 3f       	cpi	r21, 0xFF	; 255
 950:	ec f3       	brlt	.-6      	; 0x94c <__mulsf3_pse+0x82>
 952:	98 3e       	cpi	r25, 0xE8	; 232
 954:	dc f3       	brlt	.-10     	; 0x94c <__mulsf3_pse+0x82>
 956:	86 95       	lsr	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b7 95       	ror	r27
 95e:	f7 95       	ror	r31
 960:	e7 95       	ror	r30
 962:	9f 5f       	subi	r25, 0xFF	; 255
 964:	c1 f7       	brne	.-16     	; 0x956 <__mulsf3_pse+0x8c>
 966:	fe 2b       	or	r31, r30
 968:	88 0f       	add	r24, r24
 96a:	91 1d       	adc	r25, r1
 96c:	96 95       	lsr	r25
 96e:	87 95       	ror	r24
 970:	97 f9       	bld	r25, 7
 972:	08 95       	ret

00000974 <__udivmodsi4>:
 974:	a1 e2       	ldi	r26, 0x21	; 33
 976:	1a 2e       	mov	r1, r26
 978:	aa 1b       	sub	r26, r26
 97a:	bb 1b       	sub	r27, r27
 97c:	fd 01       	movw	r30, r26
 97e:	0d c0       	rjmp	.+26     	; 0x99a <__udivmodsi4_ep>

00000980 <__udivmodsi4_loop>:
 980:	aa 1f       	adc	r26, r26
 982:	bb 1f       	adc	r27, r27
 984:	ee 1f       	adc	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	a2 17       	cp	r26, r18
 98a:	b3 07       	cpc	r27, r19
 98c:	e4 07       	cpc	r30, r20
 98e:	f5 07       	cpc	r31, r21
 990:	20 f0       	brcs	.+8      	; 0x99a <__udivmodsi4_ep>
 992:	a2 1b       	sub	r26, r18
 994:	b3 0b       	sbc	r27, r19
 996:	e4 0b       	sbc	r30, r20
 998:	f5 0b       	sbc	r31, r21

0000099a <__udivmodsi4_ep>:
 99a:	66 1f       	adc	r22, r22
 99c:	77 1f       	adc	r23, r23
 99e:	88 1f       	adc	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	1a 94       	dec	r1
 9a4:	69 f7       	brne	.-38     	; 0x980 <__udivmodsi4_loop>
 9a6:	60 95       	com	r22
 9a8:	70 95       	com	r23
 9aa:	80 95       	com	r24
 9ac:	90 95       	com	r25
 9ae:	9b 01       	movw	r18, r22
 9b0:	ac 01       	movw	r20, r24
 9b2:	bd 01       	movw	r22, r26
 9b4:	cf 01       	movw	r24, r30
 9b6:	08 95       	ret

000009b8 <__umulhisi3>:
 9b8:	a2 9f       	mul	r26, r18
 9ba:	b0 01       	movw	r22, r0
 9bc:	b3 9f       	mul	r27, r19
 9be:	c0 01       	movw	r24, r0
 9c0:	a3 9f       	mul	r26, r19
 9c2:	70 0d       	add	r23, r0
 9c4:	81 1d       	adc	r24, r1
 9c6:	11 24       	eor	r1, r1
 9c8:	91 1d       	adc	r25, r1
 9ca:	b2 9f       	mul	r27, r18
 9cc:	70 0d       	add	r23, r0
 9ce:	81 1d       	adc	r24, r1
 9d0:	11 24       	eor	r1, r1
 9d2:	91 1d       	adc	r25, r1
 9d4:	08 95       	ret

000009d6 <__usmulhisi3>:
 9d6:	f0 df       	rcall	.-32     	; 0x9b8 <__umulhisi3>

000009d8 <__usmulhisi3_tail>:
 9d8:	b7 ff       	sbrs	r27, 7
 9da:	08 95       	ret
 9dc:	82 1b       	sub	r24, r18
 9de:	93 0b       	sbc	r25, r19
 9e0:	08 95       	ret

000009e2 <__muluhisi3>:
 9e2:	ea df       	rcall	.-44     	; 0x9b8 <__umulhisi3>
 9e4:	a5 9f       	mul	r26, r21
 9e6:	90 0d       	add	r25, r0
 9e8:	b4 9f       	mul	r27, r20
 9ea:	90 0d       	add	r25, r0
 9ec:	a4 9f       	mul	r26, r20
 9ee:	80 0d       	add	r24, r0
 9f0:	91 1d       	adc	r25, r1
 9f2:	11 24       	eor	r1, r1
 9f4:	08 95       	ret

000009f6 <__mulshisi3>:
 9f6:	b7 ff       	sbrs	r27, 7
 9f8:	f4 cf       	rjmp	.-24     	; 0x9e2 <__muluhisi3>

000009fa <__mulohisi3>:
 9fa:	f3 df       	rcall	.-26     	; 0x9e2 <__muluhisi3>
 9fc:	82 1b       	sub	r24, r18
 9fe:	93 0b       	sbc	r25, r19
 a00:	08 95       	ret

00000a02 <_exit>:
 a02:	f8 94       	cli

00000a04 <__stop_program>:
 a04:	ff cf       	rjmp	.-2      	; 0xa04 <__stop_program>
