
FCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  00000b26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eaa  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8a  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000692  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000636  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000384  00000000  00000000  00003512  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00003896  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	d7 c0       	rjmp	.+430    	; 0x1b8 <__vector_2>
   a:	00 00       	nop
   c:	2c c1       	rjmp	.+600    	; 0x266 <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ef c0       	rjmp	.+478    	; 0x298 <__vector_46>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ab 30       	cpi	r26, 0x0B	; 11
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	08 d1       	rcall	.+528    	; 0x316 <main>
 106:	d3 c4       	rjmp	.+2470   	; 0xaae <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_1>:
//}

// Usonic measurement (inside)
// gets called when the level on PD0 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT0_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	if(PIND & (1 << PD0)) {		// rising edge
 134:	48 9b       	sbis	0x09, 0	; 9
 136:	06 c0       	rjmp	.+12     	; 0x144 <__vector_1+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 138:	e1 ea       	ldi	r30, 0xA1	; 161
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	25 c0       	rjmp	.+74     	; 0x18e <__vector_1+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 144:	e1 ea       	ldi	r30, 0xA1	; 161
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 14e:	c4 ea       	ldi	r28, 0xA4	; 164
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	28 81       	ld	r18, Y
 154:	39 81       	ldd	r19, Y+1	; 0x01
 156:	a7 e5       	ldi	r26, 0x57	; 87
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	84 d4       	rcall	.+2312   	; 0xa64 <__umulhisi3>
 15c:	70 d3       	rcall	.+1760   	; 0x83e <__floatunsisf>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5d e3       	ldi	r21, 0x3D	; 61
 166:	f9 d3       	rcall	.+2034   	; 0x95a <__mulsf3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	4a ef       	ldi	r20, 0xFA	; 250
 16e:	54 e4       	ldi	r21, 0x44	; 68
 170:	d2 d2       	rcall	.+1444   	; 0x716 <__divsf3>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	5f e3       	ldi	r21, 0x3F	; 63
 17a:	69 d2       	rcall	.+1234   	; 0x64e <__addsf3>
 17c:	34 d3       	rcall	.+1640   	; 0x7e6 <__fixunssfsi>
		tData[0] = (dist >> 8);
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	f2 e0       	ldi	r31, 0x02	; 2
 182:	70 83       	st	Z, r23
		tData[1] = dist;
 184:	61 83       	std	Z+1, r22	; 0x01
		TCNT4 = 0;
 186:	19 82       	std	Y+1, r1	; 0x01
 188:	18 82       	st	Y, r1
		waiting = 0;
 18a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0b be       	out	0x3b, r0	; 59
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_2>:

// Usonic measurement (outside)
// gets called when the level on PD1 changes in every direction
// activate this interrupt only when distance measurement is active!
ISR(INT1_vect) {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	if(PIND & (1 << PD1)) {		// rising edge
 1e2:	49 9b       	sbis	0x09, 1	; 9
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <__vector_2+0x3a>
		TCCR4B |= (1 << CS40);	// start timer
 1e6:	e1 ea       	ldi	r30, 0xA1	; 161
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	80 83       	st	Z, r24
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__vector_2+0x84>
	} else {					// falling edge
		TCCR4B &= ~(1 << CS40);	// stop timer
 1f2:	e1 ea       	ldi	r30, 0xA1	; 161
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	80 83       	st	Z, r24
		uint16_t dist = (uint16_t)((((double)((uint32_t)TCNT4 * 343UL) * 0.0625)/2000.0) + 0.5);
 1fc:	c4 ea       	ldi	r28, 0xA4	; 164
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	28 81       	ld	r18, Y
 202:	39 81       	ldd	r19, Y+1	; 0x01
 204:	a7 e5       	ldi	r26, 0x57	; 87
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	2d d4       	rcall	.+2138   	; 0xa64 <__umulhisi3>
 20a:	19 d3       	rcall	.+1586   	; 0x83e <__floatunsisf>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e8       	ldi	r20, 0x80	; 128
 212:	5d e3       	ldi	r21, 0x3D	; 61
 214:	a2 d3       	rcall	.+1860   	; 0x95a <__mulsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	4a ef       	ldi	r20, 0xFA	; 250
 21c:	54 e4       	ldi	r21, 0x44	; 68
 21e:	7b d2       	rcall	.+1270   	; 0x716 <__divsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	5f e3       	ldi	r21, 0x3F	; 63
 228:	12 d2       	rcall	.+1060   	; 0x64e <__addsf3>
 22a:	dd d2       	rcall	.+1466   	; 0x7e6 <__fixunssfsi>
		tData[2] = (dist >> 8);
 22c:	e0 e0       	ldi	r30, 0x00	; 0
 22e:	f2 e0       	ldi	r31, 0x02	; 2
 230:	72 83       	std	Z+2, r23	; 0x02
		tData[3] = dist;
 232:	63 83       	std	Z+3, r22	; 0x03
		TCNT4 = 0;	
 234:	19 82       	std	Y+1, r1	; 0x01
 236:	18 82       	st	Y, r1
		waiting = 0;
 238:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0b be       	out	0x3b, r0	; 59
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_3>:

// !SS falling edge 
// PIN PD2 must be connected to !SS pin
// stops the LED Timer because a transmission starts
ISR(INT2_vect) {
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	0b b6       	in	r0, 0x3b	; 59
 272:	0f 92       	push	r0
 274:	8f 93       	push	r24
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	TCCR5B &= ~((1 << CS50) | (1 << CS51));		// stop LED Timer
 27a:	e1 e2       	ldi	r30, 0x21	; 33
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	80 81       	ld	r24, Z
 280:	8c 7f       	andi	r24, 0xFC	; 252
 282:	80 83       	st	Z, r24
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_46>:

// LEDs
// when ICR is reached the next 16Bit LED value is set
ISR(TIMER5_CAPT_vect) {
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
	leds <<= 1;
 2a8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2ac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2b8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	if(leds < 3) { 
 2bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2c0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2c4:	03 97       	sbiw	r24, 0x03	; 3
 2c6:	38 f4       	brcc	.+14     	; 0x2d6 <__vector_46+0x3e>
		leds = 3;
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2d0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
 2d4:	0d c0       	rjmp	.+26     	; 0x2f0 <__vector_46+0x58>
	} else if (leds == 0x8000) {
 2d6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2da:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2de:	81 15       	cp	r24, r1
 2e0:	90 48       	sbci	r25, 0x80	; 128
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <__vector_46+0x58>
		leds = 0x8001;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e8       	ldi	r25, 0x80	; 128
 2e8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <leds+0x1>
 2ec:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leds>
	} 
	PORTF = leds;
 2f0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2f4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 2f8:	81 bb       	out	0x11, r24	; 17
	PORTK = (leds >> 8);		
 2fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leds>
 2fe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <leds+0x1>
 302:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
}
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <main>:


int main(void)
{
	// initialize global variables 
	waiting = 0;
 316:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <waiting>
	rData[0] = 0;
 31a:	e8 e0       	ldi	r30, 0x08	; 8
 31c:	f2 e0       	ldi	r31, 0x02	; 2
 31e:	10 82       	st	Z, r1
	rData[1] = 0;
 320:	11 82       	std	Z+1, r1	; 0x01
	leds = 0;
 322:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <leds+0x1>
 326:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <leds>
	
	for(uint8_t i = 0; i < 6; i++) {
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	86 30       	cpi	r24, 0x06	; 6
 32e:	38 f4       	brcc	.+14     	; 0x33e <main+0x28>
		tData[i] = 0;
 330:	e8 2f       	mov	r30, r24
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	fe 4f       	sbci	r31, 0xFE	; 254
 338:	10 82       	st	Z, r1
	waiting = 0;
	rData[0] = 0;
	rData[1] = 0;
	leds = 0;
	
	for(uint8_t i = 0; i < 6; i++) {
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	f7 cf       	rjmp	.-18     	; 0x32c <main+0x16>
		tData[i] = 0;
	}
	
	//INIT Watchdog
	//start Watchdog and set Watchdog LED (clear before entering while())
	DDRB |= (1 << WD_LED) | (1 << LED_WindMill);
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	80 69       	ori	r24, 0x90	; 144
 342:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( 1 << WD_LED);		// set LED on
 344:	85 b1       	in	r24, 0x05	; 5
 346:	80 68       	ori	r24, 0x80	; 128
 348:	85 b9       	out	0x05, r24	; 5
	wdt_reset();
 34a:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 34c:	99 e2       	ldi	r25, 0x29	; 41
 34e:	88 e1       	ldi	r24, 0x18	; 24
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	a8 95       	wdr
 356:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
	wdt_enable(WDTO_8S);			// start WDT TOF=8s
	
	//INIT Pump timer 1
	//PWM-frequency: 2kHz
	//>0% ... >40% Dutycycle
	DDRB |= (1 << PUMP_PWM) | (1 << GENERATOR_PWM);	// PWM pins as output
 360:	84 b1       	in	r24, 0x04	; 4
 362:	80 66       	ori	r24, 0x60	; 96
 364:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11);
 366:	e0 e8       	ldi	r30, 0x80	; 128
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	82 60       	ori	r24, 0x02	; 2
 36e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) |( 1 << WGM13);			// FastPWM mode 14
 370:	a1 e8       	ldi	r26, 0x81	; 129
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	8c 91       	ld	r24, X
 376:	88 61       	ori	r24, 0x18	; 24
 378:	8c 93       	st	X, r24
	TCCR1A |= (1 << COM1A1);						// set OC1A (PB5) as timer1 pwm output (generator)
 37a:	80 81       	ld	r24, Z
 37c:	80 68       	ori	r24, 0x80	; 128
 37e:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);						// set OC1B (PB6) as timer 1 pwm output (pump)
 380:	80 81       	ld	r24, Z
 382:	80 62       	ori	r24, 0x20	; 32
 384:	80 83       	st	Z, r24
	ICR1 = PUMP_ICR -1;								// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 386:	2f e3       	ldi	r18, 0x3F	; 63
 388:	3f e1       	ldi	r19, 0x1F	; 31
 38a:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 38e:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
	OCR1A = 0;										// DutyCyle = 0%
 392:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 396:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;										// DutyCycle = 0%
 39a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 39e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		
	
	//INIT windmill timer 3
	//PWM frequency: 25kHz
	//>0% ... >50% Dutycycle
	DDRE |= (1 << WM_PWM_OUT);					// PWM pin as output
 3a2:	8d b1       	in	r24, 0x0d	; 13
 3a4:	88 60       	ori	r24, 0x08	; 8
 3a6:	8d b9       	out	0x0d, r24	; 13
	TCCR3A |= (1 << WGM11);
 3a8:	c0 e9       	ldi	r28, 0x90	; 144
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	88 81       	ld	r24, Y
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	88 83       	st	Y, r24
	TCCR3B |= (1 << WGM12) | (1 << WGM13);		// FastPWM mode 14
 3b2:	41 e9       	ldi	r20, 0x91	; 145
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	fa 01       	movw	r30, r20
 3b8:	80 81       	ld	r24, Z
 3ba:	88 61       	ori	r24, 0x18	; 24
 3bc:	80 83       	st	Z, r24
	ICR3 = WM_ICR - 1;							// F_PWM = 2kHz at N=1 ==> 100% DutyCycle on OCR
 3be:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 3c2:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
	TCCR3A |= (1 << COM3A1);					// set OC3A (PE3) as timer 3 pwm output (windmill)
 3c6:	88 81       	ld	r24, Y
 3c8:	80 68       	ori	r24, 0x80	; 128
 3ca:	88 83       	st	Y, r24
	OCR3A = 0;									// DutyCycle = 0%
 3cc:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 3d0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	// 30cm max. depth of water => 60cm way of sound => ca. 2ms duration
	// 16Bit timer with prescaler 1 (16MHz clock) => after ca. 4ms Overflow => cancel meassurement and write 0 to array
	// not Timer output required, only set prescaler to start timer and configure Overflow Interrupt to end measurement. 
	// start Timer: TCCR4B |= (1 << CS40);
	// stopp Timer: TCCR4B &= ~(1 << CS40);
	TIMSK4 |= (1 << TOIE4);					// set interrupt (measurement takes too long)
 3d4:	c2 e7       	ldi	r28, 0x72	; 114
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
 3d8:	88 81       	ld	r24, Y
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	88 83       	st	Y, r24
	TCNT4 = 0;								// set counter to 0 
 3de:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 3e2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
	EICRA |= (1 << ISC00) | (1 << ISC10);					// configure INT0 on PD0 and INT1 on PD1 to any edge for Sensor 1 and 2
 3e6:	c9 e6       	ldi	r28, 0x69	; 105
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	88 81       	ld	r24, Y
 3ec:	85 60       	ori	r24, 0x05	; 5
 3ee:	88 83       	st	Y, r24
	DDRJ |= (1 << US_TRIGGER_IN) | (1 << US_TRIGGER_OUT);	// configure PJ0 and PJ1 as Trigger output pins
 3f0:	24 e0       	ldi	r18, 0x04	; 4
 3f2:	31 e0       	ldi	r19, 0x01	; 1
 3f4:	f9 01       	movw	r30, r18
 3f6:	80 81       	ld	r24, Z
 3f8:	83 60       	ori	r24, 0x03	; 3
 3fa:	80 83       	st	Z, r24
	// maxValue for 100% (e.g. 0.5s per LED)
	// PWM Frequency >200Hz
	// Both directions with outputs PF0 .. PF7 and PK0 .. PK7
	//      only plugged vice versa for other direction
	// two pins for MOSFETs to select the LED bank
	DDRF = 0xFF;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	80 bb       	out	0x10, r24	; 16
	DDRK = 0xFF;
 400:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRH |= (1 << LED_GENERATOR) | (1 << LED_PUMP);		// Pins to select LED running light (per MOSFET)
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	31 e0       	ldi	r19, 0x01	; 1
 408:	f9 01       	movw	r30, r18
 40a:	80 81       	ld	r24, Z
 40c:	83 60       	ori	r24, 0x03	; 3
 40e:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM52) |( 1 << WGM53);				// CTC mode 12
 410:	21 e2       	ldi	r18, 0x21	; 33
 412:	31 e0       	ldi	r19, 0x01	; 1
 414:	f9 01       	movw	r30, r18
 416:	80 81       	ld	r24, Z
 418:	88 61       	ori	r24, 0x18	; 24
 41a:	80 83       	st	Z, r24
	ICR5 = LED_SLOWEST_ICR - 1;							// default value -> must be calculated
 41c:	8f e4       	ldi	r24, 0x4F	; 79
 41e:	93 ec       	ldi	r25, 0xC3	; 195
 420:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 424:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
	TIMSK5 |= (1 << ICIE5);
 428:	23 e7       	ldi	r18, 0x73	; 115
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	f9 01       	movw	r30, r18
 42e:	80 81       	ld	r24, Z
 430:	80 62       	ori	r24, 0x20	; 32
 432:	80 83       	st	Z, r24
	
	EICRA |= ( 1 << ISC21);				// enable INT2 on PD2 for falling edge (connect to !SS pin)
 434:	88 81       	ld	r24, Y
 436:	80 62       	ori	r24, 0x20	; 32
 438:	88 83       	st	Y, r24
	
	TCCR1B |= (1 << CS10);				// start Timer 1 (Pumps) Prescaler 1
 43a:	8c 91       	ld	r24, X
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS10);				// start Timer 3 (Windmill) Prescaler 1
 440:	fa 01       	movw	r30, r20
 442:	80 81       	ld	r24, Z
 444:	81 60       	ori	r24, 0x01	; 1
 446:	80 83       	st	Z, r24
	sei();								// enable interrupts global
 448:	78 94       	sei
	
	
	DDR_SPI |= (1<<DD_MISO);			// set MISO Pin to output
 44a:	84 b1       	in	r24, 0x04	; 4
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	84 b9       	out	0x04, r24	; 4
	
	SPCR |= (1<<SPE)|(1<<SPR0);			// Enable SPI
 450:	8c b5       	in	r24, 0x2c	; 44
 452:	81 64       	ori	r24, 0x41	; 65
 454:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << WD_LED);			// clear init LED 
 456:	85 b1       	in	r24, 0x05	; 5
 458:	8f 77       	andi	r24, 0x7F	; 127
 45a:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		PORTB |= (1 << LED_WindMill);
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	80 61       	ori	r24, 0x10	; 16
 460:	85 b9       	out	0x05, r24	; 5
		wdt_reset();					// reset WDT => Counter = 0 
 462:	a8 95       	wdr
		//////////////////////////////////////////////////////////////////////////
		//                 calc pumps + LED Running Light
		//////////////////////////////////////////////////////////////////////////
			
		if(rData[0] == 0) {
 464:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 468:	81 11       	cpse	r24, r1
 46a:	0a c0       	rjmp	.+20     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			OCR1A = 0;
 46c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 470:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			PORTH &= ~((1 << LED_PUMP) | (1 << LED_GENERATOR));	
 474:	e2 e0       	ldi	r30, 0x02	; 2
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	80 81       	ld	r24, Z
 47a:	8c 7f       	andi	r24, 0xFC	; 252
 47c:	80 83       	st	Z, r24
 47e:	73 c0       	rjmp	.+230    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
		} else {
			if(rData[0] > 100) {	// generator runs
 480:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rData>
 484:	85 36       	cpi	r24, 0x65	; 101
 486:	c8 f1       	brcs	.+114    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
				PORTH |= (1 << LED_PUMP);		// enable pump leds mosfet
 488:	e2 e0       	ldi	r30, 0x02	; 2
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	80 81       	ld	r24, Z
 48e:	82 60       	ori	r24, 0x02	; 2
 490:	80 83       	st	Z, r24
				PORTH &= ~(1 << LED_GENERATOR);	// disable generator leds mosfet
 492:	80 81       	ld	r24, Z
 494:	8e 7f       	andi	r24, 0xFE	; 254
 496:	80 83       	st	Z, r24
				OCR1B = 0;
 498:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 49c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				OCR1A = (uint16_t)((((uint32_t)(rData[0] - 100) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
 4a0:	c8 e0       	ldi	r28, 0x08	; 8
 4a2:	d2 e0       	ldi	r29, 0x02	; 2
 4a4:	a8 81       	ld	r26, Y
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	a4 56       	subi	r26, 0x64	; 100
 4aa:	b1 09       	sbc	r27, r1
 4ac:	20 ea       	ldi	r18, 0xA0	; 160
 4ae:	3f e0       	ldi	r19, 0x0F	; 15
 4b0:	e8 d2       	rcall	.+1488   	; 0xa82 <__usmulhisi3>
 4b2:	0f 2e       	mov	r0, r31
 4b4:	f4 e6       	ldi	r31, 0x64	; 100
 4b6:	cf 2e       	mov	r12, r31
 4b8:	d1 2c       	mov	r13, r1
 4ba:	e1 2c       	mov	r14, r1
 4bc:	f1 2c       	mov	r15, r1
 4be:	f0 2d       	mov	r31, r0
 4c0:	a7 01       	movw	r20, r14
 4c2:	96 01       	movw	r18, r12
 4c4:	ad d2       	rcall	.+1370   	; 0xa20 <__udivmodsi4>
 4c6:	20 56       	subi	r18, 0x60	; 96
 4c8:	30 4f       	sbci	r19, 0xF0	; 240
 4ca:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4ce:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				ICR5 = (uint16_t)((((uint32_t)(100-(rData[0] - 100)) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
 4d2:	88 81       	ld	r24, Y
 4d4:	a8 ec       	ldi	r26, 0xC8	; 200
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	a8 1b       	sub	r26, r24
 4da:	b1 09       	sbc	r27, r1
 4dc:	28 e6       	ldi	r18, 0x68	; 104
 4de:	38 e4       	ldi	r19, 0x48	; 72
 4e0:	4f ef       	ldi	r20, 0xFF	; 255
 4e2:	5f ef       	ldi	r21, 0xFF	; 255
 4e4:	de d2       	rcall	.+1468   	; 0xaa2 <__mulshisi3>
 4e6:	a7 01       	movw	r20, r14
 4e8:	96 01       	movw	r18, r12
 4ea:	9a d2       	rcall	.+1332   	; 0xa20 <__udivmodsi4>
 4ec:	28 54       	subi	r18, 0x48	; 72
 4ee:	34 4f       	sbci	r19, 0xF4	; 244
 4f0:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 4f4:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
 4f8:	36 c0       	rjmp	.+108    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
			} else {
				PORTH &= ~(1 << LED_PUMP);		// disable pump leds mosfet
 4fa:	e2 e0       	ldi	r30, 0x02	; 2
 4fc:	f1 e0       	ldi	r31, 0x01	; 1
 4fe:	80 81       	ld	r24, Z
 500:	8d 7f       	andi	r24, 0xFD	; 253
 502:	80 83       	st	Z, r24
				PORTH |= (1 << LED_GENERATOR);	// enable generator leds mosfet
 504:	80 81       	ld	r24, Z
 506:	81 60       	ori	r24, 0x01	; 1
 508:	80 83       	st	Z, r24
				OCR1A = 0;
 50a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 50e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				OCR1B = (uint16_t)((((uint32_t)(100 - rData[0]) * (uint32_t)(PUMP_ICR - PUMP_FASTEST_OCR))/100) + PUMP_FASTEST_OCR);
 512:	c8 e0       	ldi	r28, 0x08	; 8
 514:	d2 e0       	ldi	r29, 0x02	; 2
 516:	88 81       	ld	r24, Y
 518:	a4 e6       	ldi	r26, 0x64	; 100
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	a8 1b       	sub	r26, r24
 51e:	b1 09       	sbc	r27, r1
 520:	20 ea       	ldi	r18, 0xA0	; 160
 522:	3f e0       	ldi	r19, 0x0F	; 15
 524:	ae d2       	rcall	.+1372   	; 0xa82 <__usmulhisi3>
 526:	0f 2e       	mov	r0, r31
 528:	f4 e6       	ldi	r31, 0x64	; 100
 52a:	cf 2e       	mov	r12, r31
 52c:	d1 2c       	mov	r13, r1
 52e:	e1 2c       	mov	r14, r1
 530:	f1 2c       	mov	r15, r1
 532:	f0 2d       	mov	r31, r0
 534:	a7 01       	movw	r20, r14
 536:	96 01       	movw	r18, r12
 538:	73 d2       	rcall	.+1254   	; 0xa20 <__udivmodsi4>
 53a:	20 56       	subi	r18, 0x60	; 96
 53c:	30 4f       	sbci	r19, 0xF0	; 240
 53e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 542:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				ICR5 = (uint16_t)((((uint32_t)(rData[0]) * (uint32_t)(LED_FASTEST_ICR - LED_SLOWEST_ICR))/100) + LED_FASTEST_ICR);
 546:	a8 81       	ld	r26, Y
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	28 e6       	ldi	r18, 0x68	; 104
 54c:	38 e4       	ldi	r19, 0x48	; 72
 54e:	4f ef       	ldi	r20, 0xFF	; 255
 550:	5f ef       	ldi	r21, 0xFF	; 255
 552:	9d d2       	rcall	.+1338   	; 0xa8e <__muluhisi3>
 554:	a7 01       	movw	r20, r14
 556:	96 01       	movw	r18, r12
 558:	63 d2       	rcall	.+1222   	; 0xa20 <__udivmodsi4>
 55a:	28 54       	subi	r18, 0x48	; 72
 55c:	34 4f       	sbci	r19, 0xF4	; 244
 55e:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
 562:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//                       calc Windmill - PWM
		//////////////////////////////////////////////////////////////////////////
		if(rData[1] <= 0) {
 566:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rData+0x1>
 56a:	81 11       	cpse	r24, r1
 56c:	05 c0       	rjmp	.+10     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
			OCR3A = 0;
 56e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 572:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		} else {
			OCR3A =  (uint16_t)((((uint32_t)rData[1] * (uint32_t)(WM_ICR - WM_FASTEST_OCR))/100) + WM_FASTEST_OCR) - 1;
 576:	11 c0       	rjmp	.+34     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 578:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <rData+0x1>
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	a0 ea       	ldi	r26, 0xA0	; 160
 580:	bf e0       	ldi	r27, 0x0F	; 15
 582:	70 d2       	rcall	.+1248   	; 0xa64 <__umulhisi3>
 584:	24 e6       	ldi	r18, 0x64	; 100
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	49 d2       	rcall	.+1170   	; 0xa20 <__udivmodsi4>
 58e:	21 56       	subi	r18, 0x61	; 97
 590:	30 4f       	sbci	r19, 0xF0	; 240
 592:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 596:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		// 3. in ISR if rising edge start Timer 4
		// 4. wait for falling edge on INT0
		// 5. in ISR if falling edge stop Timer 4
		// 6. calculate distance and set tData 0 and 1
		// 7. stop INT0 sensing and set TCNT4 = 0
		PORTJ |= (1 << US_TRIGGER_IN);
 59a:	e5 e0       	ldi	r30, 0x05	; 5
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	80 81       	ld	r24, Z
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a4:	8a e6       	ldi	r24, 0x6A	; 106
 5a6:	8a 95       	dec	r24
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_IN);
 5ac:	80 81       	ld	r24, Z
 5ae:	8e 7f       	andi	r24, 0xFE	; 254
 5b0:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);			// activate INT0 interrupt 
 5b2:	8d b3       	in	r24, 0x1d	; 29
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 5be:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 5c2:	81 11       	cpse	r24, r1
 5c4:	fc cf       	rjmp	.-8      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
		};
		EIMSK &= ~(1 << INT0);			// deactivate INT0 interrupt
 5c6:	8d b3       	in	r24, 0x1d	; 29
 5c8:	8e 7f       	andi	r24, 0xFE	; 254
 5ca:	8d bb       	out	0x1d, r24	; 29
		
		PORTJ |= (1 << US_TRIGGER_OUT);
 5cc:	e5 e0       	ldi	r30, 0x05	; 5
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	80 81       	ld	r24, Z
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	80 83       	st	Z, r24
 5d6:	8a e6       	ldi	r24, 0x6A	; 106
 5d8:	8a 95       	dec	r24
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
		_delay_us(20);
		PORTJ &= ~(1 << US_TRIGGER_OUT);
 5de:	80 81       	ld	r24, Z
 5e0:	8d 7f       	andi	r24, 0xFD	; 253
 5e2:	80 83       	st	Z, r24
		EIMSK |= (1 << INT1);			// activate INT1 interrupt 
 5e4:	8d b3       	in	r24, 0x1d	; 29
 5e6:	82 60       	ori	r24, 0x02	; 2
 5e8:	8d bb       	out	0x1d, r24	; 29
		waiting = 1;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <waiting>
		while(waiting){
 5f0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <waiting>
 5f4:	81 11       	cpse	r24, r1
 5f6:	fc cf       	rjmp	.-8      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
		};
		EIMSK &= ~(1 << INT1);			// deactivate INT1 interrupt 
 5f8:	8d b3       	in	r24, 0x1d	; 29
 5fa:	8d 7f       	andi	r24, 0xFD	; 253
 5fc:	8d bb       	out	0x1d, r24	; 29
		
		
		TCCR5B |= (1 << CS50) | (1 << CS51);	// start LED Timer	
 5fe:	e1 e2       	ldi	r30, 0x21	; 33
 600:	f1 e0       	ldi	r31, 0x01	; 1
 602:	80 81       	ld	r24, Z
 604:	83 60       	ori	r24, 0x03	; 3
 606:	80 83       	st	Z, r24
		EIMSK |= (1 << INT2);					// enable !SS interupt when !SS is activated (falling edge)
 608:	8d b3       	in	r24, 0x1d	; 29
 60a:	84 60       	ori	r24, 0x04	; 4
 60c:	8d bb       	out	0x1d, r24	; 29
		PORTB &= ~(1 << LED_WindMill);			// turn out WindMill flash LED
 60e:	85 b1       	in	r24, 0x05	; 5
 610:	8f 7e       	andi	r24, 0xEF	; 239
 612:	85 b9       	out	0x05, r24	; 5
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	86 30       	cpi	r24, 0x06	; 6
 618:	08 f0       	brcs	.+2      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 61a:	20 cf       	rjmp	.-448    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
					
			// Write 1st byte into register
			SPDR = tData[idx];
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	f9 01       	movw	r30, r18
 622:	e0 50       	subi	r30, 0x00	; 0
 624:	fe 4f       	sbci	r31, 0xFE	; 254
 626:	90 81       	ld	r25, Z
 628:	9e bd       	out	0x2e, r25	; 46
					
			// Wait for transmission
			while(!(SPSR & (1<<SPIF)));
 62a:	0d b4       	in	r0, 0x2d	; 45
 62c:	07 fe       	sbrs	r0, 7
 62e:	fd cf       	rjmp	.-6      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
					
			// Because only the first 2 bytes are real data => check if its the 1st or 2nd byte
			if (idx < 2) {
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	50 f4       	brcc	.+20     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
				
				rData[idx] = SPDR;				// SPI Read register
 634:	9e b5       	in	r25, 0x2e	; 46
 636:	f9 01       	movw	r30, r18
 638:	e8 5f       	subi	r30, 0xF8	; 248
 63a:	fd 4f       	sbci	r31, 0xFD	; 253
 63c:	90 83       	st	Z, r25
				tData[idx + 4] = rData[idx];	// to send values back next time transmitting
 63e:	90 81       	ld	r25, Z
 640:	f9 01       	movw	r30, r18
 642:	ec 5f       	subi	r30, 0xFC	; 252
 644:	fd 4f       	sbci	r31, 0xFD	; 253
 646:	90 83       	st	Z, r25
		/*			   2 Bytes empfangen und in rData schreiben                 */
		/*						4 Bytes aus tData senden                        */
		/************************************************************************/
				
		// We will send 4 bytes so count up to 3
		for (uint8_t idx = 0; idx < 6; idx++) {
 648:	8f 5f       	subi	r24, 0xFF	; 255
 64a:	e5 cf       	rjmp	.-54     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>

0000064c <__subsf3>:
 64c:	50 58       	subi	r21, 0x80	; 128

0000064e <__addsf3>:
 64e:	bb 27       	eor	r27, r27
 650:	aa 27       	eor	r26, r26
 652:	0e d0       	rcall	.+28     	; 0x670 <__addsf3x>
 654:	48 c1       	rjmp	.+656    	; 0x8e6 <__fp_round>
 656:	39 d1       	rcall	.+626    	; 0x8ca <__fp_pscA>
 658:	30 f0       	brcs	.+12     	; 0x666 <__addsf3+0x18>
 65a:	3e d1       	rcall	.+636    	; 0x8d8 <__fp_pscB>
 65c:	20 f0       	brcs	.+8      	; 0x666 <__addsf3+0x18>
 65e:	31 f4       	brne	.+12     	; 0x66c <__addsf3+0x1e>
 660:	9f 3f       	cpi	r25, 0xFF	; 255
 662:	11 f4       	brne	.+4      	; 0x668 <__addsf3+0x1a>
 664:	1e f4       	brtc	.+6      	; 0x66c <__addsf3+0x1e>
 666:	2e c1       	rjmp	.+604    	; 0x8c4 <__fp_nan>
 668:	0e f4       	brtc	.+2      	; 0x66c <__addsf3+0x1e>
 66a:	e0 95       	com	r30
 66c:	e7 fb       	bst	r30, 7
 66e:	24 c1       	rjmp	.+584    	; 0x8b8 <__fp_inf>

00000670 <__addsf3x>:
 670:	e9 2f       	mov	r30, r25
 672:	4a d1       	rcall	.+660    	; 0x908 <__fp_split3>
 674:	80 f3       	brcs	.-32     	; 0x656 <__addsf3+0x8>
 676:	ba 17       	cp	r27, r26
 678:	62 07       	cpc	r22, r18
 67a:	73 07       	cpc	r23, r19
 67c:	84 07       	cpc	r24, r20
 67e:	95 07       	cpc	r25, r21
 680:	18 f0       	brcs	.+6      	; 0x688 <__addsf3x+0x18>
 682:	71 f4       	brne	.+28     	; 0x6a0 <__addsf3x+0x30>
 684:	9e f5       	brtc	.+102    	; 0x6ec <__addsf3x+0x7c>
 686:	62 c1       	rjmp	.+708    	; 0x94c <__fp_zero>
 688:	0e f4       	brtc	.+2      	; 0x68c <__addsf3x+0x1c>
 68a:	e0 95       	com	r30
 68c:	0b 2e       	mov	r0, r27
 68e:	ba 2f       	mov	r27, r26
 690:	a0 2d       	mov	r26, r0
 692:	0b 01       	movw	r0, r22
 694:	b9 01       	movw	r22, r18
 696:	90 01       	movw	r18, r0
 698:	0c 01       	movw	r0, r24
 69a:	ca 01       	movw	r24, r20
 69c:	a0 01       	movw	r20, r0
 69e:	11 24       	eor	r1, r1
 6a0:	ff 27       	eor	r31, r31
 6a2:	59 1b       	sub	r21, r25
 6a4:	99 f0       	breq	.+38     	; 0x6cc <__addsf3x+0x5c>
 6a6:	59 3f       	cpi	r21, 0xF9	; 249
 6a8:	50 f4       	brcc	.+20     	; 0x6be <__addsf3x+0x4e>
 6aa:	50 3e       	cpi	r21, 0xE0	; 224
 6ac:	68 f1       	brcs	.+90     	; 0x708 <__addsf3x+0x98>
 6ae:	1a 16       	cp	r1, r26
 6b0:	f0 40       	sbci	r31, 0x00	; 0
 6b2:	a2 2f       	mov	r26, r18
 6b4:	23 2f       	mov	r18, r19
 6b6:	34 2f       	mov	r19, r20
 6b8:	44 27       	eor	r20, r20
 6ba:	58 5f       	subi	r21, 0xF8	; 248
 6bc:	f3 cf       	rjmp	.-26     	; 0x6a4 <__addsf3x+0x34>
 6be:	46 95       	lsr	r20
 6c0:	37 95       	ror	r19
 6c2:	27 95       	ror	r18
 6c4:	a7 95       	ror	r26
 6c6:	f0 40       	sbci	r31, 0x00	; 0
 6c8:	53 95       	inc	r21
 6ca:	c9 f7       	brne	.-14     	; 0x6be <__addsf3x+0x4e>
 6cc:	7e f4       	brtc	.+30     	; 0x6ec <__addsf3x+0x7c>
 6ce:	1f 16       	cp	r1, r31
 6d0:	ba 0b       	sbc	r27, r26
 6d2:	62 0b       	sbc	r22, r18
 6d4:	73 0b       	sbc	r23, r19
 6d6:	84 0b       	sbc	r24, r20
 6d8:	ba f0       	brmi	.+46     	; 0x708 <__addsf3x+0x98>
 6da:	91 50       	subi	r25, 0x01	; 1
 6dc:	a1 f0       	breq	.+40     	; 0x706 <__addsf3x+0x96>
 6de:	ff 0f       	add	r31, r31
 6e0:	bb 1f       	adc	r27, r27
 6e2:	66 1f       	adc	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	c2 f7       	brpl	.-16     	; 0x6da <__addsf3x+0x6a>
 6ea:	0e c0       	rjmp	.+28     	; 0x708 <__addsf3x+0x98>
 6ec:	ba 0f       	add	r27, r26
 6ee:	62 1f       	adc	r22, r18
 6f0:	73 1f       	adc	r23, r19
 6f2:	84 1f       	adc	r24, r20
 6f4:	48 f4       	brcc	.+18     	; 0x708 <__addsf3x+0x98>
 6f6:	87 95       	ror	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b7 95       	ror	r27
 6fe:	f7 95       	ror	r31
 700:	9e 3f       	cpi	r25, 0xFE	; 254
 702:	08 f0       	brcs	.+2      	; 0x706 <__addsf3x+0x96>
 704:	b3 cf       	rjmp	.-154    	; 0x66c <__addsf3+0x1e>
 706:	93 95       	inc	r25
 708:	88 0f       	add	r24, r24
 70a:	08 f0       	brcs	.+2      	; 0x70e <__addsf3x+0x9e>
 70c:	99 27       	eor	r25, r25
 70e:	ee 0f       	add	r30, r30
 710:	97 95       	ror	r25
 712:	87 95       	ror	r24
 714:	08 95       	ret

00000716 <__divsf3>:
 716:	0c d0       	rcall	.+24     	; 0x730 <__divsf3x>
 718:	e6 c0       	rjmp	.+460    	; 0x8e6 <__fp_round>
 71a:	de d0       	rcall	.+444    	; 0x8d8 <__fp_pscB>
 71c:	40 f0       	brcs	.+16     	; 0x72e <__divsf3+0x18>
 71e:	d5 d0       	rcall	.+426    	; 0x8ca <__fp_pscA>
 720:	30 f0       	brcs	.+12     	; 0x72e <__divsf3+0x18>
 722:	21 f4       	brne	.+8      	; 0x72c <__divsf3+0x16>
 724:	5f 3f       	cpi	r21, 0xFF	; 255
 726:	19 f0       	breq	.+6      	; 0x72e <__divsf3+0x18>
 728:	c7 c0       	rjmp	.+398    	; 0x8b8 <__fp_inf>
 72a:	51 11       	cpse	r21, r1
 72c:	10 c1       	rjmp	.+544    	; 0x94e <__fp_szero>
 72e:	ca c0       	rjmp	.+404    	; 0x8c4 <__fp_nan>

00000730 <__divsf3x>:
 730:	eb d0       	rcall	.+470    	; 0x908 <__fp_split3>
 732:	98 f3       	brcs	.-26     	; 0x71a <__divsf3+0x4>

00000734 <__divsf3_pse>:
 734:	99 23       	and	r25, r25
 736:	c9 f3       	breq	.-14     	; 0x72a <__divsf3+0x14>
 738:	55 23       	and	r21, r21
 73a:	b1 f3       	breq	.-20     	; 0x728 <__divsf3+0x12>
 73c:	95 1b       	sub	r25, r21
 73e:	55 0b       	sbc	r21, r21
 740:	bb 27       	eor	r27, r27
 742:	aa 27       	eor	r26, r26
 744:	62 17       	cp	r22, r18
 746:	73 07       	cpc	r23, r19
 748:	84 07       	cpc	r24, r20
 74a:	38 f0       	brcs	.+14     	; 0x75a <__divsf3_pse+0x26>
 74c:	9f 5f       	subi	r25, 0xFF	; 255
 74e:	5f 4f       	sbci	r21, 0xFF	; 255
 750:	22 0f       	add	r18, r18
 752:	33 1f       	adc	r19, r19
 754:	44 1f       	adc	r20, r20
 756:	aa 1f       	adc	r26, r26
 758:	a9 f3       	breq	.-22     	; 0x744 <__divsf3_pse+0x10>
 75a:	33 d0       	rcall	.+102    	; 0x7c2 <__divsf3_pse+0x8e>
 75c:	0e 2e       	mov	r0, r30
 75e:	3a f0       	brmi	.+14     	; 0x76e <__divsf3_pse+0x3a>
 760:	e0 e8       	ldi	r30, 0x80	; 128
 762:	30 d0       	rcall	.+96     	; 0x7c4 <__divsf3_pse+0x90>
 764:	91 50       	subi	r25, 0x01	; 1
 766:	50 40       	sbci	r21, 0x00	; 0
 768:	e6 95       	lsr	r30
 76a:	00 1c       	adc	r0, r0
 76c:	ca f7       	brpl	.-14     	; 0x760 <__divsf3_pse+0x2c>
 76e:	29 d0       	rcall	.+82     	; 0x7c2 <__divsf3_pse+0x8e>
 770:	fe 2f       	mov	r31, r30
 772:	27 d0       	rcall	.+78     	; 0x7c2 <__divsf3_pse+0x8e>
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	bb 1f       	adc	r27, r27
 77c:	26 17       	cp	r18, r22
 77e:	37 07       	cpc	r19, r23
 780:	48 07       	cpc	r20, r24
 782:	ab 07       	cpc	r26, r27
 784:	b0 e8       	ldi	r27, 0x80	; 128
 786:	09 f0       	breq	.+2      	; 0x78a <__divsf3_pse+0x56>
 788:	bb 0b       	sbc	r27, r27
 78a:	80 2d       	mov	r24, r0
 78c:	bf 01       	movw	r22, r30
 78e:	ff 27       	eor	r31, r31
 790:	93 58       	subi	r25, 0x83	; 131
 792:	5f 4f       	sbci	r21, 0xFF	; 255
 794:	2a f0       	brmi	.+10     	; 0x7a0 <__divsf3_pse+0x6c>
 796:	9e 3f       	cpi	r25, 0xFE	; 254
 798:	51 05       	cpc	r21, r1
 79a:	68 f0       	brcs	.+26     	; 0x7b6 <__divsf3_pse+0x82>
 79c:	8d c0       	rjmp	.+282    	; 0x8b8 <__fp_inf>
 79e:	d7 c0       	rjmp	.+430    	; 0x94e <__fp_szero>
 7a0:	5f 3f       	cpi	r21, 0xFF	; 255
 7a2:	ec f3       	brlt	.-6      	; 0x79e <__divsf3_pse+0x6a>
 7a4:	98 3e       	cpi	r25, 0xE8	; 232
 7a6:	dc f3       	brlt	.-10     	; 0x79e <__divsf3_pse+0x6a>
 7a8:	86 95       	lsr	r24
 7aa:	77 95       	ror	r23
 7ac:	67 95       	ror	r22
 7ae:	b7 95       	ror	r27
 7b0:	f7 95       	ror	r31
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	c9 f7       	brne	.-14     	; 0x7a8 <__divsf3_pse+0x74>
 7b6:	88 0f       	add	r24, r24
 7b8:	91 1d       	adc	r25, r1
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret
 7c2:	e1 e0       	ldi	r30, 0x01	; 1
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	bb 1f       	adc	r27, r27
 7cc:	62 17       	cp	r22, r18
 7ce:	73 07       	cpc	r23, r19
 7d0:	84 07       	cpc	r24, r20
 7d2:	ba 07       	cpc	r27, r26
 7d4:	20 f0       	brcs	.+8      	; 0x7de <__divsf3_pse+0xaa>
 7d6:	62 1b       	sub	r22, r18
 7d8:	73 0b       	sbc	r23, r19
 7da:	84 0b       	sbc	r24, r20
 7dc:	ba 0b       	sbc	r27, r26
 7de:	ee 1f       	adc	r30, r30
 7e0:	88 f7       	brcc	.-30     	; 0x7c4 <__divsf3_pse+0x90>
 7e2:	e0 95       	com	r30
 7e4:	08 95       	ret

000007e6 <__fixunssfsi>:
 7e6:	98 d0       	rcall	.+304    	; 0x918 <__fp_splitA>
 7e8:	88 f0       	brcs	.+34     	; 0x80c <__fixunssfsi+0x26>
 7ea:	9f 57       	subi	r25, 0x7F	; 127
 7ec:	90 f0       	brcs	.+36     	; 0x812 <__fixunssfsi+0x2c>
 7ee:	b9 2f       	mov	r27, r25
 7f0:	99 27       	eor	r25, r25
 7f2:	b7 51       	subi	r27, 0x17	; 23
 7f4:	a0 f0       	brcs	.+40     	; 0x81e <__fixunssfsi+0x38>
 7f6:	d1 f0       	breq	.+52     	; 0x82c <__fixunssfsi+0x46>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	88 1f       	adc	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	1a f0       	brmi	.+6      	; 0x808 <__fixunssfsi+0x22>
 802:	ba 95       	dec	r27
 804:	c9 f7       	brne	.-14     	; 0x7f8 <__fixunssfsi+0x12>
 806:	12 c0       	rjmp	.+36     	; 0x82c <__fixunssfsi+0x46>
 808:	b1 30       	cpi	r27, 0x01	; 1
 80a:	81 f0       	breq	.+32     	; 0x82c <__fixunssfsi+0x46>
 80c:	9f d0       	rcall	.+318    	; 0x94c <__fp_zero>
 80e:	b1 e0       	ldi	r27, 0x01	; 1
 810:	08 95       	ret
 812:	9c c0       	rjmp	.+312    	; 0x94c <__fp_zero>
 814:	67 2f       	mov	r22, r23
 816:	78 2f       	mov	r23, r24
 818:	88 27       	eor	r24, r24
 81a:	b8 5f       	subi	r27, 0xF8	; 248
 81c:	39 f0       	breq	.+14     	; 0x82c <__fixunssfsi+0x46>
 81e:	b9 3f       	cpi	r27, 0xF9	; 249
 820:	cc f3       	brlt	.-14     	; 0x814 <__fixunssfsi+0x2e>
 822:	86 95       	lsr	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b3 95       	inc	r27
 82a:	d9 f7       	brne	.-10     	; 0x822 <__fixunssfsi+0x3c>
 82c:	3e f4       	brtc	.+14     	; 0x83c <__fixunssfsi+0x56>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__floatunsisf>:
 83e:	e8 94       	clt
 840:	09 c0       	rjmp	.+18     	; 0x854 <__floatsisf+0x12>

00000842 <__floatsisf>:
 842:	97 fb       	bst	r25, 7
 844:	3e f4       	brtc	.+14     	; 0x854 <__floatsisf+0x12>
 846:	90 95       	com	r25
 848:	80 95       	com	r24
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	99 23       	and	r25, r25
 856:	a9 f0       	breq	.+42     	; 0x882 <__floatsisf+0x40>
 858:	f9 2f       	mov	r31, r25
 85a:	96 e9       	ldi	r25, 0x96	; 150
 85c:	bb 27       	eor	r27, r27
 85e:	93 95       	inc	r25
 860:	f6 95       	lsr	r31
 862:	87 95       	ror	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b7 95       	ror	r27
 86a:	f1 11       	cpse	r31, r1
 86c:	f8 cf       	rjmp	.-16     	; 0x85e <__floatsisf+0x1c>
 86e:	fa f4       	brpl	.+62     	; 0x8ae <__floatsisf+0x6c>
 870:	bb 0f       	add	r27, r27
 872:	11 f4       	brne	.+4      	; 0x878 <__floatsisf+0x36>
 874:	60 ff       	sbrs	r22, 0
 876:	1b c0       	rjmp	.+54     	; 0x8ae <__floatsisf+0x6c>
 878:	6f 5f       	subi	r22, 0xFF	; 255
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	16 c0       	rjmp	.+44     	; 0x8ae <__floatsisf+0x6c>
 882:	88 23       	and	r24, r24
 884:	11 f0       	breq	.+4      	; 0x88a <__floatsisf+0x48>
 886:	96 e9       	ldi	r25, 0x96	; 150
 888:	11 c0       	rjmp	.+34     	; 0x8ac <__floatsisf+0x6a>
 88a:	77 23       	and	r23, r23
 88c:	21 f0       	breq	.+8      	; 0x896 <__floatsisf+0x54>
 88e:	9e e8       	ldi	r25, 0x8E	; 142
 890:	87 2f       	mov	r24, r23
 892:	76 2f       	mov	r23, r22
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <__floatsisf+0x5e>
 896:	66 23       	and	r22, r22
 898:	71 f0       	breq	.+28     	; 0x8b6 <__floatsisf+0x74>
 89a:	96 e8       	ldi	r25, 0x86	; 134
 89c:	86 2f       	mov	r24, r22
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	2a f0       	brmi	.+10     	; 0x8ae <__floatsisf+0x6c>
 8a4:	9a 95       	dec	r25
 8a6:	66 0f       	add	r22, r22
 8a8:	77 1f       	adc	r23, r23
 8aa:	88 1f       	adc	r24, r24
 8ac:	da f7       	brpl	.-10     	; 0x8a4 <__floatsisf+0x62>
 8ae:	88 0f       	add	r24, r24
 8b0:	96 95       	lsr	r25
 8b2:	87 95       	ror	r24
 8b4:	97 f9       	bld	r25, 7
 8b6:	08 95       	ret

000008b8 <__fp_inf>:
 8b8:	97 f9       	bld	r25, 7
 8ba:	9f 67       	ori	r25, 0x7F	; 127
 8bc:	80 e8       	ldi	r24, 0x80	; 128
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	08 95       	ret

000008c4 <__fp_nan>:
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	80 ec       	ldi	r24, 0xC0	; 192
 8c8:	08 95       	ret

000008ca <__fp_pscA>:
 8ca:	00 24       	eor	r0, r0
 8cc:	0a 94       	dec	r0
 8ce:	16 16       	cp	r1, r22
 8d0:	17 06       	cpc	r1, r23
 8d2:	18 06       	cpc	r1, r24
 8d4:	09 06       	cpc	r0, r25
 8d6:	08 95       	ret

000008d8 <__fp_pscB>:
 8d8:	00 24       	eor	r0, r0
 8da:	0a 94       	dec	r0
 8dc:	12 16       	cp	r1, r18
 8de:	13 06       	cpc	r1, r19
 8e0:	14 06       	cpc	r1, r20
 8e2:	05 06       	cpc	r0, r21
 8e4:	08 95       	ret

000008e6 <__fp_round>:
 8e6:	09 2e       	mov	r0, r25
 8e8:	03 94       	inc	r0
 8ea:	00 0c       	add	r0, r0
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <__fp_round+0xc>
 8ee:	88 23       	and	r24, r24
 8f0:	52 f0       	brmi	.+20     	; 0x906 <__fp_round+0x20>
 8f2:	bb 0f       	add	r27, r27
 8f4:	40 f4       	brcc	.+16     	; 0x906 <__fp_round+0x20>
 8f6:	bf 2b       	or	r27, r31
 8f8:	11 f4       	brne	.+4      	; 0x8fe <__fp_round+0x18>
 8fa:	60 ff       	sbrs	r22, 0
 8fc:	04 c0       	rjmp	.+8      	; 0x906 <__fp_round+0x20>
 8fe:	6f 5f       	subi	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	08 95       	ret

00000908 <__fp_split3>:
 908:	57 fd       	sbrc	r21, 7
 90a:	90 58       	subi	r25, 0x80	; 128
 90c:	44 0f       	add	r20, r20
 90e:	55 1f       	adc	r21, r21
 910:	59 f0       	breq	.+22     	; 0x928 <__fp_splitA+0x10>
 912:	5f 3f       	cpi	r21, 0xFF	; 255
 914:	71 f0       	breq	.+28     	; 0x932 <__fp_splitA+0x1a>
 916:	47 95       	ror	r20

00000918 <__fp_splitA>:
 918:	88 0f       	add	r24, r24
 91a:	97 fb       	bst	r25, 7
 91c:	99 1f       	adc	r25, r25
 91e:	61 f0       	breq	.+24     	; 0x938 <__fp_splitA+0x20>
 920:	9f 3f       	cpi	r25, 0xFF	; 255
 922:	79 f0       	breq	.+30     	; 0x942 <__fp_splitA+0x2a>
 924:	87 95       	ror	r24
 926:	08 95       	ret
 928:	12 16       	cp	r1, r18
 92a:	13 06       	cpc	r1, r19
 92c:	14 06       	cpc	r1, r20
 92e:	55 1f       	adc	r21, r21
 930:	f2 cf       	rjmp	.-28     	; 0x916 <__fp_split3+0xe>
 932:	46 95       	lsr	r20
 934:	f1 df       	rcall	.-30     	; 0x918 <__fp_splitA>
 936:	08 c0       	rjmp	.+16     	; 0x948 <__fp_splitA+0x30>
 938:	16 16       	cp	r1, r22
 93a:	17 06       	cpc	r1, r23
 93c:	18 06       	cpc	r1, r24
 93e:	99 1f       	adc	r25, r25
 940:	f1 cf       	rjmp	.-30     	; 0x924 <__fp_splitA+0xc>
 942:	86 95       	lsr	r24
 944:	71 05       	cpc	r23, r1
 946:	61 05       	cpc	r22, r1
 948:	08 94       	sec
 94a:	08 95       	ret

0000094c <__fp_zero>:
 94c:	e8 94       	clt

0000094e <__fp_szero>:
 94e:	bb 27       	eor	r27, r27
 950:	66 27       	eor	r22, r22
 952:	77 27       	eor	r23, r23
 954:	cb 01       	movw	r24, r22
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__mulsf3>:
 95a:	0b d0       	rcall	.+22     	; 0x972 <__mulsf3x>
 95c:	c4 cf       	rjmp	.-120    	; 0x8e6 <__fp_round>
 95e:	b5 df       	rcall	.-150    	; 0x8ca <__fp_pscA>
 960:	28 f0       	brcs	.+10     	; 0x96c <__mulsf3+0x12>
 962:	ba df       	rcall	.-140    	; 0x8d8 <__fp_pscB>
 964:	18 f0       	brcs	.+6      	; 0x96c <__mulsf3+0x12>
 966:	95 23       	and	r25, r21
 968:	09 f0       	breq	.+2      	; 0x96c <__mulsf3+0x12>
 96a:	a6 cf       	rjmp	.-180    	; 0x8b8 <__fp_inf>
 96c:	ab cf       	rjmp	.-170    	; 0x8c4 <__fp_nan>
 96e:	11 24       	eor	r1, r1
 970:	ee cf       	rjmp	.-36     	; 0x94e <__fp_szero>

00000972 <__mulsf3x>:
 972:	ca df       	rcall	.-108    	; 0x908 <__fp_split3>
 974:	a0 f3       	brcs	.-24     	; 0x95e <__mulsf3+0x4>

00000976 <__mulsf3_pse>:
 976:	95 9f       	mul	r25, r21
 978:	d1 f3       	breq	.-12     	; 0x96e <__mulsf3+0x14>
 97a:	95 0f       	add	r25, r21
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	55 1f       	adc	r21, r21
 980:	62 9f       	mul	r22, r18
 982:	f0 01       	movw	r30, r0
 984:	72 9f       	mul	r23, r18
 986:	bb 27       	eor	r27, r27
 988:	f0 0d       	add	r31, r0
 98a:	b1 1d       	adc	r27, r1
 98c:	63 9f       	mul	r22, r19
 98e:	aa 27       	eor	r26, r26
 990:	f0 0d       	add	r31, r0
 992:	b1 1d       	adc	r27, r1
 994:	aa 1f       	adc	r26, r26
 996:	64 9f       	mul	r22, r20
 998:	66 27       	eor	r22, r22
 99a:	b0 0d       	add	r27, r0
 99c:	a1 1d       	adc	r26, r1
 99e:	66 1f       	adc	r22, r22
 9a0:	82 9f       	mul	r24, r18
 9a2:	22 27       	eor	r18, r18
 9a4:	b0 0d       	add	r27, r0
 9a6:	a1 1d       	adc	r26, r1
 9a8:	62 1f       	adc	r22, r18
 9aa:	73 9f       	mul	r23, r19
 9ac:	b0 0d       	add	r27, r0
 9ae:	a1 1d       	adc	r26, r1
 9b0:	62 1f       	adc	r22, r18
 9b2:	83 9f       	mul	r24, r19
 9b4:	a0 0d       	add	r26, r0
 9b6:	61 1d       	adc	r22, r1
 9b8:	22 1f       	adc	r18, r18
 9ba:	74 9f       	mul	r23, r20
 9bc:	33 27       	eor	r19, r19
 9be:	a0 0d       	add	r26, r0
 9c0:	61 1d       	adc	r22, r1
 9c2:	23 1f       	adc	r18, r19
 9c4:	84 9f       	mul	r24, r20
 9c6:	60 0d       	add	r22, r0
 9c8:	21 1d       	adc	r18, r1
 9ca:	82 2f       	mov	r24, r18
 9cc:	76 2f       	mov	r23, r22
 9ce:	6a 2f       	mov	r22, r26
 9d0:	11 24       	eor	r1, r1
 9d2:	9f 57       	subi	r25, 0x7F	; 127
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	8a f0       	brmi	.+34     	; 0x9fa <__mulsf3_pse+0x84>
 9d8:	e1 f0       	breq	.+56     	; 0xa12 <__mulsf3_pse+0x9c>
 9da:	88 23       	and	r24, r24
 9dc:	4a f0       	brmi	.+18     	; 0x9f0 <__mulsf3_pse+0x7a>
 9de:	ee 0f       	add	r30, r30
 9e0:	ff 1f       	adc	r31, r31
 9e2:	bb 1f       	adc	r27, r27
 9e4:	66 1f       	adc	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	91 50       	subi	r25, 0x01	; 1
 9ec:	50 40       	sbci	r21, 0x00	; 0
 9ee:	a9 f7       	brne	.-22     	; 0x9da <__mulsf3_pse+0x64>
 9f0:	9e 3f       	cpi	r25, 0xFE	; 254
 9f2:	51 05       	cpc	r21, r1
 9f4:	70 f0       	brcs	.+28     	; 0xa12 <__mulsf3_pse+0x9c>
 9f6:	60 cf       	rjmp	.-320    	; 0x8b8 <__fp_inf>
 9f8:	aa cf       	rjmp	.-172    	; 0x94e <__fp_szero>
 9fa:	5f 3f       	cpi	r21, 0xFF	; 255
 9fc:	ec f3       	brlt	.-6      	; 0x9f8 <__mulsf3_pse+0x82>
 9fe:	98 3e       	cpi	r25, 0xE8	; 232
 a00:	dc f3       	brlt	.-10     	; 0x9f8 <__mulsf3_pse+0x82>
 a02:	86 95       	lsr	r24
 a04:	77 95       	ror	r23
 a06:	67 95       	ror	r22
 a08:	b7 95       	ror	r27
 a0a:	f7 95       	ror	r31
 a0c:	e7 95       	ror	r30
 a0e:	9f 5f       	subi	r25, 0xFF	; 255
 a10:	c1 f7       	brne	.-16     	; 0xa02 <__mulsf3_pse+0x8c>
 a12:	fe 2b       	or	r31, r30
 a14:	88 0f       	add	r24, r24
 a16:	91 1d       	adc	r25, r1
 a18:	96 95       	lsr	r25
 a1a:	87 95       	ror	r24
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__udivmodsi4>:
 a20:	a1 e2       	ldi	r26, 0x21	; 33
 a22:	1a 2e       	mov	r1, r26
 a24:	aa 1b       	sub	r26, r26
 a26:	bb 1b       	sub	r27, r27
 a28:	fd 01       	movw	r30, r26
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <__udivmodsi4_ep>

00000a2c <__udivmodsi4_loop>:
 a2c:	aa 1f       	adc	r26, r26
 a2e:	bb 1f       	adc	r27, r27
 a30:	ee 1f       	adc	r30, r30
 a32:	ff 1f       	adc	r31, r31
 a34:	a2 17       	cp	r26, r18
 a36:	b3 07       	cpc	r27, r19
 a38:	e4 07       	cpc	r30, r20
 a3a:	f5 07       	cpc	r31, r21
 a3c:	20 f0       	brcs	.+8      	; 0xa46 <__udivmodsi4_ep>
 a3e:	a2 1b       	sub	r26, r18
 a40:	b3 0b       	sbc	r27, r19
 a42:	e4 0b       	sbc	r30, r20
 a44:	f5 0b       	sbc	r31, r21

00000a46 <__udivmodsi4_ep>:
 a46:	66 1f       	adc	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	1a 94       	dec	r1
 a50:	69 f7       	brne	.-38     	; 0xa2c <__udivmodsi4_loop>
 a52:	60 95       	com	r22
 a54:	70 95       	com	r23
 a56:	80 95       	com	r24
 a58:	90 95       	com	r25
 a5a:	9b 01       	movw	r18, r22
 a5c:	ac 01       	movw	r20, r24
 a5e:	bd 01       	movw	r22, r26
 a60:	cf 01       	movw	r24, r30
 a62:	08 95       	ret

00000a64 <__umulhisi3>:
 a64:	a2 9f       	mul	r26, r18
 a66:	b0 01       	movw	r22, r0
 a68:	b3 9f       	mul	r27, r19
 a6a:	c0 01       	movw	r24, r0
 a6c:	a3 9f       	mul	r26, r19
 a6e:	70 0d       	add	r23, r0
 a70:	81 1d       	adc	r24, r1
 a72:	11 24       	eor	r1, r1
 a74:	91 1d       	adc	r25, r1
 a76:	b2 9f       	mul	r27, r18
 a78:	70 0d       	add	r23, r0
 a7a:	81 1d       	adc	r24, r1
 a7c:	11 24       	eor	r1, r1
 a7e:	91 1d       	adc	r25, r1
 a80:	08 95       	ret

00000a82 <__usmulhisi3>:
 a82:	f0 df       	rcall	.-32     	; 0xa64 <__umulhisi3>

00000a84 <__usmulhisi3_tail>:
 a84:	b7 ff       	sbrs	r27, 7
 a86:	08 95       	ret
 a88:	82 1b       	sub	r24, r18
 a8a:	93 0b       	sbc	r25, r19
 a8c:	08 95       	ret

00000a8e <__muluhisi3>:
 a8e:	ea df       	rcall	.-44     	; 0xa64 <__umulhisi3>
 a90:	a5 9f       	mul	r26, r21
 a92:	90 0d       	add	r25, r0
 a94:	b4 9f       	mul	r27, r20
 a96:	90 0d       	add	r25, r0
 a98:	a4 9f       	mul	r26, r20
 a9a:	80 0d       	add	r24, r0
 a9c:	91 1d       	adc	r25, r1
 a9e:	11 24       	eor	r1, r1
 aa0:	08 95       	ret

00000aa2 <__mulshisi3>:
 aa2:	b7 ff       	sbrs	r27, 7
 aa4:	f4 cf       	rjmp	.-24     	; 0xa8e <__muluhisi3>

00000aa6 <__mulohisi3>:
 aa6:	f3 df       	rcall	.-26     	; 0xa8e <__muluhisi3>
 aa8:	82 1b       	sub	r24, r18
 aaa:	93 0b       	sbc	r25, r19
 aac:	08 95       	ret

00000aae <_exit>:
 aae:	f8 94       	cli

00000ab0 <__stop_program>:
 ab0:	ff cf       	rjmp	.-2      	; 0xab0 <__stop_program>
